
Autonomous.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031f8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003380  08003380  00013380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033a0  080033a0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080033a0  080033a0  000133a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033a8  080033a8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033a8  080033a8  000133a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033ac  080033ac  000133ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080033b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          0000026c  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002c8  200002c8  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000c71b  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001e0b  00000000  00000000  0002c7ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000cf8  00000000  00000000  0002e5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a27  00000000  00000000  0002f2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002136f  00000000  00000000  0002fd17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000fc50  00000000  00000000  00051086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cb55c  00000000  00000000  00060cd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000039ec  00000000  00000000  0012c234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  0012fc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003368 	.word	0x08003368

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08003368 	.word	0x08003368

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fbac 	bl	8000c24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f81c 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f972 	bl	80007b8 <MX_GPIO_Init>
  MX_DMA_Init();
 80004d4:	f000 f950 	bl	8000778 <MX_DMA_Init>
  MX_I2C1_Init();
 80004d8:	f000 f880 	bl	80005dc <MX_I2C1_Init>
  MX_TIM1_Init();
 80004dc:	f000 f8ac 	bl	8000638 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
//  imu_9250_0 = IMU_9250_Create();
//  calibrateGyro(imu_9250_0, 500);
  motor_0 = MOTOR_Create();
 80004e0:	f000 f9c2 	bl	8000868 <MOTOR_Create>
 80004e4:	4603      	mov	r3, r0
 80004e6:	4a07      	ldr	r2, [pc, #28]	; (8000504 <main+0x40>)
 80004e8:	6013      	str	r3, [r2, #0]
  motor_0->Prop_p.speed = 20;
 80004ea:	4b06      	ldr	r3, [pc, #24]	; (8000504 <main+0x40>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	2214      	movs	r2, #20
 80004f0:	809a      	strh	r2, [r3, #4]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  imu_9250_0->get_data(imu_9250_0);			// pointer store address of MPU9250_ProcessData function
//	  CalculateGyroAngle(&Angle, imu_9250_0);
	  motor_0->control_speed(motor_0);
 80004f2:	4b04      	ldr	r3, [pc, #16]	; (8000504 <main+0x40>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a02      	ldr	r2, [pc, #8]	; (8000504 <main+0x40>)
 80004fa:	6812      	ldr	r2, [r2, #0]
 80004fc:	4610      	mov	r0, r2
 80004fe:	4798      	blx	r3
 8000500:	e7f7      	b.n	80004f2 <main+0x2e>
 8000502:	bf00      	nop
 8000504:	20000174 	.word	0x20000174

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b094      	sub	sp, #80	; 0x50
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0320 	add.w	r3, r7, #32
 8000512:	2230      	movs	r2, #48	; 0x30
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f002 fee2 	bl	80032e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	4b28      	ldr	r3, [pc, #160]	; (80005d4 <SystemClock_Config+0xcc>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000534:	4a27      	ldr	r2, [pc, #156]	; (80005d4 <SystemClock_Config+0xcc>)
 8000536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053a:	6413      	str	r3, [r2, #64]	; 0x40
 800053c:	4b25      	ldr	r3, [pc, #148]	; (80005d4 <SystemClock_Config+0xcc>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <SystemClock_Config+0xd0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a21      	ldr	r2, [pc, #132]	; (80005d8 <SystemClock_Config+0xd0>)
 8000552:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000556:	6013      	str	r3, [r2, #0]
 8000558:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <SystemClock_Config+0xd0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000564:	2301      	movs	r3, #1
 8000566:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000568:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	2302      	movs	r3, #2
 8000570:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000572:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000576:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000578:	2308      	movs	r3, #8
 800057a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800057c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000580:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000582:	2302      	movs	r3, #2
 8000584:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000586:	2307      	movs	r3, #7
 8000588:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	4618      	mov	r0, r3
 8000590:	f001 fa96 	bl	8001ac0 <HAL_RCC_OscConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800059a:	f000 f95f 	bl	800085c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059e:	230f      	movs	r3, #15
 80005a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a2:	2302      	movs	r3, #2
 80005a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005b6:	f107 030c 	add.w	r3, r7, #12
 80005ba:	2105      	movs	r1, #5
 80005bc:	4618      	mov	r0, r3
 80005be:	f001 fcf7 	bl	8001fb0 <HAL_RCC_ClockConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005c8:	f000 f948 	bl	800085c <Error_Handler>
  }
}
 80005cc:	bf00      	nop
 80005ce:	3750      	adds	r7, #80	; 0x50
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40007000 	.word	0x40007000

080005dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <MX_I2C1_Init+0x50>)
 80005e2:	4a13      	ldr	r2, [pc, #76]	; (8000630 <MX_I2C1_Init+0x54>)
 80005e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <MX_I2C1_Init+0x50>)
 80005e8:	4a12      	ldr	r2, [pc, #72]	; (8000634 <MX_I2C1_Init+0x58>)
 80005ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <MX_I2C1_Init+0x50>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <MX_I2C1_Init+0x50>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f8:	4b0c      	ldr	r3, [pc, #48]	; (800062c <MX_I2C1_Init+0x50>)
 80005fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000600:	4b0a      	ldr	r3, [pc, #40]	; (800062c <MX_I2C1_Init+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000606:	4b09      	ldr	r3, [pc, #36]	; (800062c <MX_I2C1_Init+0x50>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800060c:	4b07      	ldr	r3, [pc, #28]	; (800062c <MX_I2C1_Init+0x50>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000612:	4b06      	ldr	r3, [pc, #24]	; (800062c <MX_I2C1_Init+0x50>)
 8000614:	2200      	movs	r2, #0
 8000616:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000618:	4804      	ldr	r0, [pc, #16]	; (800062c <MX_I2C1_Init+0x50>)
 800061a:	f001 f90d 	bl	8001838 <HAL_I2C_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000624:	f000 f91a 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000078 	.word	0x20000078
 8000630:	40005400 	.word	0x40005400
 8000634:	00061a80 	.word	0x00061a80

08000638 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b096      	sub	sp, #88	; 0x58
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800063e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800064c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]
 8000666:	615a      	str	r2, [r3, #20]
 8000668:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	2220      	movs	r2, #32
 800066e:	2100      	movs	r1, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f002 fe35 	bl	80032e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000676:	4b3e      	ldr	r3, [pc, #248]	; (8000770 <MX_TIM1_Init+0x138>)
 8000678:	4a3e      	ldr	r2, [pc, #248]	; (8000774 <MX_TIM1_Init+0x13c>)
 800067a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 800067c:	4b3c      	ldr	r3, [pc, #240]	; (8000770 <MX_TIM1_Init+0x138>)
 800067e:	22a7      	movs	r2, #167	; 0xa7
 8000680:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000682:	4b3b      	ldr	r3, [pc, #236]	; (8000770 <MX_TIM1_Init+0x138>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000688:	4b39      	ldr	r3, [pc, #228]	; (8000770 <MX_TIM1_Init+0x138>)
 800068a:	2263      	movs	r2, #99	; 0x63
 800068c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800068e:	4b38      	ldr	r3, [pc, #224]	; (8000770 <MX_TIM1_Init+0x138>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000694:	4b36      	ldr	r3, [pc, #216]	; (8000770 <MX_TIM1_Init+0x138>)
 8000696:	2200      	movs	r2, #0
 8000698:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800069a:	4b35      	ldr	r3, [pc, #212]	; (8000770 <MX_TIM1_Init+0x138>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006a0:	4833      	ldr	r0, [pc, #204]	; (8000770 <MX_TIM1_Init+0x138>)
 80006a2:	f001 fe91 	bl	80023c8 <HAL_TIM_Base_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80006ac:	f000 f8d6 	bl	800085c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006ba:	4619      	mov	r1, r3
 80006bc:	482c      	ldr	r0, [pc, #176]	; (8000770 <MX_TIM1_Init+0x138>)
 80006be:	f002 f8b5 	bl	800282c <HAL_TIM_ConfigClockSource>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80006c8:	f000 f8c8 	bl	800085c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006cc:	4828      	ldr	r0, [pc, #160]	; (8000770 <MX_TIM1_Init+0x138>)
 80006ce:	f001 feca 	bl	8002466 <HAL_TIM_PWM_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80006d8:	f000 f8c0 	bl	800085c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006dc:	2300      	movs	r3, #0
 80006de:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e0:	2300      	movs	r3, #0
 80006e2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006e8:	4619      	mov	r1, r3
 80006ea:	4821      	ldr	r0, [pc, #132]	; (8000770 <MX_TIM1_Init+0x138>)
 80006ec:	f002 fc76 	bl	8002fdc <HAL_TIMEx_MasterConfigSynchronization>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80006f6:	f000 f8b1 	bl	800085c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006fa:	2360      	movs	r3, #96	; 0x60
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000702:	2300      	movs	r3, #0
 8000704:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000706:	2300      	movs	r3, #0
 8000708:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800070a:	2300      	movs	r3, #0
 800070c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800070e:	2300      	movs	r3, #0
 8000710:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000712:	2300      	movs	r3, #0
 8000714:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071a:	2200      	movs	r2, #0
 800071c:	4619      	mov	r1, r3
 800071e:	4814      	ldr	r0, [pc, #80]	; (8000770 <MX_TIM1_Init+0x138>)
 8000720:	f001 ffc2 	bl	80026a8 <HAL_TIM_PWM_ConfigChannel>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800072a:	f000 f897 	bl	800085c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000736:	2300      	movs	r3, #0
 8000738:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800073e:	2300      	movs	r3, #0
 8000740:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000742:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000746:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000748:	2300      	movs	r3, #0
 800074a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	4619      	mov	r1, r3
 8000750:	4807      	ldr	r0, [pc, #28]	; (8000770 <MX_TIM1_Init+0x138>)
 8000752:	f002 fcbf 	bl	80030d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800075c:	f000 f87e 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000760:	4803      	ldr	r0, [pc, #12]	; (8000770 <MX_TIM1_Init+0x138>)
 8000762:	f000 f97f 	bl	8000a64 <HAL_TIM_MspPostInit>

}
 8000766:	bf00      	nop
 8000768:	3758      	adds	r7, #88	; 0x58
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200000cc 	.word	0x200000cc
 8000774:	40010000 	.word	0x40010000

08000778 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_DMA_Init+0x3c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a0b      	ldr	r2, [pc, #44]	; (80007b4 <MX_DMA_Init+0x3c>)
 8000788:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_DMA_Init+0x3c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	2039      	movs	r0, #57	; 0x39
 80007a0:	f000 fb8d 	bl	8000ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80007a4:	2039      	movs	r0, #57	; 0x39
 80007a6:	f000 fba6 	bl	8000ef6 <HAL_NVIC_EnableIRQ>

}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b087      	sub	sp, #28
 80007bc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
 80007c2:	4b25      	ldr	r3, [pc, #148]	; (8000858 <MX_GPIO_Init+0xa0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a24      	ldr	r2, [pc, #144]	; (8000858 <MX_GPIO_Init+0xa0>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b22      	ldr	r3, [pc, #136]	; (8000858 <MX_GPIO_Init+0xa0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	4b1e      	ldr	r3, [pc, #120]	; (8000858 <MX_GPIO_Init+0xa0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a1d      	ldr	r2, [pc, #116]	; (8000858 <MX_GPIO_Init+0xa0>)
 80007e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <MX_GPIO_Init+0xa0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	4b17      	ldr	r3, [pc, #92]	; (8000858 <MX_GPIO_Init+0xa0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a16      	ldr	r2, [pc, #88]	; (8000858 <MX_GPIO_Init+0xa0>)
 8000800:	f043 0310 	orr.w	r3, r3, #16
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b14      	ldr	r3, [pc, #80]	; (8000858 <MX_GPIO_Init+0xa0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0310 	and.w	r3, r3, #16
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <MX_GPIO_Init+0xa0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a0f      	ldr	r2, [pc, #60]	; (8000858 <MX_GPIO_Init+0xa0>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <MX_GPIO_Init+0xa0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_GPIO_Init+0xa0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a08      	ldr	r2, [pc, #32]	; (8000858 <MX_GPIO_Init+0xa0>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_GPIO_Init+0xa0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800084a:	bf00      	nop
 800084c:	371c      	adds	r7, #28
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	40023800 	.word	0x40023800

0800085c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000860:	b672      	cpsid	i
}
 8000862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000864:	e7fe      	b.n	8000864 <Error_Handler+0x8>
	...

08000868 <MOTOR_Create>:
 * The function creates and initializes a new instance of the MOTOR structure.
 *
 * @return a pointer to a structure of type motor_t;
 */
motor_t *MOTOR_Create()
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
	motor_t *motor_p = malloc(sizeof(motor_t));
 800086e:	2008      	movs	r0, #8
 8000870:	f002 fc82 	bl	8003178 <malloc>
 8000874:	4603      	mov	r3, r0
 8000876:	607b      	str	r3, [r7, #4]
	if(motor_p != NULL)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d003      	beq.n	8000886 <MOTOR_Create+0x1e>
	{
		MOTOR_Init(motor_p,MOTOR_ControlSpeed);
 800087e:	4904      	ldr	r1, [pc, #16]	; (8000890 <MOTOR_Create+0x28>)
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f000 f807 	bl	8000894 <MOTOR_Init>
	}
	return motor_p;
 8000886:	687b      	ldr	r3, [r7, #4]
}
 8000888:	4618      	mov	r0, r3
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	080008b9 	.word	0x080008b9

08000894 <MOTOR_Init>:
 *
 * @param1: motor_p is a pointer to a structure of type motor_t.
 * @param2: (*ctrl_speed_func)(motor_t *motor_p) is a control speed function.
 */
void MOTOR_Init(motor_t *motor_p, void (*ctrl_speed_func)(motor_t *motor_p))
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
	motor_p->control_speed = ctrl_speed_func;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	683a      	ldr	r2, [r7, #0]
 80008a2:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80008a4:	2100      	movs	r1, #0
 80008a6:	4803      	ldr	r0, [pc, #12]	; (80008b4 <MOTOR_Init+0x20>)
 80008a8:	f001 fe36 	bl	8002518 <HAL_TIM_PWM_Start>
}
 80008ac:	bf00      	nop
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	200000cc 	.word	0x200000cc

080008b8 <MOTOR_ControlSpeed>:
 * The function MOTOR_ControlSpeed controls speed of the motor.
 *
 * @param1: motor_p is a pointer to a structure of type motor_t.
 */
void MOTOR_ControlSpeed(motor_t *motor_p)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
//	TIM1->CCR1 = motor_p->Prop_p.speed;
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,motor_p->Prop_p.speed);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	889a      	ldrh	r2, [r3, #4]
 80008c4:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <MOTOR_ControlSpeed+0x20>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	200000cc 	.word	0x200000cc

080008dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	4b10      	ldr	r3, [pc, #64]	; (8000928 <HAL_MspInit+0x4c>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ea:	4a0f      	ldr	r2, [pc, #60]	; (8000928 <HAL_MspInit+0x4c>)
 80008ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f0:	6453      	str	r3, [r2, #68]	; 0x44
 80008f2:	4b0d      	ldr	r3, [pc, #52]	; (8000928 <HAL_MspInit+0x4c>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <HAL_MspInit+0x4c>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000906:	4a08      	ldr	r2, [pc, #32]	; (8000928 <HAL_MspInit+0x4c>)
 8000908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800090c:	6413      	str	r3, [r2, #64]	; 0x40
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_MspInit+0x4c>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800091a:	2007      	movs	r0, #7
 800091c:	f000 fac4 	bl	8000ea8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40023800 	.word	0x40023800

0800092c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08a      	sub	sp, #40	; 0x28
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a19      	ldr	r2, [pc, #100]	; (80009b0 <HAL_I2C_MspInit+0x84>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d12b      	bne.n	80009a6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	613b      	str	r3, [r7, #16]
 8000952:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <HAL_I2C_MspInit+0x88>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a17      	ldr	r2, [pc, #92]	; (80009b4 <HAL_I2C_MspInit+0x88>)
 8000958:	f043 0302 	orr.w	r3, r3, #2
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <HAL_I2C_MspInit+0x88>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0302 	and.w	r3, r3, #2
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800096a:	23c0      	movs	r3, #192	; 0xc0
 800096c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800096e:	2312      	movs	r3, #18
 8000970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000976:	2303      	movs	r3, #3
 8000978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800097a:	2304      	movs	r3, #4
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	4619      	mov	r1, r3
 8000984:	480c      	ldr	r0, [pc, #48]	; (80009b8 <HAL_I2C_MspInit+0x8c>)
 8000986:	f000 fdbb 	bl	8001500 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <HAL_I2C_MspInit+0x88>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	4a08      	ldr	r2, [pc, #32]	; (80009b4 <HAL_I2C_MspInit+0x88>)
 8000994:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000998:	6413      	str	r3, [r2, #64]	; 0x40
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <HAL_I2C_MspInit+0x88>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009a6:	bf00      	nop
 80009a8:	3728      	adds	r7, #40	; 0x28
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40005400 	.word	0x40005400
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40020400 	.word	0x40020400

080009bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a22      	ldr	r2, [pc, #136]	; (8000a54 <HAL_TIM_Base_MspInit+0x98>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d13d      	bne.n	8000a4a <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	4b21      	ldr	r3, [pc, #132]	; (8000a58 <HAL_TIM_Base_MspInit+0x9c>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	4a20      	ldr	r2, [pc, #128]	; (8000a58 <HAL_TIM_Base_MspInit+0x9c>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6453      	str	r3, [r2, #68]	; 0x44
 80009de:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <HAL_TIM_Base_MspInit+0x9c>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80009ea:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <HAL_TIM_Base_MspInit+0xa0>)
 80009ec:	4a1c      	ldr	r2, [pc, #112]	; (8000a60 <HAL_TIM_Base_MspInit+0xa4>)
 80009ee:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80009f0:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <HAL_TIM_Base_MspInit+0xa0>)
 80009f2:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80009f6:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009f8:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <HAL_TIM_Base_MspInit+0xa0>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80009fe:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <HAL_TIM_Base_MspInit+0xa0>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000a04:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <HAL_TIM_Base_MspInit+0xa0>)
 8000a06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a0a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a0c:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <HAL_TIM_Base_MspInit+0xa0>)
 8000a0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a12:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <HAL_TIM_Base_MspInit+0xa0>)
 8000a16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a1a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <HAL_TIM_Base_MspInit+0xa0>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <HAL_TIM_Base_MspInit+0xa0>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <HAL_TIM_Base_MspInit+0xa0>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000a2e:	480b      	ldr	r0, [pc, #44]	; (8000a5c <HAL_TIM_Base_MspInit+0xa0>)
 8000a30:	f000 fa7c 	bl	8000f2c <HAL_DMA_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8000a3a:	f7ff ff0f 	bl	800085c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a06      	ldr	r2, [pc, #24]	; (8000a5c <HAL_TIM_Base_MspInit+0xa0>)
 8000a42:	625a      	str	r2, [r3, #36]	; 0x24
 8000a44:	4a05      	ldr	r2, [pc, #20]	; (8000a5c <HAL_TIM_Base_MspInit+0xa0>)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a4a:	bf00      	nop
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40010000 	.word	0x40010000
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	20000114 	.word	0x20000114
 8000a60:	40026428 	.word	0x40026428

08000a64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b088      	sub	sp, #32
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a12      	ldr	r2, [pc, #72]	; (8000acc <HAL_TIM_MspPostInit+0x68>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d11e      	bne.n	8000ac4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <HAL_TIM_MspPostInit+0x6c>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a10      	ldr	r2, [pc, #64]	; (8000ad0 <HAL_TIM_MspPostInit+0x6c>)
 8000a90:	f043 0310 	orr.w	r3, r3, #16
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <HAL_TIM_MspPostInit+0x6c>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0310 	and.w	r3, r3, #16
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000aa2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aa6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ab8:	f107 030c 	add.w	r3, r7, #12
 8000abc:	4619      	mov	r1, r3
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <HAL_TIM_MspPostInit+0x70>)
 8000ac0:	f000 fd1e 	bl	8001500 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ac4:	bf00      	nop
 8000ac6:	3720      	adds	r7, #32
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40010000 	.word	0x40010000
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40021000 	.word	0x40021000

08000ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <NMI_Handler+0x4>

08000ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <HardFault_Handler+0x4>

08000ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <MemManage_Handler+0x4>

08000aea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <BusFault_Handler+0x4>

08000af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <UsageFault_Handler+0x4>

08000af6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b24:	f000 f8d0 	bl	8000cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000b30:	4802      	ldr	r0, [pc, #8]	; (8000b3c <DMA2_Stream1_IRQHandler+0x10>)
 8000b32:	f000 faa9 	bl	8001088 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000114 	.word	0x20000114

08000b40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b48:	4a14      	ldr	r2, [pc, #80]	; (8000b9c <_sbrk+0x5c>)
 8000b4a:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <_sbrk+0x60>)
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b54:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <_sbrk+0x64>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d102      	bne.n	8000b62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b5c:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <_sbrk+0x64>)
 8000b5e:	4a12      	ldr	r2, [pc, #72]	; (8000ba8 <_sbrk+0x68>)
 8000b60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <_sbrk+0x64>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4413      	add	r3, r2
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d207      	bcs.n	8000b80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b70:	f002 fbce 	bl	8003310 <__errno>
 8000b74:	4603      	mov	r3, r0
 8000b76:	220c      	movs	r2, #12
 8000b78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7e:	e009      	b.n	8000b94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b80:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <_sbrk+0x64>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b86:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <_sbrk+0x64>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	4a05      	ldr	r2, [pc, #20]	; (8000ba4 <_sbrk+0x64>)
 8000b90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b92:	68fb      	ldr	r3, [r7, #12]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3718      	adds	r7, #24
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20020000 	.word	0x20020000
 8000ba0:	00000400 	.word	0x00000400
 8000ba4:	20000178 	.word	0x20000178
 8000ba8:	200002c8 	.word	0x200002c8

08000bac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <SystemInit+0x20>)
 8000bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bb6:	4a05      	ldr	r2, [pc, #20]	; (8000bcc <SystemInit+0x20>)
 8000bb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bd4:	480d      	ldr	r0, [pc, #52]	; (8000c0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bd6:	490e      	ldr	r1, [pc, #56]	; (8000c10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bd8:	4a0e      	ldr	r2, [pc, #56]	; (8000c14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bdc:	e002      	b.n	8000be4 <LoopCopyDataInit>

08000bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be2:	3304      	adds	r3, #4

08000be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be8:	d3f9      	bcc.n	8000bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bea:	4a0b      	ldr	r2, [pc, #44]	; (8000c18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bec:	4c0b      	ldr	r4, [pc, #44]	; (8000c1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf0:	e001      	b.n	8000bf6 <LoopFillZerobss>

08000bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf4:	3204      	adds	r2, #4

08000bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf8:	d3fb      	bcc.n	8000bf2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bfa:	f7ff ffd7 	bl	8000bac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bfe:	f002 fb8d 	bl	800331c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c02:	f7ff fc5f 	bl	80004c4 <main>
  bx  lr    
 8000c06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c10:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c14:	080033b0 	.word	0x080033b0
  ldr r2, =_sbss
 8000c18:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c1c:	200002c8 	.word	0x200002c8

08000c20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c20:	e7fe      	b.n	8000c20 <ADC_IRQHandler>
	...

08000c24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c28:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <HAL_Init+0x40>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a0d      	ldr	r2, [pc, #52]	; (8000c64 <HAL_Init+0x40>)
 8000c2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c34:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <HAL_Init+0x40>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <HAL_Init+0x40>)
 8000c3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <HAL_Init+0x40>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a07      	ldr	r2, [pc, #28]	; (8000c64 <HAL_Init+0x40>)
 8000c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c4c:	2003      	movs	r0, #3
 8000c4e:	f000 f92b 	bl	8000ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c52:	2000      	movs	r0, #0
 8000c54:	f000 f808 	bl	8000c68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c58:	f7ff fe40 	bl	80008dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40023c00 	.word	0x40023c00

08000c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c70:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <HAL_InitTick+0x54>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <HAL_InitTick+0x58>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 f943 	bl	8000f12 <HAL_SYSTICK_Config>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e00e      	b.n	8000cb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2b0f      	cmp	r3, #15
 8000c9a:	d80a      	bhi.n	8000cb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca4:	f000 f90b 	bl	8000ebe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca8:	4a06      	ldr	r2, [pc, #24]	; (8000cc4 <HAL_InitTick+0x5c>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	e000      	b.n	8000cb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	20000008 	.word	0x20000008
 8000cc4:	20000004 	.word	0x20000004

08000cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_IncTick+0x20>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_IncTick+0x24>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	4a04      	ldr	r2, [pc, #16]	; (8000cec <HAL_IncTick+0x24>)
 8000cda:	6013      	str	r3, [r2, #0]
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20000008 	.word	0x20000008
 8000cec:	2000017c 	.word	0x2000017c

08000cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf4:	4b03      	ldr	r3, [pc, #12]	; (8000d04 <HAL_GetTick+0x14>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	2000017c 	.word	0x2000017c

08000d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d24:	4013      	ands	r3, r2
 8000d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3a:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	60d3      	str	r3, [r2, #12]
}
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <__NVIC_GetPriorityGrouping+0x18>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	0a1b      	lsrs	r3, r3, #8
 8000d5a:	f003 0307 	and.w	r3, r3, #7
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	db0b      	blt.n	8000d96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	f003 021f 	and.w	r2, r3, #31
 8000d84:	4907      	ldr	r1, [pc, #28]	; (8000da4 <__NVIC_EnableIRQ+0x38>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	095b      	lsrs	r3, r3, #5
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000e100 	.word	0xe000e100

08000da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	6039      	str	r1, [r7, #0]
 8000db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	db0a      	blt.n	8000dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	490c      	ldr	r1, [pc, #48]	; (8000df4 <__NVIC_SetPriority+0x4c>)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	0112      	lsls	r2, r2, #4
 8000dc8:	b2d2      	uxtb	r2, r2
 8000dca:	440b      	add	r3, r1
 8000dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd0:	e00a      	b.n	8000de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4908      	ldr	r1, [pc, #32]	; (8000df8 <__NVIC_SetPriority+0x50>)
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	f003 030f 	and.w	r3, r3, #15
 8000dde:	3b04      	subs	r3, #4
 8000de0:	0112      	lsls	r2, r2, #4
 8000de2:	b2d2      	uxtb	r2, r2
 8000de4:	440b      	add	r3, r1
 8000de6:	761a      	strb	r2, [r3, #24]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000e100 	.word	0xe000e100
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b089      	sub	sp, #36	; 0x24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f1c3 0307 	rsb	r3, r3, #7
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	bf28      	it	cs
 8000e1a:	2304      	movcs	r3, #4
 8000e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3304      	adds	r3, #4
 8000e22:	2b06      	cmp	r3, #6
 8000e24:	d902      	bls.n	8000e2c <NVIC_EncodePriority+0x30>
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3b03      	subs	r3, #3
 8000e2a:	e000      	b.n	8000e2e <NVIC_EncodePriority+0x32>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	f04f 32ff 	mov.w	r2, #4294967295
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	401a      	ands	r2, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e44:	f04f 31ff 	mov.w	r1, #4294967295
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	43d9      	mvns	r1, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	4313      	orrs	r3, r2
         );
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3724      	adds	r7, #36	; 0x24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
	...

08000e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e74:	d301      	bcc.n	8000e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e76:	2301      	movs	r3, #1
 8000e78:	e00f      	b.n	8000e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ea4 <SysTick_Config+0x40>)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e82:	210f      	movs	r1, #15
 8000e84:	f04f 30ff 	mov.w	r0, #4294967295
 8000e88:	f7ff ff8e 	bl	8000da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <SysTick_Config+0x40>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e92:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <SysTick_Config+0x40>)
 8000e94:	2207      	movs	r2, #7
 8000e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	e000e010 	.word	0xe000e010

08000ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff ff29 	bl	8000d08 <__NVIC_SetPriorityGrouping>
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b086      	sub	sp, #24
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	60b9      	str	r1, [r7, #8]
 8000ec8:	607a      	str	r2, [r7, #4]
 8000eca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed0:	f7ff ff3e 	bl	8000d50 <__NVIC_GetPriorityGrouping>
 8000ed4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	68b9      	ldr	r1, [r7, #8]
 8000eda:	6978      	ldr	r0, [r7, #20]
 8000edc:	f7ff ff8e 	bl	8000dfc <NVIC_EncodePriority>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee6:	4611      	mov	r1, r2
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff5d 	bl	8000da8 <__NVIC_SetPriority>
}
 8000eee:	bf00      	nop
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	4603      	mov	r3, r0
 8000efe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff ff31 	bl	8000d6c <__NVIC_EnableIRQ>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff ffa2 	bl	8000e64 <SysTick_Config>
 8000f20:	4603      	mov	r3, r0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f38:	f7ff feda 	bl	8000cf0 <HAL_GetTick>
 8000f3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d101      	bne.n	8000f48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e099      	b.n	800107c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2202      	movs	r2, #2
 8000f4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2200      	movs	r2, #0
 8000f54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f022 0201 	bic.w	r2, r2, #1
 8000f66:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f68:	e00f      	b.n	8000f8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f6a:	f7ff fec1 	bl	8000cf0 <HAL_GetTick>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	2b05      	cmp	r3, #5
 8000f76:	d908      	bls.n	8000f8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2220      	movs	r2, #32
 8000f7c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2203      	movs	r2, #3
 8000f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000f86:	2303      	movs	r3, #3
 8000f88:	e078      	b.n	800107c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d1e8      	bne.n	8000f6a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000fa0:	697a      	ldr	r2, [r7, #20]
 8000fa2:	4b38      	ldr	r3, [pc, #224]	; (8001084 <HAL_DMA_Init+0x158>)
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685a      	ldr	r2, [r3, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	691b      	ldr	r3, [r3, #16]
 8000fbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a1b      	ldr	r3, [r3, #32]
 8000fd4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fd6:	697a      	ldr	r2, [r7, #20]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe0:	2b04      	cmp	r3, #4
 8000fe2:	d107      	bne.n	8000ff4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fec:	4313      	orrs	r3, r2
 8000fee:	697a      	ldr	r2, [r7, #20]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	697a      	ldr	r2, [r7, #20]
 8000ffa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	f023 0307 	bic.w	r3, r3, #7
 800100a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001010:	697a      	ldr	r2, [r7, #20]
 8001012:	4313      	orrs	r3, r2
 8001014:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101a:	2b04      	cmp	r3, #4
 800101c:	d117      	bne.n	800104e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	4313      	orrs	r3, r2
 8001026:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800102c:	2b00      	cmp	r3, #0
 800102e:	d00e      	beq.n	800104e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f000 f9e9 	bl	8001408 <DMA_CheckFifoParam>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d008      	beq.n	800104e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2240      	movs	r2, #64	; 0x40
 8001040:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2201      	movs	r2, #1
 8001046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800104a:	2301      	movs	r3, #1
 800104c:	e016      	b.n	800107c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	697a      	ldr	r2, [r7, #20]
 8001054:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f000 f9a0 	bl	800139c <DMA_CalcBaseAndBitshift>
 800105c:	4603      	mov	r3, r0
 800105e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001064:	223f      	movs	r2, #63	; 0x3f
 8001066:	409a      	lsls	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2201      	movs	r2, #1
 8001076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800107a:	2300      	movs	r3, #0
}
 800107c:	4618      	mov	r0, r3
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	f010803f 	.word	0xf010803f

08001088 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001090:	2300      	movs	r3, #0
 8001092:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001094:	4b8e      	ldr	r3, [pc, #568]	; (80012d0 <HAL_DMA_IRQHandler+0x248>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a8e      	ldr	r2, [pc, #568]	; (80012d4 <HAL_DMA_IRQHandler+0x24c>)
 800109a:	fba2 2303 	umull	r2, r3, r2, r3
 800109e:	0a9b      	lsrs	r3, r3, #10
 80010a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010b2:	2208      	movs	r2, #8
 80010b4:	409a      	lsls	r2, r3
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	4013      	ands	r3, r2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d01a      	beq.n	80010f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0304 	and.w	r3, r3, #4
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d013      	beq.n	80010f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f022 0204 	bic.w	r2, r2, #4
 80010da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010e0:	2208      	movs	r2, #8
 80010e2:	409a      	lsls	r2, r3
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ec:	f043 0201 	orr.w	r2, r3, #1
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010f8:	2201      	movs	r2, #1
 80010fa:	409a      	lsls	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4013      	ands	r3, r2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d012      	beq.n	800112a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800110e:	2b00      	cmp	r3, #0
 8001110:	d00b      	beq.n	800112a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001116:	2201      	movs	r2, #1
 8001118:	409a      	lsls	r2, r3
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001122:	f043 0202 	orr.w	r2, r3, #2
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800112e:	2204      	movs	r2, #4
 8001130:	409a      	lsls	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	4013      	ands	r3, r2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d012      	beq.n	8001160 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d00b      	beq.n	8001160 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800114c:	2204      	movs	r2, #4
 800114e:	409a      	lsls	r2, r3
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001158:	f043 0204 	orr.w	r2, r3, #4
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001164:	2210      	movs	r2, #16
 8001166:	409a      	lsls	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4013      	ands	r3, r2
 800116c:	2b00      	cmp	r3, #0
 800116e:	d043      	beq.n	80011f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0308 	and.w	r3, r3, #8
 800117a:	2b00      	cmp	r3, #0
 800117c:	d03c      	beq.n	80011f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001182:	2210      	movs	r2, #16
 8001184:	409a      	lsls	r2, r3
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d018      	beq.n	80011ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d108      	bne.n	80011b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d024      	beq.n	80011f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	4798      	blx	r3
 80011b6:	e01f      	b.n	80011f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d01b      	beq.n	80011f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	4798      	blx	r3
 80011c8:	e016      	b.n	80011f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d107      	bne.n	80011e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f022 0208 	bic.w	r2, r2, #8
 80011e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011fc:	2220      	movs	r2, #32
 80011fe:	409a      	lsls	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4013      	ands	r3, r2
 8001204:	2b00      	cmp	r3, #0
 8001206:	f000 808f 	beq.w	8001328 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0310 	and.w	r3, r3, #16
 8001214:	2b00      	cmp	r3, #0
 8001216:	f000 8087 	beq.w	8001328 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800121e:	2220      	movs	r2, #32
 8001220:	409a      	lsls	r2, r3
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b05      	cmp	r3, #5
 8001230:	d136      	bne.n	80012a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f022 0216 	bic.w	r2, r2, #22
 8001240:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	695a      	ldr	r2, [r3, #20]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001250:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	2b00      	cmp	r3, #0
 8001258:	d103      	bne.n	8001262 <HAL_DMA_IRQHandler+0x1da>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800125e:	2b00      	cmp	r3, #0
 8001260:	d007      	beq.n	8001272 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f022 0208 	bic.w	r2, r2, #8
 8001270:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001276:	223f      	movs	r2, #63	; 0x3f
 8001278:	409a      	lsls	r2, r3
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2201      	movs	r2, #1
 8001282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001292:	2b00      	cmp	r3, #0
 8001294:	d07e      	beq.n	8001394 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	4798      	blx	r3
        }
        return;
 800129e:	e079      	b.n	8001394 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d01d      	beq.n	80012ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d10d      	bne.n	80012d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d031      	beq.n	8001328 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	4798      	blx	r3
 80012cc:	e02c      	b.n	8001328 <HAL_DMA_IRQHandler+0x2a0>
 80012ce:	bf00      	nop
 80012d0:	20000000 	.word	0x20000000
 80012d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d023      	beq.n	8001328 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	4798      	blx	r3
 80012e8:	e01e      	b.n	8001328 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d10f      	bne.n	8001318 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f022 0210 	bic.w	r2, r2, #16
 8001306:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2201      	movs	r2, #1
 800130c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800132c:	2b00      	cmp	r3, #0
 800132e:	d032      	beq.n	8001396 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	2b00      	cmp	r3, #0
 800133a:	d022      	beq.n	8001382 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2205      	movs	r2, #5
 8001340:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f022 0201 	bic.w	r2, r2, #1
 8001352:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	3301      	adds	r3, #1
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	429a      	cmp	r2, r3
 800135e:	d307      	bcc.n	8001370 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f2      	bne.n	8001354 <HAL_DMA_IRQHandler+0x2cc>
 800136e:	e000      	b.n	8001372 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001370:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2201      	movs	r2, #1
 8001376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001386:	2b00      	cmp	r3, #0
 8001388:	d005      	beq.n	8001396 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	4798      	blx	r3
 8001392:	e000      	b.n	8001396 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001394:	bf00      	nop
    }
  }
}
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	3b10      	subs	r3, #16
 80013ac:	4a14      	ldr	r2, [pc, #80]	; (8001400 <DMA_CalcBaseAndBitshift+0x64>)
 80013ae:	fba2 2303 	umull	r2, r3, r2, r3
 80013b2:	091b      	lsrs	r3, r3, #4
 80013b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80013b6:	4a13      	ldr	r2, [pc, #76]	; (8001404 <DMA_CalcBaseAndBitshift+0x68>)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4413      	add	r3, r2
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	461a      	mov	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2b03      	cmp	r3, #3
 80013c8:	d909      	bls.n	80013de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013d2:	f023 0303 	bic.w	r3, r3, #3
 80013d6:	1d1a      	adds	r2, r3, #4
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	659a      	str	r2, [r3, #88]	; 0x58
 80013dc:	e007      	b.n	80013ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013e6:	f023 0303 	bic.w	r3, r3, #3
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3714      	adds	r7, #20
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	aaaaaaab 	.word	0xaaaaaaab
 8001404:	08003398 	.word	0x08003398

08001408 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001410:	2300      	movs	r3, #0
 8001412:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001418:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d11f      	bne.n	8001462 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	2b03      	cmp	r3, #3
 8001426:	d856      	bhi.n	80014d6 <DMA_CheckFifoParam+0xce>
 8001428:	a201      	add	r2, pc, #4	; (adr r2, 8001430 <DMA_CheckFifoParam+0x28>)
 800142a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800142e:	bf00      	nop
 8001430:	08001441 	.word	0x08001441
 8001434:	08001453 	.word	0x08001453
 8001438:	08001441 	.word	0x08001441
 800143c:	080014d7 	.word	0x080014d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001444:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d046      	beq.n	80014da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001450:	e043      	b.n	80014da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001456:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800145a:	d140      	bne.n	80014de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001460:	e03d      	b.n	80014de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800146a:	d121      	bne.n	80014b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	2b03      	cmp	r3, #3
 8001470:	d837      	bhi.n	80014e2 <DMA_CheckFifoParam+0xda>
 8001472:	a201      	add	r2, pc, #4	; (adr r2, 8001478 <DMA_CheckFifoParam+0x70>)
 8001474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001478:	08001489 	.word	0x08001489
 800147c:	0800148f 	.word	0x0800148f
 8001480:	08001489 	.word	0x08001489
 8001484:	080014a1 	.word	0x080014a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	73fb      	strb	r3, [r7, #15]
      break;
 800148c:	e030      	b.n	80014f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001492:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d025      	beq.n	80014e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800149e:	e022      	b.n	80014e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014a8:	d11f      	bne.n	80014ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80014ae:	e01c      	b.n	80014ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d903      	bls.n	80014be <DMA_CheckFifoParam+0xb6>
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	2b03      	cmp	r3, #3
 80014ba:	d003      	beq.n	80014c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80014bc:	e018      	b.n	80014f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	73fb      	strb	r3, [r7, #15]
      break;
 80014c2:	e015      	b.n	80014f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d00e      	beq.n	80014ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	73fb      	strb	r3, [r7, #15]
      break;
 80014d4:	e00b      	b.n	80014ee <DMA_CheckFifoParam+0xe6>
      break;
 80014d6:	bf00      	nop
 80014d8:	e00a      	b.n	80014f0 <DMA_CheckFifoParam+0xe8>
      break;
 80014da:	bf00      	nop
 80014dc:	e008      	b.n	80014f0 <DMA_CheckFifoParam+0xe8>
      break;
 80014de:	bf00      	nop
 80014e0:	e006      	b.n	80014f0 <DMA_CheckFifoParam+0xe8>
      break;
 80014e2:	bf00      	nop
 80014e4:	e004      	b.n	80014f0 <DMA_CheckFifoParam+0xe8>
      break;
 80014e6:	bf00      	nop
 80014e8:	e002      	b.n	80014f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80014ea:	bf00      	nop
 80014ec:	e000      	b.n	80014f0 <DMA_CheckFifoParam+0xe8>
      break;
 80014ee:	bf00      	nop
    }
  } 
  
  return status; 
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop

08001500 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001500:	b480      	push	{r7}
 8001502:	b089      	sub	sp, #36	; 0x24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001512:	2300      	movs	r3, #0
 8001514:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
 800151a:	e16b      	b.n	80017f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800151c:	2201      	movs	r2, #1
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	4013      	ands	r3, r2
 800152e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	429a      	cmp	r2, r3
 8001536:	f040 815a 	bne.w	80017ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	2b01      	cmp	r3, #1
 8001544:	d005      	beq.n	8001552 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800154e:	2b02      	cmp	r3, #2
 8001550:	d130      	bne.n	80015b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	2203      	movs	r2, #3
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43db      	mvns	r3, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4013      	ands	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	68da      	ldr	r2, [r3, #12]
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001588:	2201      	movs	r2, #1
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4013      	ands	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	091b      	lsrs	r3, r3, #4
 800159e:	f003 0201 	and.w	r2, r3, #1
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	2b03      	cmp	r3, #3
 80015be:	d017      	beq.n	80015f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	2203      	movs	r2, #3
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4013      	ands	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 0303 	and.w	r3, r3, #3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d123      	bne.n	8001644 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	08da      	lsrs	r2, r3, #3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3208      	adds	r2, #8
 8001604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001608:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	f003 0307 	and.w	r3, r3, #7
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	220f      	movs	r2, #15
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	691a      	ldr	r2, [r3, #16]
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4313      	orrs	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	08da      	lsrs	r2, r3, #3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	3208      	adds	r2, #8
 800163e:	69b9      	ldr	r1, [r7, #24]
 8001640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	2203      	movs	r2, #3
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4013      	ands	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0203 	and.w	r2, r3, #3
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 80b4 	beq.w	80017ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	4b60      	ldr	r3, [pc, #384]	; (800180c <HAL_GPIO_Init+0x30c>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	4a5f      	ldr	r2, [pc, #380]	; (800180c <HAL_GPIO_Init+0x30c>)
 8001690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001694:	6453      	str	r3, [r2, #68]	; 0x44
 8001696:	4b5d      	ldr	r3, [pc, #372]	; (800180c <HAL_GPIO_Init+0x30c>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016a2:	4a5b      	ldr	r2, [pc, #364]	; (8001810 <HAL_GPIO_Init+0x310>)
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	089b      	lsrs	r3, r3, #2
 80016a8:	3302      	adds	r3, #2
 80016aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	220f      	movs	r2, #15
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43db      	mvns	r3, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4013      	ands	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a52      	ldr	r2, [pc, #328]	; (8001814 <HAL_GPIO_Init+0x314>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d02b      	beq.n	8001726 <HAL_GPIO_Init+0x226>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a51      	ldr	r2, [pc, #324]	; (8001818 <HAL_GPIO_Init+0x318>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d025      	beq.n	8001722 <HAL_GPIO_Init+0x222>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a50      	ldr	r2, [pc, #320]	; (800181c <HAL_GPIO_Init+0x31c>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d01f      	beq.n	800171e <HAL_GPIO_Init+0x21e>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a4f      	ldr	r2, [pc, #316]	; (8001820 <HAL_GPIO_Init+0x320>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d019      	beq.n	800171a <HAL_GPIO_Init+0x21a>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a4e      	ldr	r2, [pc, #312]	; (8001824 <HAL_GPIO_Init+0x324>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d013      	beq.n	8001716 <HAL_GPIO_Init+0x216>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a4d      	ldr	r2, [pc, #308]	; (8001828 <HAL_GPIO_Init+0x328>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d00d      	beq.n	8001712 <HAL_GPIO_Init+0x212>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a4c      	ldr	r2, [pc, #304]	; (800182c <HAL_GPIO_Init+0x32c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d007      	beq.n	800170e <HAL_GPIO_Init+0x20e>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a4b      	ldr	r2, [pc, #300]	; (8001830 <HAL_GPIO_Init+0x330>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d101      	bne.n	800170a <HAL_GPIO_Init+0x20a>
 8001706:	2307      	movs	r3, #7
 8001708:	e00e      	b.n	8001728 <HAL_GPIO_Init+0x228>
 800170a:	2308      	movs	r3, #8
 800170c:	e00c      	b.n	8001728 <HAL_GPIO_Init+0x228>
 800170e:	2306      	movs	r3, #6
 8001710:	e00a      	b.n	8001728 <HAL_GPIO_Init+0x228>
 8001712:	2305      	movs	r3, #5
 8001714:	e008      	b.n	8001728 <HAL_GPIO_Init+0x228>
 8001716:	2304      	movs	r3, #4
 8001718:	e006      	b.n	8001728 <HAL_GPIO_Init+0x228>
 800171a:	2303      	movs	r3, #3
 800171c:	e004      	b.n	8001728 <HAL_GPIO_Init+0x228>
 800171e:	2302      	movs	r3, #2
 8001720:	e002      	b.n	8001728 <HAL_GPIO_Init+0x228>
 8001722:	2301      	movs	r3, #1
 8001724:	e000      	b.n	8001728 <HAL_GPIO_Init+0x228>
 8001726:	2300      	movs	r3, #0
 8001728:	69fa      	ldr	r2, [r7, #28]
 800172a:	f002 0203 	and.w	r2, r2, #3
 800172e:	0092      	lsls	r2, r2, #2
 8001730:	4093      	lsls	r3, r2
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	4313      	orrs	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001738:	4935      	ldr	r1, [pc, #212]	; (8001810 <HAL_GPIO_Init+0x310>)
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	089b      	lsrs	r3, r3, #2
 800173e:	3302      	adds	r3, #2
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001746:	4b3b      	ldr	r3, [pc, #236]	; (8001834 <HAL_GPIO_Init+0x334>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	43db      	mvns	r3, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4013      	ands	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	4313      	orrs	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800176a:	4a32      	ldr	r2, [pc, #200]	; (8001834 <HAL_GPIO_Init+0x334>)
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001770:	4b30      	ldr	r3, [pc, #192]	; (8001834 <HAL_GPIO_Init+0x334>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d003      	beq.n	8001794 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	4313      	orrs	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001794:	4a27      	ldr	r2, [pc, #156]	; (8001834 <HAL_GPIO_Init+0x334>)
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800179a:	4b26      	ldr	r3, [pc, #152]	; (8001834 <HAL_GPIO_Init+0x334>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	43db      	mvns	r3, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4013      	ands	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017be:	4a1d      	ldr	r2, [pc, #116]	; (8001834 <HAL_GPIO_Init+0x334>)
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017c4:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <HAL_GPIO_Init+0x334>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	43db      	mvns	r3, r3
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4013      	ands	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d003      	beq.n	80017e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017e8:	4a12      	ldr	r2, [pc, #72]	; (8001834 <HAL_GPIO_Init+0x334>)
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3301      	adds	r3, #1
 80017f2:	61fb      	str	r3, [r7, #28]
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	2b0f      	cmp	r3, #15
 80017f8:	f67f ae90 	bls.w	800151c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017fc:	bf00      	nop
 80017fe:	bf00      	nop
 8001800:	3724      	adds	r7, #36	; 0x24
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	40023800 	.word	0x40023800
 8001810:	40013800 	.word	0x40013800
 8001814:	40020000 	.word	0x40020000
 8001818:	40020400 	.word	0x40020400
 800181c:	40020800 	.word	0x40020800
 8001820:	40020c00 	.word	0x40020c00
 8001824:	40021000 	.word	0x40021000
 8001828:	40021400 	.word	0x40021400
 800182c:	40021800 	.word	0x40021800
 8001830:	40021c00 	.word	0x40021c00
 8001834:	40013c00 	.word	0x40013c00

08001838 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e12b      	b.n	8001aa2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d106      	bne.n	8001864 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff f864 	bl	800092c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2224      	movs	r2, #36	; 0x24
 8001868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 0201 	bic.w	r2, r2, #1
 800187a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800188a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800189a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800189c:	f000 fd80 	bl	80023a0 <HAL_RCC_GetPCLK1Freq>
 80018a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	4a81      	ldr	r2, [pc, #516]	; (8001aac <HAL_I2C_Init+0x274>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d807      	bhi.n	80018bc <HAL_I2C_Init+0x84>
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4a80      	ldr	r2, [pc, #512]	; (8001ab0 <HAL_I2C_Init+0x278>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	bf94      	ite	ls
 80018b4:	2301      	movls	r3, #1
 80018b6:	2300      	movhi	r3, #0
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	e006      	b.n	80018ca <HAL_I2C_Init+0x92>
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4a7d      	ldr	r2, [pc, #500]	; (8001ab4 <HAL_I2C_Init+0x27c>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	bf94      	ite	ls
 80018c4:	2301      	movls	r3, #1
 80018c6:	2300      	movhi	r3, #0
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e0e7      	b.n	8001aa2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	4a78      	ldr	r2, [pc, #480]	; (8001ab8 <HAL_I2C_Init+0x280>)
 80018d6:	fba2 2303 	umull	r2, r3, r2, r3
 80018da:	0c9b      	lsrs	r3, r3, #18
 80018dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	68ba      	ldr	r2, [r7, #8]
 80018ee:	430a      	orrs	r2, r1
 80018f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	4a6a      	ldr	r2, [pc, #424]	; (8001aac <HAL_I2C_Init+0x274>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d802      	bhi.n	800190c <HAL_I2C_Init+0xd4>
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	3301      	adds	r3, #1
 800190a:	e009      	b.n	8001920 <HAL_I2C_Init+0xe8>
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001912:	fb02 f303 	mul.w	r3, r2, r3
 8001916:	4a69      	ldr	r2, [pc, #420]	; (8001abc <HAL_I2C_Init+0x284>)
 8001918:	fba2 2303 	umull	r2, r3, r2, r3
 800191c:	099b      	lsrs	r3, r3, #6
 800191e:	3301      	adds	r3, #1
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6812      	ldr	r2, [r2, #0]
 8001924:	430b      	orrs	r3, r1
 8001926:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001932:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	495c      	ldr	r1, [pc, #368]	; (8001aac <HAL_I2C_Init+0x274>)
 800193c:	428b      	cmp	r3, r1
 800193e:	d819      	bhi.n	8001974 <HAL_I2C_Init+0x13c>
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	1e59      	subs	r1, r3, #1
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	fbb1 f3f3 	udiv	r3, r1, r3
 800194e:	1c59      	adds	r1, r3, #1
 8001950:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001954:	400b      	ands	r3, r1
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00a      	beq.n	8001970 <HAL_I2C_Init+0x138>
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	1e59      	subs	r1, r3, #1
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	fbb1 f3f3 	udiv	r3, r1, r3
 8001968:	3301      	adds	r3, #1
 800196a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800196e:	e051      	b.n	8001a14 <HAL_I2C_Init+0x1dc>
 8001970:	2304      	movs	r3, #4
 8001972:	e04f      	b.n	8001a14 <HAL_I2C_Init+0x1dc>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d111      	bne.n	80019a0 <HAL_I2C_Init+0x168>
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	1e58      	subs	r0, r3, #1
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6859      	ldr	r1, [r3, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	440b      	add	r3, r1
 800198a:	fbb0 f3f3 	udiv	r3, r0, r3
 800198e:	3301      	adds	r3, #1
 8001990:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001994:	2b00      	cmp	r3, #0
 8001996:	bf0c      	ite	eq
 8001998:	2301      	moveq	r3, #1
 800199a:	2300      	movne	r3, #0
 800199c:	b2db      	uxtb	r3, r3
 800199e:	e012      	b.n	80019c6 <HAL_I2C_Init+0x18e>
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	1e58      	subs	r0, r3, #1
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6859      	ldr	r1, [r3, #4]
 80019a8:	460b      	mov	r3, r1
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	440b      	add	r3, r1
 80019ae:	0099      	lsls	r1, r3, #2
 80019b0:	440b      	add	r3, r1
 80019b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019b6:	3301      	adds	r3, #1
 80019b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019bc:	2b00      	cmp	r3, #0
 80019be:	bf0c      	ite	eq
 80019c0:	2301      	moveq	r3, #1
 80019c2:	2300      	movne	r3, #0
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <HAL_I2C_Init+0x196>
 80019ca:	2301      	movs	r3, #1
 80019cc:	e022      	b.n	8001a14 <HAL_I2C_Init+0x1dc>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10e      	bne.n	80019f4 <HAL_I2C_Init+0x1bc>
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	1e58      	subs	r0, r3, #1
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6859      	ldr	r1, [r3, #4]
 80019de:	460b      	mov	r3, r1
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	440b      	add	r3, r1
 80019e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80019e8:	3301      	adds	r3, #1
 80019ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019f2:	e00f      	b.n	8001a14 <HAL_I2C_Init+0x1dc>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	1e58      	subs	r0, r3, #1
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6859      	ldr	r1, [r3, #4]
 80019fc:	460b      	mov	r3, r1
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	440b      	add	r3, r1
 8001a02:	0099      	lsls	r1, r3, #2
 8001a04:	440b      	add	r3, r1
 8001a06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	6809      	ldr	r1, [r1, #0]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69da      	ldr	r2, [r3, #28]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	430a      	orrs	r2, r1
 8001a36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	6911      	ldr	r1, [r2, #16]
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	68d2      	ldr	r2, [r2, #12]
 8001a4e:	4311      	orrs	r1, r2
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	6812      	ldr	r2, [r2, #0]
 8001a54:	430b      	orrs	r3, r1
 8001a56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	695a      	ldr	r2, [r3, #20]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	430a      	orrs	r2, r1
 8001a72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f042 0201 	orr.w	r2, r2, #1
 8001a82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2220      	movs	r2, #32
 8001a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	000186a0 	.word	0x000186a0
 8001ab0:	001e847f 	.word	0x001e847f
 8001ab4:	003d08ff 	.word	0x003d08ff
 8001ab8:	431bde83 	.word	0x431bde83
 8001abc:	10624dd3 	.word	0x10624dd3

08001ac0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e267      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d075      	beq.n	8001bca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ade:	4b88      	ldr	r3, [pc, #544]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	d00c      	beq.n	8001b04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aea:	4b85      	ldr	r3, [pc, #532]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d112      	bne.n	8001b1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001af6:	4b82      	ldr	r3, [pc, #520]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001afe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b02:	d10b      	bne.n	8001b1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b04:	4b7e      	ldr	r3, [pc, #504]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d05b      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x108>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d157      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e242      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b24:	d106      	bne.n	8001b34 <HAL_RCC_OscConfig+0x74>
 8001b26:	4b76      	ldr	r3, [pc, #472]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a75      	ldr	r2, [pc, #468]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	e01d      	b.n	8001b70 <HAL_RCC_OscConfig+0xb0>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b3c:	d10c      	bne.n	8001b58 <HAL_RCC_OscConfig+0x98>
 8001b3e:	4b70      	ldr	r3, [pc, #448]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a6f      	ldr	r2, [pc, #444]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	4b6d      	ldr	r3, [pc, #436]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a6c      	ldr	r2, [pc, #432]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	e00b      	b.n	8001b70 <HAL_RCC_OscConfig+0xb0>
 8001b58:	4b69      	ldr	r3, [pc, #420]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a68      	ldr	r2, [pc, #416]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	4b66      	ldr	r3, [pc, #408]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a65      	ldr	r2, [pc, #404]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d013      	beq.n	8001ba0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b78:	f7ff f8ba 	bl	8000cf0 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b80:	f7ff f8b6 	bl	8000cf0 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b64      	cmp	r3, #100	; 0x64
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e207      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b92:	4b5b      	ldr	r3, [pc, #364]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0f0      	beq.n	8001b80 <HAL_RCC_OscConfig+0xc0>
 8001b9e:	e014      	b.n	8001bca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba0:	f7ff f8a6 	bl	8000cf0 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ba8:	f7ff f8a2 	bl	8000cf0 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b64      	cmp	r3, #100	; 0x64
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e1f3      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bba:	4b51      	ldr	r3, [pc, #324]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1f0      	bne.n	8001ba8 <HAL_RCC_OscConfig+0xe8>
 8001bc6:	e000      	b.n	8001bca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d063      	beq.n	8001c9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bd6:	4b4a      	ldr	r3, [pc, #296]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00b      	beq.n	8001bfa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001be2:	4b47      	ldr	r3, [pc, #284]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bea:	2b08      	cmp	r3, #8
 8001bec:	d11c      	bne.n	8001c28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bee:	4b44      	ldr	r3, [pc, #272]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d116      	bne.n	8001c28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bfa:	4b41      	ldr	r3, [pc, #260]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d005      	beq.n	8001c12 <HAL_RCC_OscConfig+0x152>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d001      	beq.n	8001c12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e1c7      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c12:	4b3b      	ldr	r3, [pc, #236]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	4937      	ldr	r1, [pc, #220]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c26:	e03a      	b.n	8001c9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d020      	beq.n	8001c72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c30:	4b34      	ldr	r3, [pc, #208]	; (8001d04 <HAL_RCC_OscConfig+0x244>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c36:	f7ff f85b 	bl	8000cf0 <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c3e:	f7ff f857 	bl	8000cf0 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e1a8      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c50:	4b2b      	ldr	r3, [pc, #172]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0f0      	beq.n	8001c3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5c:	4b28      	ldr	r3, [pc, #160]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	4925      	ldr	r1, [pc, #148]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	600b      	str	r3, [r1, #0]
 8001c70:	e015      	b.n	8001c9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c72:	4b24      	ldr	r3, [pc, #144]	; (8001d04 <HAL_RCC_OscConfig+0x244>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c78:	f7ff f83a 	bl	8000cf0 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c80:	f7ff f836 	bl	8000cf0 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e187      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c92:	4b1b      	ldr	r3, [pc, #108]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d036      	beq.n	8001d18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d016      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cb2:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <HAL_RCC_OscConfig+0x248>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb8:	f7ff f81a 	bl	8000cf0 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cc0:	f7ff f816 	bl	8000cf0 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e167      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001cd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x200>
 8001cde:	e01b      	b.n	8001d18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ce0:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <HAL_RCC_OscConfig+0x248>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce6:	f7ff f803 	bl	8000cf0 <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cec:	e00e      	b.n	8001d0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cee:	f7fe ffff 	bl	8000cf0 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d907      	bls.n	8001d0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e150      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
 8001d00:	40023800 	.word	0x40023800
 8001d04:	42470000 	.word	0x42470000
 8001d08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d0c:	4b88      	ldr	r3, [pc, #544]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1ea      	bne.n	8001cee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 8097 	beq.w	8001e54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d26:	2300      	movs	r3, #0
 8001d28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d2a:	4b81      	ldr	r3, [pc, #516]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10f      	bne.n	8001d56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	4b7d      	ldr	r3, [pc, #500]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	4a7c      	ldr	r2, [pc, #496]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d44:	6413      	str	r3, [r2, #64]	; 0x40
 8001d46:	4b7a      	ldr	r3, [pc, #488]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	60bb      	str	r3, [r7, #8]
 8001d50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d52:	2301      	movs	r3, #1
 8001d54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d56:	4b77      	ldr	r3, [pc, #476]	; (8001f34 <HAL_RCC_OscConfig+0x474>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d118      	bne.n	8001d94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d62:	4b74      	ldr	r3, [pc, #464]	; (8001f34 <HAL_RCC_OscConfig+0x474>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a73      	ldr	r2, [pc, #460]	; (8001f34 <HAL_RCC_OscConfig+0x474>)
 8001d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d6e:	f7fe ffbf 	bl	8000cf0 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d76:	f7fe ffbb 	bl	8000cf0 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e10c      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d88:	4b6a      	ldr	r3, [pc, #424]	; (8001f34 <HAL_RCC_OscConfig+0x474>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d106      	bne.n	8001daa <HAL_RCC_OscConfig+0x2ea>
 8001d9c:	4b64      	ldr	r3, [pc, #400]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da0:	4a63      	ldr	r2, [pc, #396]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	6713      	str	r3, [r2, #112]	; 0x70
 8001da8:	e01c      	b.n	8001de4 <HAL_RCC_OscConfig+0x324>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	2b05      	cmp	r3, #5
 8001db0:	d10c      	bne.n	8001dcc <HAL_RCC_OscConfig+0x30c>
 8001db2:	4b5f      	ldr	r3, [pc, #380]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db6:	4a5e      	ldr	r2, [pc, #376]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001db8:	f043 0304 	orr.w	r3, r3, #4
 8001dbc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dbe:	4b5c      	ldr	r3, [pc, #368]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc2:	4a5b      	ldr	r2, [pc, #364]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dca:	e00b      	b.n	8001de4 <HAL_RCC_OscConfig+0x324>
 8001dcc:	4b58      	ldr	r3, [pc, #352]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd0:	4a57      	ldr	r2, [pc, #348]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001dd2:	f023 0301 	bic.w	r3, r3, #1
 8001dd6:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd8:	4b55      	ldr	r3, [pc, #340]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ddc:	4a54      	ldr	r2, [pc, #336]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001dde:	f023 0304 	bic.w	r3, r3, #4
 8001de2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d015      	beq.n	8001e18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dec:	f7fe ff80 	bl	8000cf0 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df2:	e00a      	b.n	8001e0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001df4:	f7fe ff7c 	bl	8000cf0 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e0cb      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e0a:	4b49      	ldr	r3, [pc, #292]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0ee      	beq.n	8001df4 <HAL_RCC_OscConfig+0x334>
 8001e16:	e014      	b.n	8001e42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e18:	f7fe ff6a 	bl	8000cf0 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e1e:	e00a      	b.n	8001e36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e20:	f7fe ff66 	bl	8000cf0 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e0b5      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e36:	4b3e      	ldr	r3, [pc, #248]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1ee      	bne.n	8001e20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e42:	7dfb      	ldrb	r3, [r7, #23]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d105      	bne.n	8001e54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e48:	4b39      	ldr	r3, [pc, #228]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	4a38      	ldr	r2, [pc, #224]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001e4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 80a1 	beq.w	8001fa0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e5e:	4b34      	ldr	r3, [pc, #208]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 030c 	and.w	r3, r3, #12
 8001e66:	2b08      	cmp	r3, #8
 8001e68:	d05c      	beq.n	8001f24 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d141      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e72:	4b31      	ldr	r3, [pc, #196]	; (8001f38 <HAL_RCC_OscConfig+0x478>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e78:	f7fe ff3a 	bl	8000cf0 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e80:	f7fe ff36 	bl	8000cf0 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e087      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e92:	4b27      	ldr	r3, [pc, #156]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f0      	bne.n	8001e80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	69da      	ldr	r2, [r3, #28]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eac:	019b      	lsls	r3, r3, #6
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb4:	085b      	lsrs	r3, r3, #1
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	041b      	lsls	r3, r3, #16
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec0:	061b      	lsls	r3, r3, #24
 8001ec2:	491b      	ldr	r1, [pc, #108]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <HAL_RCC_OscConfig+0x478>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ece:	f7fe ff0f 	bl	8000cf0 <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ed6:	f7fe ff0b 	bl	8000cf0 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e05c      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ee8:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0f0      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x416>
 8001ef4:	e054      	b.n	8001fa0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef6:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <HAL_RCC_OscConfig+0x478>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7fe fef8 	bl	8000cf0 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f04:	f7fe fef4 	bl	8000cf0 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e045      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f16:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0x444>
 8001f22:	e03d      	b.n	8001fa0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d107      	bne.n	8001f3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e038      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40007000 	.word	0x40007000
 8001f38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f3c:	4b1b      	ldr	r3, [pc, #108]	; (8001fac <HAL_RCC_OscConfig+0x4ec>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d028      	beq.n	8001f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d121      	bne.n	8001f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d11a      	bne.n	8001f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d111      	bne.n	8001f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f82:	085b      	lsrs	r3, r3, #1
 8001f84:	3b01      	subs	r3, #1
 8001f86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d107      	bne.n	8001f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d001      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40023800 	.word	0x40023800

08001fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e0cc      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fc4:	4b68      	ldr	r3, [pc, #416]	; (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d90c      	bls.n	8001fec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd2:	4b65      	ldr	r3, [pc, #404]	; (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fda:	4b63      	ldr	r3, [pc, #396]	; (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d001      	beq.n	8001fec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e0b8      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d020      	beq.n	800203a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	2b00      	cmp	r3, #0
 8002002:	d005      	beq.n	8002010 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002004:	4b59      	ldr	r3, [pc, #356]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	4a58      	ldr	r2, [pc, #352]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 800200a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800200e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0308 	and.w	r3, r3, #8
 8002018:	2b00      	cmp	r3, #0
 800201a:	d005      	beq.n	8002028 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800201c:	4b53      	ldr	r3, [pc, #332]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	4a52      	ldr	r2, [pc, #328]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002022:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002026:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002028:	4b50      	ldr	r3, [pc, #320]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	494d      	ldr	r1, [pc, #308]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	4313      	orrs	r3, r2
 8002038:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d044      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d107      	bne.n	800205e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204e:	4b47      	ldr	r3, [pc, #284]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d119      	bne.n	800208e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e07f      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b02      	cmp	r3, #2
 8002064:	d003      	beq.n	800206e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800206a:	2b03      	cmp	r3, #3
 800206c:	d107      	bne.n	800207e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800206e:	4b3f      	ldr	r3, [pc, #252]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d109      	bne.n	800208e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e06f      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207e:	4b3b      	ldr	r3, [pc, #236]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e067      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800208e:	4b37      	ldr	r3, [pc, #220]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f023 0203 	bic.w	r2, r3, #3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	4934      	ldr	r1, [pc, #208]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 800209c:	4313      	orrs	r3, r2
 800209e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020a0:	f7fe fe26 	bl	8000cf0 <HAL_GetTick>
 80020a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a6:	e00a      	b.n	80020be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a8:	f7fe fe22 	bl	8000cf0 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e04f      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020be:	4b2b      	ldr	r3, [pc, #172]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 020c 	and.w	r2, r3, #12
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d1eb      	bne.n	80020a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020d0:	4b25      	ldr	r3, [pc, #148]	; (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d20c      	bcs.n	80020f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020de:	4b22      	ldr	r3, [pc, #136]	; (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e6:	4b20      	ldr	r3, [pc, #128]	; (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d001      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e032      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b00      	cmp	r3, #0
 8002102:	d008      	beq.n	8002116 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002104:	4b19      	ldr	r3, [pc, #100]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	4916      	ldr	r1, [pc, #88]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002112:	4313      	orrs	r3, r2
 8002114:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	2b00      	cmp	r3, #0
 8002120:	d009      	beq.n	8002136 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002122:	4b12      	ldr	r3, [pc, #72]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	490e      	ldr	r1, [pc, #56]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002132:	4313      	orrs	r3, r2
 8002134:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002136:	f000 f821 	bl	800217c <HAL_RCC_GetSysClockFreq>
 800213a:	4602      	mov	r2, r0
 800213c:	4b0b      	ldr	r3, [pc, #44]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	091b      	lsrs	r3, r3, #4
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	490a      	ldr	r1, [pc, #40]	; (8002170 <HAL_RCC_ClockConfig+0x1c0>)
 8002148:	5ccb      	ldrb	r3, [r1, r3]
 800214a:	fa22 f303 	lsr.w	r3, r2, r3
 800214e:	4a09      	ldr	r2, [pc, #36]	; (8002174 <HAL_RCC_ClockConfig+0x1c4>)
 8002150:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002152:	4b09      	ldr	r3, [pc, #36]	; (8002178 <HAL_RCC_ClockConfig+0x1c8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe fd86 	bl	8000c68 <HAL_InitTick>

  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40023c00 	.word	0x40023c00
 800216c:	40023800 	.word	0x40023800
 8002170:	08003380 	.word	0x08003380
 8002174:	20000000 	.word	0x20000000
 8002178:	20000004 	.word	0x20000004

0800217c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800217c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002180:	b094      	sub	sp, #80	; 0x50
 8002182:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002184:	2300      	movs	r3, #0
 8002186:	647b      	str	r3, [r7, #68]	; 0x44
 8002188:	2300      	movs	r3, #0
 800218a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800218c:	2300      	movs	r3, #0
 800218e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002190:	2300      	movs	r3, #0
 8002192:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002194:	4b79      	ldr	r3, [pc, #484]	; (800237c <HAL_RCC_GetSysClockFreq+0x200>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 030c 	and.w	r3, r3, #12
 800219c:	2b08      	cmp	r3, #8
 800219e:	d00d      	beq.n	80021bc <HAL_RCC_GetSysClockFreq+0x40>
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	f200 80e1 	bhi.w	8002368 <HAL_RCC_GetSysClockFreq+0x1ec>
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d002      	beq.n	80021b0 <HAL_RCC_GetSysClockFreq+0x34>
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	d003      	beq.n	80021b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80021ae:	e0db      	b.n	8002368 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021b0:	4b73      	ldr	r3, [pc, #460]	; (8002380 <HAL_RCC_GetSysClockFreq+0x204>)
 80021b2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80021b4:	e0db      	b.n	800236e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021b6:	4b73      	ldr	r3, [pc, #460]	; (8002384 <HAL_RCC_GetSysClockFreq+0x208>)
 80021b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021ba:	e0d8      	b.n	800236e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021bc:	4b6f      	ldr	r3, [pc, #444]	; (800237c <HAL_RCC_GetSysClockFreq+0x200>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021c4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021c6:	4b6d      	ldr	r3, [pc, #436]	; (800237c <HAL_RCC_GetSysClockFreq+0x200>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d063      	beq.n	800229a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021d2:	4b6a      	ldr	r3, [pc, #424]	; (800237c <HAL_RCC_GetSysClockFreq+0x200>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	099b      	lsrs	r3, r3, #6
 80021d8:	2200      	movs	r2, #0
 80021da:	63bb      	str	r3, [r7, #56]	; 0x38
 80021dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80021de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021e4:	633b      	str	r3, [r7, #48]	; 0x30
 80021e6:	2300      	movs	r3, #0
 80021e8:	637b      	str	r3, [r7, #52]	; 0x34
 80021ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80021ee:	4622      	mov	r2, r4
 80021f0:	462b      	mov	r3, r5
 80021f2:	f04f 0000 	mov.w	r0, #0
 80021f6:	f04f 0100 	mov.w	r1, #0
 80021fa:	0159      	lsls	r1, r3, #5
 80021fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002200:	0150      	lsls	r0, r2, #5
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	4621      	mov	r1, r4
 8002208:	1a51      	subs	r1, r2, r1
 800220a:	6139      	str	r1, [r7, #16]
 800220c:	4629      	mov	r1, r5
 800220e:	eb63 0301 	sbc.w	r3, r3, r1
 8002212:	617b      	str	r3, [r7, #20]
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	f04f 0300 	mov.w	r3, #0
 800221c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002220:	4659      	mov	r1, fp
 8002222:	018b      	lsls	r3, r1, #6
 8002224:	4651      	mov	r1, sl
 8002226:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800222a:	4651      	mov	r1, sl
 800222c:	018a      	lsls	r2, r1, #6
 800222e:	4651      	mov	r1, sl
 8002230:	ebb2 0801 	subs.w	r8, r2, r1
 8002234:	4659      	mov	r1, fp
 8002236:	eb63 0901 	sbc.w	r9, r3, r1
 800223a:	f04f 0200 	mov.w	r2, #0
 800223e:	f04f 0300 	mov.w	r3, #0
 8002242:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002246:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800224a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800224e:	4690      	mov	r8, r2
 8002250:	4699      	mov	r9, r3
 8002252:	4623      	mov	r3, r4
 8002254:	eb18 0303 	adds.w	r3, r8, r3
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	462b      	mov	r3, r5
 800225c:	eb49 0303 	adc.w	r3, r9, r3
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	f04f 0300 	mov.w	r3, #0
 800226a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800226e:	4629      	mov	r1, r5
 8002270:	024b      	lsls	r3, r1, #9
 8002272:	4621      	mov	r1, r4
 8002274:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002278:	4621      	mov	r1, r4
 800227a:	024a      	lsls	r2, r1, #9
 800227c:	4610      	mov	r0, r2
 800227e:	4619      	mov	r1, r3
 8002280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002282:	2200      	movs	r2, #0
 8002284:	62bb      	str	r3, [r7, #40]	; 0x28
 8002286:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002288:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800228c:	f7fd ff9c 	bl	80001c8 <__aeabi_uldivmod>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4613      	mov	r3, r2
 8002296:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002298:	e058      	b.n	800234c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800229a:	4b38      	ldr	r3, [pc, #224]	; (800237c <HAL_RCC_GetSysClockFreq+0x200>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	099b      	lsrs	r3, r3, #6
 80022a0:	2200      	movs	r2, #0
 80022a2:	4618      	mov	r0, r3
 80022a4:	4611      	mov	r1, r2
 80022a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022aa:	623b      	str	r3, [r7, #32]
 80022ac:	2300      	movs	r3, #0
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
 80022b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80022b4:	4642      	mov	r2, r8
 80022b6:	464b      	mov	r3, r9
 80022b8:	f04f 0000 	mov.w	r0, #0
 80022bc:	f04f 0100 	mov.w	r1, #0
 80022c0:	0159      	lsls	r1, r3, #5
 80022c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022c6:	0150      	lsls	r0, r2, #5
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	4641      	mov	r1, r8
 80022ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80022d2:	4649      	mov	r1, r9
 80022d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80022d8:	f04f 0200 	mov.w	r2, #0
 80022dc:	f04f 0300 	mov.w	r3, #0
 80022e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80022e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80022e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80022ec:	ebb2 040a 	subs.w	r4, r2, sl
 80022f0:	eb63 050b 	sbc.w	r5, r3, fp
 80022f4:	f04f 0200 	mov.w	r2, #0
 80022f8:	f04f 0300 	mov.w	r3, #0
 80022fc:	00eb      	lsls	r3, r5, #3
 80022fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002302:	00e2      	lsls	r2, r4, #3
 8002304:	4614      	mov	r4, r2
 8002306:	461d      	mov	r5, r3
 8002308:	4643      	mov	r3, r8
 800230a:	18e3      	adds	r3, r4, r3
 800230c:	603b      	str	r3, [r7, #0]
 800230e:	464b      	mov	r3, r9
 8002310:	eb45 0303 	adc.w	r3, r5, r3
 8002314:	607b      	str	r3, [r7, #4]
 8002316:	f04f 0200 	mov.w	r2, #0
 800231a:	f04f 0300 	mov.w	r3, #0
 800231e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002322:	4629      	mov	r1, r5
 8002324:	028b      	lsls	r3, r1, #10
 8002326:	4621      	mov	r1, r4
 8002328:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800232c:	4621      	mov	r1, r4
 800232e:	028a      	lsls	r2, r1, #10
 8002330:	4610      	mov	r0, r2
 8002332:	4619      	mov	r1, r3
 8002334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002336:	2200      	movs	r2, #0
 8002338:	61bb      	str	r3, [r7, #24]
 800233a:	61fa      	str	r2, [r7, #28]
 800233c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002340:	f7fd ff42 	bl	80001c8 <__aeabi_uldivmod>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	4613      	mov	r3, r2
 800234a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800234c:	4b0b      	ldr	r3, [pc, #44]	; (800237c <HAL_RCC_GetSysClockFreq+0x200>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	0c1b      	lsrs	r3, r3, #16
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	3301      	adds	r3, #1
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800235c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800235e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002360:	fbb2 f3f3 	udiv	r3, r2, r3
 8002364:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002366:	e002      	b.n	800236e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002368:	4b05      	ldr	r3, [pc, #20]	; (8002380 <HAL_RCC_GetSysClockFreq+0x204>)
 800236a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800236c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800236e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002370:	4618      	mov	r0, r3
 8002372:	3750      	adds	r7, #80	; 0x50
 8002374:	46bd      	mov	sp, r7
 8002376:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800237a:	bf00      	nop
 800237c:	40023800 	.word	0x40023800
 8002380:	00f42400 	.word	0x00f42400
 8002384:	007a1200 	.word	0x007a1200

08002388 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800238c:	4b03      	ldr	r3, [pc, #12]	; (800239c <HAL_RCC_GetHCLKFreq+0x14>)
 800238e:	681b      	ldr	r3, [r3, #0]
}
 8002390:	4618      	mov	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	20000000 	.word	0x20000000

080023a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023a4:	f7ff fff0 	bl	8002388 <HAL_RCC_GetHCLKFreq>
 80023a8:	4602      	mov	r2, r0
 80023aa:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	0a9b      	lsrs	r3, r3, #10
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	4903      	ldr	r1, [pc, #12]	; (80023c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023b6:	5ccb      	ldrb	r3, [r1, r3]
 80023b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023bc:	4618      	mov	r0, r3
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40023800 	.word	0x40023800
 80023c4:	08003390 	.word	0x08003390

080023c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e041      	b.n	800245e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d106      	bne.n	80023f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7fe fae4 	bl	80009bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2202      	movs	r2, #2
 80023f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3304      	adds	r3, #4
 8002404:	4619      	mov	r1, r3
 8002406:	4610      	mov	r0, r2
 8002408:	f000 fad8 	bl	80029bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e041      	b.n	80024fc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	d106      	bne.n	8002492 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f839 	bl	8002504 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2202      	movs	r2, #2
 8002496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3304      	adds	r3, #4
 80024a2:	4619      	mov	r1, r3
 80024a4:	4610      	mov	r0, r2
 80024a6:	f000 fa89 	bl	80029bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d109      	bne.n	800253c <HAL_TIM_PWM_Start+0x24>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b01      	cmp	r3, #1
 8002532:	bf14      	ite	ne
 8002534:	2301      	movne	r3, #1
 8002536:	2300      	moveq	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	e022      	b.n	8002582 <HAL_TIM_PWM_Start+0x6a>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	2b04      	cmp	r3, #4
 8002540:	d109      	bne.n	8002556 <HAL_TIM_PWM_Start+0x3e>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b01      	cmp	r3, #1
 800254c:	bf14      	ite	ne
 800254e:	2301      	movne	r3, #1
 8002550:	2300      	moveq	r3, #0
 8002552:	b2db      	uxtb	r3, r3
 8002554:	e015      	b.n	8002582 <HAL_TIM_PWM_Start+0x6a>
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	2b08      	cmp	r3, #8
 800255a:	d109      	bne.n	8002570 <HAL_TIM_PWM_Start+0x58>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b01      	cmp	r3, #1
 8002566:	bf14      	ite	ne
 8002568:	2301      	movne	r3, #1
 800256a:	2300      	moveq	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	e008      	b.n	8002582 <HAL_TIM_PWM_Start+0x6a>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b01      	cmp	r3, #1
 800257a:	bf14      	ite	ne
 800257c:	2301      	movne	r3, #1
 800257e:	2300      	moveq	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e07c      	b.n	8002684 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d104      	bne.n	800259a <HAL_TIM_PWM_Start+0x82>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2202      	movs	r2, #2
 8002594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002598:	e013      	b.n	80025c2 <HAL_TIM_PWM_Start+0xaa>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	2b04      	cmp	r3, #4
 800259e:	d104      	bne.n	80025aa <HAL_TIM_PWM_Start+0x92>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2202      	movs	r2, #2
 80025a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025a8:	e00b      	b.n	80025c2 <HAL_TIM_PWM_Start+0xaa>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d104      	bne.n	80025ba <HAL_TIM_PWM_Start+0xa2>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2202      	movs	r2, #2
 80025b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025b8:	e003      	b.n	80025c2 <HAL_TIM_PWM_Start+0xaa>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2202      	movs	r2, #2
 80025be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2201      	movs	r2, #1
 80025c8:	6839      	ldr	r1, [r7, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 fce0 	bl	8002f90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a2d      	ldr	r2, [pc, #180]	; (800268c <HAL_TIM_PWM_Start+0x174>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d004      	beq.n	80025e4 <HAL_TIM_PWM_Start+0xcc>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a2c      	ldr	r2, [pc, #176]	; (8002690 <HAL_TIM_PWM_Start+0x178>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d101      	bne.n	80025e8 <HAL_TIM_PWM_Start+0xd0>
 80025e4:	2301      	movs	r3, #1
 80025e6:	e000      	b.n	80025ea <HAL_TIM_PWM_Start+0xd2>
 80025e8:	2300      	movs	r3, #0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d007      	beq.n	80025fe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a22      	ldr	r2, [pc, #136]	; (800268c <HAL_TIM_PWM_Start+0x174>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d022      	beq.n	800264e <HAL_TIM_PWM_Start+0x136>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002610:	d01d      	beq.n	800264e <HAL_TIM_PWM_Start+0x136>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a1f      	ldr	r2, [pc, #124]	; (8002694 <HAL_TIM_PWM_Start+0x17c>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d018      	beq.n	800264e <HAL_TIM_PWM_Start+0x136>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a1d      	ldr	r2, [pc, #116]	; (8002698 <HAL_TIM_PWM_Start+0x180>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d013      	beq.n	800264e <HAL_TIM_PWM_Start+0x136>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a1c      	ldr	r2, [pc, #112]	; (800269c <HAL_TIM_PWM_Start+0x184>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d00e      	beq.n	800264e <HAL_TIM_PWM_Start+0x136>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a16      	ldr	r2, [pc, #88]	; (8002690 <HAL_TIM_PWM_Start+0x178>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d009      	beq.n	800264e <HAL_TIM_PWM_Start+0x136>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a18      	ldr	r2, [pc, #96]	; (80026a0 <HAL_TIM_PWM_Start+0x188>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d004      	beq.n	800264e <HAL_TIM_PWM_Start+0x136>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a16      	ldr	r2, [pc, #88]	; (80026a4 <HAL_TIM_PWM_Start+0x18c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d111      	bne.n	8002672 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2b06      	cmp	r3, #6
 800265e:	d010      	beq.n	8002682 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f042 0201 	orr.w	r2, r2, #1
 800266e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002670:	e007      	b.n	8002682 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f042 0201 	orr.w	r2, r2, #1
 8002680:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40010000 	.word	0x40010000
 8002690:	40010400 	.word	0x40010400
 8002694:	40000400 	.word	0x40000400
 8002698:	40000800 	.word	0x40000800
 800269c:	40000c00 	.word	0x40000c00
 80026a0:	40014000 	.word	0x40014000
 80026a4:	40001800 	.word	0x40001800

080026a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026b4:	2300      	movs	r3, #0
 80026b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d101      	bne.n	80026c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80026c2:	2302      	movs	r3, #2
 80026c4:	e0ae      	b.n	8002824 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b0c      	cmp	r3, #12
 80026d2:	f200 809f 	bhi.w	8002814 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80026d6:	a201      	add	r2, pc, #4	; (adr r2, 80026dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80026d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026dc:	08002711 	.word	0x08002711
 80026e0:	08002815 	.word	0x08002815
 80026e4:	08002815 	.word	0x08002815
 80026e8:	08002815 	.word	0x08002815
 80026ec:	08002751 	.word	0x08002751
 80026f0:	08002815 	.word	0x08002815
 80026f4:	08002815 	.word	0x08002815
 80026f8:	08002815 	.word	0x08002815
 80026fc:	08002793 	.word	0x08002793
 8002700:	08002815 	.word	0x08002815
 8002704:	08002815 	.word	0x08002815
 8002708:	08002815 	.word	0x08002815
 800270c:	080027d3 	.word	0x080027d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68b9      	ldr	r1, [r7, #8]
 8002716:	4618      	mov	r0, r3
 8002718:	f000 f9f0 	bl	8002afc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	699a      	ldr	r2, [r3, #24]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 0208 	orr.w	r2, r2, #8
 800272a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	699a      	ldr	r2, [r3, #24]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0204 	bic.w	r2, r2, #4
 800273a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6999      	ldr	r1, [r3, #24]
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	691a      	ldr	r2, [r3, #16]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	619a      	str	r2, [r3, #24]
      break;
 800274e:	e064      	b.n	800281a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68b9      	ldr	r1, [r7, #8]
 8002756:	4618      	mov	r0, r3
 8002758:	f000 fa40 	bl	8002bdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	699a      	ldr	r2, [r3, #24]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800276a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	699a      	ldr	r2, [r3, #24]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800277a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6999      	ldr	r1, [r3, #24]
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	021a      	lsls	r2, r3, #8
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	619a      	str	r2, [r3, #24]
      break;
 8002790:	e043      	b.n	800281a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68b9      	ldr	r1, [r7, #8]
 8002798:	4618      	mov	r0, r3
 800279a:	f000 fa95 	bl	8002cc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	69da      	ldr	r2, [r3, #28]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f042 0208 	orr.w	r2, r2, #8
 80027ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	69da      	ldr	r2, [r3, #28]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0204 	bic.w	r2, r2, #4
 80027bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	69d9      	ldr	r1, [r3, #28]
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	691a      	ldr	r2, [r3, #16]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	61da      	str	r2, [r3, #28]
      break;
 80027d0:	e023      	b.n	800281a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68b9      	ldr	r1, [r7, #8]
 80027d8:	4618      	mov	r0, r3
 80027da:	f000 fae9 	bl	8002db0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	69da      	ldr	r2, [r3, #28]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	69da      	ldr	r2, [r3, #28]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	69d9      	ldr	r1, [r3, #28]
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	021a      	lsls	r2, r3, #8
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	61da      	str	r2, [r3, #28]
      break;
 8002812:	e002      	b.n	800281a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	75fb      	strb	r3, [r7, #23]
      break;
 8002818:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002822:	7dfb      	ldrb	r3, [r7, #23]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002840:	2b01      	cmp	r3, #1
 8002842:	d101      	bne.n	8002848 <HAL_TIM_ConfigClockSource+0x1c>
 8002844:	2302      	movs	r3, #2
 8002846:	e0b4      	b.n	80029b2 <HAL_TIM_ConfigClockSource+0x186>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2202      	movs	r2, #2
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002866:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800286e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002880:	d03e      	beq.n	8002900 <HAL_TIM_ConfigClockSource+0xd4>
 8002882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002886:	f200 8087 	bhi.w	8002998 <HAL_TIM_ConfigClockSource+0x16c>
 800288a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800288e:	f000 8086 	beq.w	800299e <HAL_TIM_ConfigClockSource+0x172>
 8002892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002896:	d87f      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x16c>
 8002898:	2b70      	cmp	r3, #112	; 0x70
 800289a:	d01a      	beq.n	80028d2 <HAL_TIM_ConfigClockSource+0xa6>
 800289c:	2b70      	cmp	r3, #112	; 0x70
 800289e:	d87b      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x16c>
 80028a0:	2b60      	cmp	r3, #96	; 0x60
 80028a2:	d050      	beq.n	8002946 <HAL_TIM_ConfigClockSource+0x11a>
 80028a4:	2b60      	cmp	r3, #96	; 0x60
 80028a6:	d877      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x16c>
 80028a8:	2b50      	cmp	r3, #80	; 0x50
 80028aa:	d03c      	beq.n	8002926 <HAL_TIM_ConfigClockSource+0xfa>
 80028ac:	2b50      	cmp	r3, #80	; 0x50
 80028ae:	d873      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x16c>
 80028b0:	2b40      	cmp	r3, #64	; 0x40
 80028b2:	d058      	beq.n	8002966 <HAL_TIM_ConfigClockSource+0x13a>
 80028b4:	2b40      	cmp	r3, #64	; 0x40
 80028b6:	d86f      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x16c>
 80028b8:	2b30      	cmp	r3, #48	; 0x30
 80028ba:	d064      	beq.n	8002986 <HAL_TIM_ConfigClockSource+0x15a>
 80028bc:	2b30      	cmp	r3, #48	; 0x30
 80028be:	d86b      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x16c>
 80028c0:	2b20      	cmp	r3, #32
 80028c2:	d060      	beq.n	8002986 <HAL_TIM_ConfigClockSource+0x15a>
 80028c4:	2b20      	cmp	r3, #32
 80028c6:	d867      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x16c>
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d05c      	beq.n	8002986 <HAL_TIM_ConfigClockSource+0x15a>
 80028cc:	2b10      	cmp	r3, #16
 80028ce:	d05a      	beq.n	8002986 <HAL_TIM_ConfigClockSource+0x15a>
 80028d0:	e062      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6818      	ldr	r0, [r3, #0]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	6899      	ldr	r1, [r3, #8]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f000 fb35 	bl	8002f50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	609a      	str	r2, [r3, #8]
      break;
 80028fe:	e04f      	b.n	80029a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6818      	ldr	r0, [r3, #0]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	6899      	ldr	r1, [r3, #8]
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f000 fb1e 	bl	8002f50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689a      	ldr	r2, [r3, #8]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002922:	609a      	str	r2, [r3, #8]
      break;
 8002924:	e03c      	b.n	80029a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6818      	ldr	r0, [r3, #0]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	6859      	ldr	r1, [r3, #4]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	461a      	mov	r2, r3
 8002934:	f000 fa92 	bl	8002e5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2150      	movs	r1, #80	; 0x50
 800293e:	4618      	mov	r0, r3
 8002940:	f000 faeb 	bl	8002f1a <TIM_ITRx_SetConfig>
      break;
 8002944:	e02c      	b.n	80029a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6818      	ldr	r0, [r3, #0]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	6859      	ldr	r1, [r3, #4]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	461a      	mov	r2, r3
 8002954:	f000 fab1 	bl	8002eba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2160      	movs	r1, #96	; 0x60
 800295e:	4618      	mov	r0, r3
 8002960:	f000 fadb 	bl	8002f1a <TIM_ITRx_SetConfig>
      break;
 8002964:	e01c      	b.n	80029a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6818      	ldr	r0, [r3, #0]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	6859      	ldr	r1, [r3, #4]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	461a      	mov	r2, r3
 8002974:	f000 fa72 	bl	8002e5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2140      	movs	r1, #64	; 0x40
 800297e:	4618      	mov	r0, r3
 8002980:	f000 facb 	bl	8002f1a <TIM_ITRx_SetConfig>
      break;
 8002984:	e00c      	b.n	80029a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4619      	mov	r1, r3
 8002990:	4610      	mov	r0, r2
 8002992:	f000 fac2 	bl	8002f1a <TIM_ITRx_SetConfig>
      break;
 8002996:	e003      	b.n	80029a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	73fb      	strb	r3, [r7, #15]
      break;
 800299c:	e000      	b.n	80029a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800299e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80029b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a40      	ldr	r2, [pc, #256]	; (8002ad0 <TIM_Base_SetConfig+0x114>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d013      	beq.n	80029fc <TIM_Base_SetConfig+0x40>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029da:	d00f      	beq.n	80029fc <TIM_Base_SetConfig+0x40>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a3d      	ldr	r2, [pc, #244]	; (8002ad4 <TIM_Base_SetConfig+0x118>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d00b      	beq.n	80029fc <TIM_Base_SetConfig+0x40>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a3c      	ldr	r2, [pc, #240]	; (8002ad8 <TIM_Base_SetConfig+0x11c>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d007      	beq.n	80029fc <TIM_Base_SetConfig+0x40>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a3b      	ldr	r2, [pc, #236]	; (8002adc <TIM_Base_SetConfig+0x120>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d003      	beq.n	80029fc <TIM_Base_SetConfig+0x40>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a3a      	ldr	r2, [pc, #232]	; (8002ae0 <TIM_Base_SetConfig+0x124>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d108      	bne.n	8002a0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a2f      	ldr	r2, [pc, #188]	; (8002ad0 <TIM_Base_SetConfig+0x114>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d02b      	beq.n	8002a6e <TIM_Base_SetConfig+0xb2>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a1c:	d027      	beq.n	8002a6e <TIM_Base_SetConfig+0xb2>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a2c      	ldr	r2, [pc, #176]	; (8002ad4 <TIM_Base_SetConfig+0x118>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d023      	beq.n	8002a6e <TIM_Base_SetConfig+0xb2>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a2b      	ldr	r2, [pc, #172]	; (8002ad8 <TIM_Base_SetConfig+0x11c>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d01f      	beq.n	8002a6e <TIM_Base_SetConfig+0xb2>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a2a      	ldr	r2, [pc, #168]	; (8002adc <TIM_Base_SetConfig+0x120>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d01b      	beq.n	8002a6e <TIM_Base_SetConfig+0xb2>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a29      	ldr	r2, [pc, #164]	; (8002ae0 <TIM_Base_SetConfig+0x124>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d017      	beq.n	8002a6e <TIM_Base_SetConfig+0xb2>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a28      	ldr	r2, [pc, #160]	; (8002ae4 <TIM_Base_SetConfig+0x128>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d013      	beq.n	8002a6e <TIM_Base_SetConfig+0xb2>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a27      	ldr	r2, [pc, #156]	; (8002ae8 <TIM_Base_SetConfig+0x12c>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d00f      	beq.n	8002a6e <TIM_Base_SetConfig+0xb2>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a26      	ldr	r2, [pc, #152]	; (8002aec <TIM_Base_SetConfig+0x130>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d00b      	beq.n	8002a6e <TIM_Base_SetConfig+0xb2>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a25      	ldr	r2, [pc, #148]	; (8002af0 <TIM_Base_SetConfig+0x134>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d007      	beq.n	8002a6e <TIM_Base_SetConfig+0xb2>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a24      	ldr	r2, [pc, #144]	; (8002af4 <TIM_Base_SetConfig+0x138>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d003      	beq.n	8002a6e <TIM_Base_SetConfig+0xb2>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a23      	ldr	r2, [pc, #140]	; (8002af8 <TIM_Base_SetConfig+0x13c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d108      	bne.n	8002a80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a0a      	ldr	r2, [pc, #40]	; (8002ad0 <TIM_Base_SetConfig+0x114>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d003      	beq.n	8002ab4 <TIM_Base_SetConfig+0xf8>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a0c      	ldr	r2, [pc, #48]	; (8002ae0 <TIM_Base_SetConfig+0x124>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d103      	bne.n	8002abc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	691a      	ldr	r2, [r3, #16]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	615a      	str	r2, [r3, #20]
}
 8002ac2:	bf00      	nop
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	40010000 	.word	0x40010000
 8002ad4:	40000400 	.word	0x40000400
 8002ad8:	40000800 	.word	0x40000800
 8002adc:	40000c00 	.word	0x40000c00
 8002ae0:	40010400 	.word	0x40010400
 8002ae4:	40014000 	.word	0x40014000
 8002ae8:	40014400 	.word	0x40014400
 8002aec:	40014800 	.word	0x40014800
 8002af0:	40001800 	.word	0x40001800
 8002af4:	40001c00 	.word	0x40001c00
 8002af8:	40002000 	.word	0x40002000

08002afc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b087      	sub	sp, #28
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	f023 0201 	bic.w	r2, r3, #1
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f023 0303 	bic.w	r3, r3, #3
 8002b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f023 0302 	bic.w	r3, r3, #2
 8002b44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a20      	ldr	r2, [pc, #128]	; (8002bd4 <TIM_OC1_SetConfig+0xd8>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d003      	beq.n	8002b60 <TIM_OC1_SetConfig+0x64>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a1f      	ldr	r2, [pc, #124]	; (8002bd8 <TIM_OC1_SetConfig+0xdc>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d10c      	bne.n	8002b7a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	f023 0308 	bic.w	r3, r3, #8
 8002b66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	f023 0304 	bic.w	r3, r3, #4
 8002b78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a15      	ldr	r2, [pc, #84]	; (8002bd4 <TIM_OC1_SetConfig+0xd8>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d003      	beq.n	8002b8a <TIM_OC1_SetConfig+0x8e>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a14      	ldr	r2, [pc, #80]	; (8002bd8 <TIM_OC1_SetConfig+0xdc>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d111      	bne.n	8002bae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	621a      	str	r2, [r3, #32]
}
 8002bc8:	bf00      	nop
 8002bca:	371c      	adds	r7, #28
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	40010000 	.word	0x40010000
 8002bd8:	40010400 	.word	0x40010400

08002bdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b087      	sub	sp, #28
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	f023 0210 	bic.w	r2, r3, #16
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	021b      	lsls	r3, r3, #8
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	f023 0320 	bic.w	r3, r3, #32
 8002c26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	011b      	lsls	r3, r3, #4
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a22      	ldr	r2, [pc, #136]	; (8002cc0 <TIM_OC2_SetConfig+0xe4>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d003      	beq.n	8002c44 <TIM_OC2_SetConfig+0x68>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a21      	ldr	r2, [pc, #132]	; (8002cc4 <TIM_OC2_SetConfig+0xe8>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d10d      	bne.n	8002c60 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	011b      	lsls	r3, r3, #4
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a17      	ldr	r2, [pc, #92]	; (8002cc0 <TIM_OC2_SetConfig+0xe4>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d003      	beq.n	8002c70 <TIM_OC2_SetConfig+0x94>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a16      	ldr	r2, [pc, #88]	; (8002cc4 <TIM_OC2_SetConfig+0xe8>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d113      	bne.n	8002c98 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	621a      	str	r2, [r3, #32]
}
 8002cb2:	bf00      	nop
 8002cb4:	371c      	adds	r7, #28
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	40010000 	.word	0x40010000
 8002cc4:	40010400 	.word	0x40010400

08002cc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b087      	sub	sp, #28
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f023 0303 	bic.w	r3, r3, #3
 8002cfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	021b      	lsls	r3, r3, #8
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a21      	ldr	r2, [pc, #132]	; (8002da8 <TIM_OC3_SetConfig+0xe0>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d003      	beq.n	8002d2e <TIM_OC3_SetConfig+0x66>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a20      	ldr	r2, [pc, #128]	; (8002dac <TIM_OC3_SetConfig+0xe4>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d10d      	bne.n	8002d4a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	021b      	lsls	r3, r3, #8
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a16      	ldr	r2, [pc, #88]	; (8002da8 <TIM_OC3_SetConfig+0xe0>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d003      	beq.n	8002d5a <TIM_OC3_SetConfig+0x92>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a15      	ldr	r2, [pc, #84]	; (8002dac <TIM_OC3_SetConfig+0xe4>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d113      	bne.n	8002d82 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	011b      	lsls	r3, r3, #4
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	621a      	str	r2, [r3, #32]
}
 8002d9c:	bf00      	nop
 8002d9e:	371c      	adds	r7, #28
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	40010000 	.word	0x40010000
 8002dac:	40010400 	.word	0x40010400

08002db0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b087      	sub	sp, #28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002de6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	021b      	lsls	r3, r3, #8
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002dfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	031b      	lsls	r3, r3, #12
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a12      	ldr	r2, [pc, #72]	; (8002e54 <TIM_OC4_SetConfig+0xa4>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d003      	beq.n	8002e18 <TIM_OC4_SetConfig+0x68>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a11      	ldr	r2, [pc, #68]	; (8002e58 <TIM_OC4_SetConfig+0xa8>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d109      	bne.n	8002e2c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	019b      	lsls	r3, r3, #6
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	621a      	str	r2, [r3, #32]
}
 8002e46:	bf00      	nop
 8002e48:	371c      	adds	r7, #28
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40010000 	.word	0x40010000
 8002e58:	40010400 	.word	0x40010400

08002e5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b087      	sub	sp, #28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	f023 0201 	bic.w	r2, r3, #1
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f023 030a 	bic.w	r3, r3, #10
 8002e98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	621a      	str	r2, [r3, #32]
}
 8002eae:	bf00      	nop
 8002eb0:	371c      	adds	r7, #28
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b087      	sub	sp, #28
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	60f8      	str	r0, [r7, #12]
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	f023 0210 	bic.w	r2, r3, #16
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ee4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	031b      	lsls	r3, r3, #12
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ef6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	011b      	lsls	r3, r3, #4
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	621a      	str	r2, [r3, #32]
}
 8002f0e:	bf00      	nop
 8002f10:	371c      	adds	r7, #28
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b085      	sub	sp, #20
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
 8002f22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	f043 0307 	orr.w	r3, r3, #7
 8002f3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	609a      	str	r2, [r3, #8]
}
 8002f44:	bf00      	nop
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b087      	sub	sp, #28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
 8002f5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	021a      	lsls	r2, r3, #8
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	431a      	orrs	r2, r3
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	609a      	str	r2, [r3, #8]
}
 8002f84:	bf00      	nop
 8002f86:	371c      	adds	r7, #28
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b087      	sub	sp, #28
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	f003 031f 	and.w	r3, r3, #31
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a1a      	ldr	r2, [r3, #32]
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	401a      	ands	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6a1a      	ldr	r2, [r3, #32]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	f003 031f 	and.w	r3, r3, #31
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	621a      	str	r2, [r3, #32]
}
 8002fce:	bf00      	nop
 8002fd0:	371c      	adds	r7, #28
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
	...

08002fdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d101      	bne.n	8002ff4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	e05a      	b.n	80030aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2202      	movs	r2, #2
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800301a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	4313      	orrs	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a21      	ldr	r2, [pc, #132]	; (80030b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d022      	beq.n	800307e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003040:	d01d      	beq.n	800307e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a1d      	ldr	r2, [pc, #116]	; (80030bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d018      	beq.n	800307e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a1b      	ldr	r2, [pc, #108]	; (80030c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d013      	beq.n	800307e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a1a      	ldr	r2, [pc, #104]	; (80030c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d00e      	beq.n	800307e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a18      	ldr	r2, [pc, #96]	; (80030c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d009      	beq.n	800307e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a17      	ldr	r2, [pc, #92]	; (80030cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d004      	beq.n	800307e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a15      	ldr	r2, [pc, #84]	; (80030d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d10c      	bne.n	8003098 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003084:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	4313      	orrs	r3, r2
 800308e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3714      	adds	r7, #20
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	40010000 	.word	0x40010000
 80030bc:	40000400 	.word	0x40000400
 80030c0:	40000800 	.word	0x40000800
 80030c4:	40000c00 	.word	0x40000c00
 80030c8:	40010400 	.word	0x40010400
 80030cc:	40014000 	.word	0x40014000
 80030d0:	40001800 	.word	0x40001800

080030d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d101      	bne.n	80030f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80030ec:	2302      	movs	r3, #2
 80030ee:	e03d      	b.n	800316c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	4313      	orrs	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	4313      	orrs	r3, r2
 8003112:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	4313      	orrs	r3, r2
 8003120:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4313      	orrs	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	4313      	orrs	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	4313      	orrs	r3, r2
 800314a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	4313      	orrs	r3, r2
 8003158:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <malloc>:
 8003178:	4b02      	ldr	r3, [pc, #8]	; (8003184 <malloc+0xc>)
 800317a:	4601      	mov	r1, r0
 800317c:	6818      	ldr	r0, [r3, #0]
 800317e:	f000 b823 	b.w	80031c8 <_malloc_r>
 8003182:	bf00      	nop
 8003184:	20000058 	.word	0x20000058

08003188 <sbrk_aligned>:
 8003188:	b570      	push	{r4, r5, r6, lr}
 800318a:	4e0e      	ldr	r6, [pc, #56]	; (80031c4 <sbrk_aligned+0x3c>)
 800318c:	460c      	mov	r4, r1
 800318e:	6831      	ldr	r1, [r6, #0]
 8003190:	4605      	mov	r5, r0
 8003192:	b911      	cbnz	r1, 800319a <sbrk_aligned+0x12>
 8003194:	f000 f8ac 	bl	80032f0 <_sbrk_r>
 8003198:	6030      	str	r0, [r6, #0]
 800319a:	4621      	mov	r1, r4
 800319c:	4628      	mov	r0, r5
 800319e:	f000 f8a7 	bl	80032f0 <_sbrk_r>
 80031a2:	1c43      	adds	r3, r0, #1
 80031a4:	d00a      	beq.n	80031bc <sbrk_aligned+0x34>
 80031a6:	1cc4      	adds	r4, r0, #3
 80031a8:	f024 0403 	bic.w	r4, r4, #3
 80031ac:	42a0      	cmp	r0, r4
 80031ae:	d007      	beq.n	80031c0 <sbrk_aligned+0x38>
 80031b0:	1a21      	subs	r1, r4, r0
 80031b2:	4628      	mov	r0, r5
 80031b4:	f000 f89c 	bl	80032f0 <_sbrk_r>
 80031b8:	3001      	adds	r0, #1
 80031ba:	d101      	bne.n	80031c0 <sbrk_aligned+0x38>
 80031bc:	f04f 34ff 	mov.w	r4, #4294967295
 80031c0:	4620      	mov	r0, r4
 80031c2:	bd70      	pop	{r4, r5, r6, pc}
 80031c4:	20000184 	.word	0x20000184

080031c8 <_malloc_r>:
 80031c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031cc:	1ccd      	adds	r5, r1, #3
 80031ce:	f025 0503 	bic.w	r5, r5, #3
 80031d2:	3508      	adds	r5, #8
 80031d4:	2d0c      	cmp	r5, #12
 80031d6:	bf38      	it	cc
 80031d8:	250c      	movcc	r5, #12
 80031da:	2d00      	cmp	r5, #0
 80031dc:	4607      	mov	r7, r0
 80031de:	db01      	blt.n	80031e4 <_malloc_r+0x1c>
 80031e0:	42a9      	cmp	r1, r5
 80031e2:	d905      	bls.n	80031f0 <_malloc_r+0x28>
 80031e4:	230c      	movs	r3, #12
 80031e6:	603b      	str	r3, [r7, #0]
 80031e8:	2600      	movs	r6, #0
 80031ea:	4630      	mov	r0, r6
 80031ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80032c4 <_malloc_r+0xfc>
 80031f4:	f000 f868 	bl	80032c8 <__malloc_lock>
 80031f8:	f8d8 3000 	ldr.w	r3, [r8]
 80031fc:	461c      	mov	r4, r3
 80031fe:	bb5c      	cbnz	r4, 8003258 <_malloc_r+0x90>
 8003200:	4629      	mov	r1, r5
 8003202:	4638      	mov	r0, r7
 8003204:	f7ff ffc0 	bl	8003188 <sbrk_aligned>
 8003208:	1c43      	adds	r3, r0, #1
 800320a:	4604      	mov	r4, r0
 800320c:	d155      	bne.n	80032ba <_malloc_r+0xf2>
 800320e:	f8d8 4000 	ldr.w	r4, [r8]
 8003212:	4626      	mov	r6, r4
 8003214:	2e00      	cmp	r6, #0
 8003216:	d145      	bne.n	80032a4 <_malloc_r+0xdc>
 8003218:	2c00      	cmp	r4, #0
 800321a:	d048      	beq.n	80032ae <_malloc_r+0xe6>
 800321c:	6823      	ldr	r3, [r4, #0]
 800321e:	4631      	mov	r1, r6
 8003220:	4638      	mov	r0, r7
 8003222:	eb04 0903 	add.w	r9, r4, r3
 8003226:	f000 f863 	bl	80032f0 <_sbrk_r>
 800322a:	4581      	cmp	r9, r0
 800322c:	d13f      	bne.n	80032ae <_malloc_r+0xe6>
 800322e:	6821      	ldr	r1, [r4, #0]
 8003230:	1a6d      	subs	r5, r5, r1
 8003232:	4629      	mov	r1, r5
 8003234:	4638      	mov	r0, r7
 8003236:	f7ff ffa7 	bl	8003188 <sbrk_aligned>
 800323a:	3001      	adds	r0, #1
 800323c:	d037      	beq.n	80032ae <_malloc_r+0xe6>
 800323e:	6823      	ldr	r3, [r4, #0]
 8003240:	442b      	add	r3, r5
 8003242:	6023      	str	r3, [r4, #0]
 8003244:	f8d8 3000 	ldr.w	r3, [r8]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d038      	beq.n	80032be <_malloc_r+0xf6>
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	42a2      	cmp	r2, r4
 8003250:	d12b      	bne.n	80032aa <_malloc_r+0xe2>
 8003252:	2200      	movs	r2, #0
 8003254:	605a      	str	r2, [r3, #4]
 8003256:	e00f      	b.n	8003278 <_malloc_r+0xb0>
 8003258:	6822      	ldr	r2, [r4, #0]
 800325a:	1b52      	subs	r2, r2, r5
 800325c:	d41f      	bmi.n	800329e <_malloc_r+0xd6>
 800325e:	2a0b      	cmp	r2, #11
 8003260:	d917      	bls.n	8003292 <_malloc_r+0xca>
 8003262:	1961      	adds	r1, r4, r5
 8003264:	42a3      	cmp	r3, r4
 8003266:	6025      	str	r5, [r4, #0]
 8003268:	bf18      	it	ne
 800326a:	6059      	strne	r1, [r3, #4]
 800326c:	6863      	ldr	r3, [r4, #4]
 800326e:	bf08      	it	eq
 8003270:	f8c8 1000 	streq.w	r1, [r8]
 8003274:	5162      	str	r2, [r4, r5]
 8003276:	604b      	str	r3, [r1, #4]
 8003278:	4638      	mov	r0, r7
 800327a:	f104 060b 	add.w	r6, r4, #11
 800327e:	f000 f829 	bl	80032d4 <__malloc_unlock>
 8003282:	f026 0607 	bic.w	r6, r6, #7
 8003286:	1d23      	adds	r3, r4, #4
 8003288:	1af2      	subs	r2, r6, r3
 800328a:	d0ae      	beq.n	80031ea <_malloc_r+0x22>
 800328c:	1b9b      	subs	r3, r3, r6
 800328e:	50a3      	str	r3, [r4, r2]
 8003290:	e7ab      	b.n	80031ea <_malloc_r+0x22>
 8003292:	42a3      	cmp	r3, r4
 8003294:	6862      	ldr	r2, [r4, #4]
 8003296:	d1dd      	bne.n	8003254 <_malloc_r+0x8c>
 8003298:	f8c8 2000 	str.w	r2, [r8]
 800329c:	e7ec      	b.n	8003278 <_malloc_r+0xb0>
 800329e:	4623      	mov	r3, r4
 80032a0:	6864      	ldr	r4, [r4, #4]
 80032a2:	e7ac      	b.n	80031fe <_malloc_r+0x36>
 80032a4:	4634      	mov	r4, r6
 80032a6:	6876      	ldr	r6, [r6, #4]
 80032a8:	e7b4      	b.n	8003214 <_malloc_r+0x4c>
 80032aa:	4613      	mov	r3, r2
 80032ac:	e7cc      	b.n	8003248 <_malloc_r+0x80>
 80032ae:	230c      	movs	r3, #12
 80032b0:	603b      	str	r3, [r7, #0]
 80032b2:	4638      	mov	r0, r7
 80032b4:	f000 f80e 	bl	80032d4 <__malloc_unlock>
 80032b8:	e797      	b.n	80031ea <_malloc_r+0x22>
 80032ba:	6025      	str	r5, [r4, #0]
 80032bc:	e7dc      	b.n	8003278 <_malloc_r+0xb0>
 80032be:	605b      	str	r3, [r3, #4]
 80032c0:	deff      	udf	#255	; 0xff
 80032c2:	bf00      	nop
 80032c4:	20000180 	.word	0x20000180

080032c8 <__malloc_lock>:
 80032c8:	4801      	ldr	r0, [pc, #4]	; (80032d0 <__malloc_lock+0x8>)
 80032ca:	f000 b84b 	b.w	8003364 <__retarget_lock_acquire_recursive>
 80032ce:	bf00      	nop
 80032d0:	200002c4 	.word	0x200002c4

080032d4 <__malloc_unlock>:
 80032d4:	4801      	ldr	r0, [pc, #4]	; (80032dc <__malloc_unlock+0x8>)
 80032d6:	f000 b846 	b.w	8003366 <__retarget_lock_release_recursive>
 80032da:	bf00      	nop
 80032dc:	200002c4 	.word	0x200002c4

080032e0 <memset>:
 80032e0:	4402      	add	r2, r0
 80032e2:	4603      	mov	r3, r0
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d100      	bne.n	80032ea <memset+0xa>
 80032e8:	4770      	bx	lr
 80032ea:	f803 1b01 	strb.w	r1, [r3], #1
 80032ee:	e7f9      	b.n	80032e4 <memset+0x4>

080032f0 <_sbrk_r>:
 80032f0:	b538      	push	{r3, r4, r5, lr}
 80032f2:	4d06      	ldr	r5, [pc, #24]	; (800330c <_sbrk_r+0x1c>)
 80032f4:	2300      	movs	r3, #0
 80032f6:	4604      	mov	r4, r0
 80032f8:	4608      	mov	r0, r1
 80032fa:	602b      	str	r3, [r5, #0]
 80032fc:	f7fd fc20 	bl	8000b40 <_sbrk>
 8003300:	1c43      	adds	r3, r0, #1
 8003302:	d102      	bne.n	800330a <_sbrk_r+0x1a>
 8003304:	682b      	ldr	r3, [r5, #0]
 8003306:	b103      	cbz	r3, 800330a <_sbrk_r+0x1a>
 8003308:	6023      	str	r3, [r4, #0]
 800330a:	bd38      	pop	{r3, r4, r5, pc}
 800330c:	200002c0 	.word	0x200002c0

08003310 <__errno>:
 8003310:	4b01      	ldr	r3, [pc, #4]	; (8003318 <__errno+0x8>)
 8003312:	6818      	ldr	r0, [r3, #0]
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	20000058 	.word	0x20000058

0800331c <__libc_init_array>:
 800331c:	b570      	push	{r4, r5, r6, lr}
 800331e:	4d0d      	ldr	r5, [pc, #52]	; (8003354 <__libc_init_array+0x38>)
 8003320:	4c0d      	ldr	r4, [pc, #52]	; (8003358 <__libc_init_array+0x3c>)
 8003322:	1b64      	subs	r4, r4, r5
 8003324:	10a4      	asrs	r4, r4, #2
 8003326:	2600      	movs	r6, #0
 8003328:	42a6      	cmp	r6, r4
 800332a:	d109      	bne.n	8003340 <__libc_init_array+0x24>
 800332c:	4d0b      	ldr	r5, [pc, #44]	; (800335c <__libc_init_array+0x40>)
 800332e:	4c0c      	ldr	r4, [pc, #48]	; (8003360 <__libc_init_array+0x44>)
 8003330:	f000 f81a 	bl	8003368 <_init>
 8003334:	1b64      	subs	r4, r4, r5
 8003336:	10a4      	asrs	r4, r4, #2
 8003338:	2600      	movs	r6, #0
 800333a:	42a6      	cmp	r6, r4
 800333c:	d105      	bne.n	800334a <__libc_init_array+0x2e>
 800333e:	bd70      	pop	{r4, r5, r6, pc}
 8003340:	f855 3b04 	ldr.w	r3, [r5], #4
 8003344:	4798      	blx	r3
 8003346:	3601      	adds	r6, #1
 8003348:	e7ee      	b.n	8003328 <__libc_init_array+0xc>
 800334a:	f855 3b04 	ldr.w	r3, [r5], #4
 800334e:	4798      	blx	r3
 8003350:	3601      	adds	r6, #1
 8003352:	e7f2      	b.n	800333a <__libc_init_array+0x1e>
 8003354:	080033a8 	.word	0x080033a8
 8003358:	080033a8 	.word	0x080033a8
 800335c:	080033a8 	.word	0x080033a8
 8003360:	080033ac 	.word	0x080033ac

08003364 <__retarget_lock_acquire_recursive>:
 8003364:	4770      	bx	lr

08003366 <__retarget_lock_release_recursive>:
 8003366:	4770      	bx	lr

08003368 <_init>:
 8003368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336a:	bf00      	nop
 800336c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800336e:	bc08      	pop	{r3}
 8003370:	469e      	mov	lr, r3
 8003372:	4770      	bx	lr

08003374 <_fini>:
 8003374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003376:	bf00      	nop
 8003378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800337a:	bc08      	pop	{r3}
 800337c:	469e      	mov	lr, r3
 800337e:	4770      	bx	lr
