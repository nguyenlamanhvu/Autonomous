
Autonomous.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000779c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08007924  08007924  00017924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d34  08007d34  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08007d34  08007d34  00017d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d3c  08007d3c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08007d3c  08007d3c  00017d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d48  08007d48  00017d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007d4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00000db0  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000e1c  20000e1c  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001872e  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003068  00000000  00000000  0003880d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012c0  00000000  00000000  0003b878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ecd  00000000  00000000  0003cb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002248b  00000000  00000000  0003da05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015de7  00000000  00000000  0005fe90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d43a7  00000000  00000000  00075c77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005470  00000000  00000000  0014a020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  0014f490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000006c 	.word	0x2000006c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800790c 	.word	0x0800790c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000070 	.word	0x20000070
 80001c4:	0800790c 	.word	0x0800790c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <_ZN14BufferedSerialC1ER20__UART_HandleTypeDef>:

// Create Serial Buffer with UART2:
BufferedSerial buff_serial(huart2);

// Constructor:
BufferedSerial::BufferedSerial(UART_HandleTypeDef &huart_)
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	6039      	str	r1, [r7, #0]
  : huart(huart_) {}
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	683a      	ldr	r2, [r7, #0]
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2200      	movs	r2, #0
 80004e8:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2200      	movs	r2, #0
 80004f0:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2200      	movs	r2, #0
 80004f8:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000502:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4618      	mov	r0, r3
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <_ZN14BufferedSerial4initEv>:

// Init:
void BufferedSerial::init(void) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  reset_rx_buffer();
 800051c:	6878      	ldr	r0, [r7, #4]
 800051e:	f000 f91f 	bl	8000760 <_ZN14BufferedSerial15reset_rx_bufferEv>
}
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}

0800052a <_ZN14BufferedSerial4readEv>:

// Read new char in RX buffer:
int BufferedSerial::read(void) {
 800052a:	b480      	push	{r7}
 800052c:	b085      	sub	sp, #20
 800052e:	af00      	add	r7, sp, #0
 8000530:	6078      	str	r0, [r7, #4]
  // Get DMA head:
  uint16_t dma_head = (RX_BUF_SIZE - huart.hdmarx->Instance->NDTR) & rx_buf_mask;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	b29b      	uxth	r3, r3
 800053e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8000542:	b29b      	uxth	r3, r3
 8000544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000548:	81fb      	strh	r3, [r7, #14]

  // Quit if no new character:
  if (dma_head == rx_tail) return -1;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8000550:	89fa      	ldrh	r2, [r7, #14]
 8000552:	429a      	cmp	r2, r3
 8000554:	d102      	bne.n	800055c <_ZN14BufferedSerial4readEv+0x32>
 8000556:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800055a:	e016      	b.n	800058a <_ZN14BufferedSerial4readEv+0x60>

  // Get next char in buffer:
  int c = (int) rx_buf[rx_tail++];
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8000562:	1c5a      	adds	r2, r3, #1
 8000564:	b291      	uxth	r1, r2
 8000566:	687a      	ldr	r2, [r7, #4]
 8000568:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 800056c:	461a      	mov	r2, r3
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4413      	add	r3, r2
 8000572:	791b      	ldrb	r3, [r3, #4]
 8000574:	60bb      	str	r3, [r7, #8]

  // Wrap around if rx_tail > RX_BUF_SIZE:
  rx_tail &= rx_buf_mask;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 800057c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000580:	b29a      	uxth	r2, r3
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404

  return c;
 8000588:	68bb      	ldr	r3, [r7, #8]
}
 800058a:	4618      	mov	r0, r3
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr

08000596 <_ZN14BufferedSerial5writeEPKhi>:

// Prepare data and send it:
void BufferedSerial::write(const uint8_t *data, const int length) {
 8000596:	b580      	push	{r7, lr}
 8000598:	b084      	sub	sp, #16
 800059a:	af00      	add	r7, sp, #0
 800059c:	60f8      	str	r0, [r7, #12]
 800059e:	60b9      	str	r1, [r7, #8]
 80005a0:	607a      	str	r2, [r7, #4]
  // If data can fit at the end of the buffer:
  if (tx_head + length < TX_BUF_SIZE) {
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 80005a8:	461a      	mov	r2, r3
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4413      	add	r3, r2
 80005ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005b2:	da25      	bge.n	8000600 <_ZN14BufferedSerial5writeEPKhi+0x6a>
    memcpy(&(tx_buf[tx_head]), data, length);
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 80005ba:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80005be:	68fa      	ldr	r2, [r7, #12]
 80005c0:	4413      	add	r3, r2
 80005c2:	3304      	adds	r3, #4
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	68b9      	ldr	r1, [r7, #8]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f007 f93d 	bl	8007848 <memcpy>
    tx_head += length; // ) & tx_buf_mask
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	4413      	add	r3, r2
 80005da:	b29a      	uxth	r2, r3
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
    if (tx_head > tx_end) tx_end = tx_head; // Avoids "wrong checksum for topic id and msg" in rosserial logs
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d921      	bls.n	8000636 <_ZN14BufferedSerial5writeEPKhi+0xa0>
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
 80005fe:	e01a      	b.n	8000636 <_ZN14BufferedSerial5writeEPKhi+0xa0>
  }
  // Else data is copied at the beginning of TX buffer:
  else {
    memcpy(tx_buf, data, length);
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	68b9      	ldr	r1, [r7, #8]
 800060a:	4618      	mov	r0, r3
 800060c:	f007 f91c 	bl	8007848 <memcpy>
    if (tx_head > tx_tail) tx_end = tx_head; // Avoids tx_end > tx_tail
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800061c:	429a      	cmp	r2, r3
 800061e:	d905      	bls.n	800062c <_ZN14BufferedSerial5writeEPKhi+0x96>
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
    tx_head = length;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	b29a      	uxth	r2, r3
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
  }

  // Send data:
  flush_tx_buffer();
 8000636:	68f8      	ldr	r0, [r7, #12]
 8000638:	f000 f804 	bl	8000644 <_ZN14BufferedSerial15flush_tx_bufferEv>
}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <_ZN14BufferedSerial15flush_tx_bufferEv>:

// Send data:
void BufferedSerial::flush_tx_buffer(void) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  static bool mutex = false;

  // Reset indexes if they are at the same position:
  if (tx_head != 0 && tx_head == tx_tail) {   // Can be removed (just for better memory management)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8000652:	2b00      	cmp	r3, #0
 8000654:	d00f      	beq.n	8000676 <_ZN14BufferedSerial15flush_tx_bufferEv+0x32>
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8000662:	429a      	cmp	r2, r3
 8000664:	d107      	bne.n	8000676 <_ZN14BufferedSerial15flush_tx_bufferEv+0x32>
     tx_head = 0;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2200      	movs	r2, #0
 800066a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
     tx_tail = 0;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2200      	movs	r2, #0
 8000672:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
   }

  // Quit if UART not ready to transmit data or no data to send:
  if (huart.gState != HAL_UART_STATE_READY || tx_head == tx_tail || mutex) return;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800067e:	b2db      	uxtb	r3, r3
 8000680:	2b20      	cmp	r3, #32
 8000682:	d10b      	bne.n	800069c <_ZN14BufferedSerial15flush_tx_bufferEv+0x58>
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8000690:	429a      	cmp	r2, r3
 8000692:	d003      	beq.n	800069c <_ZN14BufferedSerial15flush_tx_bufferEv+0x58>
 8000694:	4b31      	ldr	r3, [pc, #196]	; (800075c <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <_ZN14BufferedSerial15flush_tx_bufferEv+0x5c>
 800069c:	2301      	movs	r3, #1
 800069e:	e000      	b.n	80006a2 <_ZN14BufferedSerial15flush_tx_bufferEv+0x5e>
 80006a0:	2300      	movs	r3, #0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d156      	bne.n	8000754 <_ZN14BufferedSerial15flush_tx_bufferEv+0x110>
  mutex = true;
 80006a6:	4b2d      	ldr	r3, [pc, #180]	; (800075c <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	701a      	strb	r2, [r3, #0]

  // Reset flush index if already sent complete TX buffer:
  if (tx_tail == tx_end) tx_tail = 0;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	f8b3 2408 	ldrh.w	r2, [r3, #1032]	; 0x408
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d103      	bne.n	80006c4 <_ZN14BufferedSerial15flush_tx_bufferEv+0x80>
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2200      	movs	r2, #0
 80006c0:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408

  // Send data behind head:
  if (tx_tail < tx_head) {
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	f8b3 2408 	ldrh.w	r2, [r3, #1032]	; 0x408
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d21c      	bcs.n	800070e <_ZN14BufferedSerial15flush_tx_bufferEv+0xca>
    uint16_t length = tx_head - tx_tail;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 80006e0:	1ad3      	subs	r3, r2, r3
 80006e2:	81bb      	strh	r3, [r7, #12]
    HAL_UART_Transmit_DMA(&huart, &(tx_buf[tx_tail]), length);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	6818      	ldr	r0, [r3, #0]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 80006ee:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	4413      	add	r3, r2
 80006f6:	3304      	adds	r3, #4
 80006f8:	89ba      	ldrh	r2, [r7, #12]
 80006fa:	4619      	mov	r1, r3
 80006fc:	f005 fde6 	bl	80062cc <HAL_UART_Transmit_DMA>
    tx_tail = tx_head;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
 800070c:	e01e      	b.n	800074c <_ZN14BufferedSerial15flush_tx_bufferEv+0x108>
  }
  // Else end the buffer before resetting tail index:
  else {
    uint16_t length = tx_end - tx_tail;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f8b3 240a 	ldrh.w	r2, [r3, #1034]	; 0x40a
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800071a:	1ad3      	subs	r3, r2, r3
 800071c:	81fb      	strh	r3, [r7, #14]
    HAL_UART_Transmit_DMA(&huart, &(tx_buf[tx_tail]), length);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	6818      	ldr	r0, [r3, #0]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8000728:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	4413      	add	r3, r2
 8000730:	3304      	adds	r3, #4
 8000732:	89fa      	ldrh	r2, [r7, #14]
 8000734:	4619      	mov	r1, r3
 8000736:	f005 fdc9 	bl	80062cc <HAL_UART_Transmit_DMA>

    // Reset indexes:
    tx_end = TX_BUF_SIZE;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000740:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
    tx_tail = 0;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2200      	movs	r2, #0
 8000748:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
  }

  mutex = false;
 800074c:	4b03      	ldr	r3, [pc, #12]	; (800075c <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 800074e:	2200      	movs	r2, #0
 8000750:	701a      	strb	r2, [r3, #0]
 8000752:	e000      	b.n	8000756 <_ZN14BufferedSerial15flush_tx_bufferEv+0x112>
  if (huart.gState != HAL_UART_STATE_READY || tx_head == tx_tail || mutex) return;
 8000754:	bf00      	nop
}
 8000756:	3710      	adds	r7, #16
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000494 	.word	0x20000494

08000760 <_ZN14BufferedSerial15reset_rx_bufferEv>:


// Reset DMA to the beginning of the RX buffer:
inline void BufferedSerial::reset_rx_buffer(void) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_DMA(&huart, rx_buf, RX_BUF_SIZE);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	6818      	ldr	r0, [r3, #0]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	3304      	adds	r3, #4
 8000770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000774:	4619      	mov	r1, r3
 8000776:	f005 fe27 	bl	80063c8 <HAL_UART_Receive_DMA>
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <_ZN14BufferedSerial10get_handleEv>:

// Get UART Handle:
UART_HandleTypeDef* const BufferedSerial::get_handle(void) { return &huart; }
 8000782:	b480      	push	{r7}
 8000784:	b083      	sub	sp, #12
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4618      	mov	r0, r3
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
	...

0800079c <HAL_UART_TxCpltCallback>:


// DMA callbacks:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart) {
 800079c:	b590      	push	{r4, r7, lr}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  // Comparing pointers: (remove equality if only one UART is used)
  if (huart->Instance == buff_serial.get_handle()->Instance) {
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681c      	ldr	r4, [r3, #0]
 80007a8:	4809      	ldr	r0, [pc, #36]	; (80007d0 <HAL_UART_TxCpltCallback+0x34>)
 80007aa:	f7ff ffea 	bl	8000782 <_ZN14BufferedSerial10get_handleEv>
 80007ae:	4603      	mov	r3, r0
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	429c      	cmp	r4, r3
 80007b4:	bf0c      	ite	eq
 80007b6:	2301      	moveq	r3, #1
 80007b8:	2300      	movne	r3, #0
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d002      	beq.n	80007c6 <HAL_UART_TxCpltCallback+0x2a>
    buff_serial.flush_tx_buffer();
 80007c0:	4803      	ldr	r0, [pc, #12]	; (80007d0 <HAL_UART_TxCpltCallback+0x34>)
 80007c2:	f7ff ff3f 	bl	8000644 <_ZN14BufferedSerial15flush_tx_bufferEv>
  }
}
 80007c6:	bf00      	nop
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd90      	pop	{r4, r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000088 	.word	0x20000088

080007d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  buff_serial.reset_rx_buffer();  // Can be commented if DMA mode for RX is Circular
 80007dc:	4803      	ldr	r0, [pc, #12]	; (80007ec <HAL_UART_RxCpltCallback+0x18>)
 80007de:	f7ff ffbf 	bl	8000760 <_ZN14BufferedSerial15reset_rx_bufferEv>
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000088 	.word	0x20000088

080007f0 <_Z41__static_initialization_and_destruction_0ii>:
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d108      	bne.n	8000812 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000806:	4293      	cmp	r3, r2
 8000808:	d103      	bne.n	8000812 <_Z41__static_initialization_and_destruction_0ii+0x22>
BufferedSerial buff_serial(huart2);
 800080a:	4904      	ldr	r1, [pc, #16]	; (800081c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 800080c:	4804      	ldr	r0, [pc, #16]	; (8000820 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800080e:	f7ff fe61 	bl	80004d4 <_ZN14BufferedSerialC1ER20__UART_HandleTypeDef>
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000594 	.word	0x20000594
 8000820:	20000088 	.word	0x20000088

08000824 <_GLOBAL__sub_I_buff_serial>:
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
 8000828:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800082c:	2001      	movs	r0, #1
 800082e:	f7ff ffdf 	bl	80007f0 <_Z41__static_initialization_and_destruction_0ii>
 8000832:	bd80      	pop	{r7, pc}

08000834 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000838:	f003 f8e6 	bl	8003a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800083c:	f000 f822 	bl	8000884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000840:	f000 f9c0 	bl	8000bc4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000844:	f000 f980 	bl	8000b48 <MX_DMA_Init>
  MX_I2C1_Init();
 8000848:	f000 f886 	bl	8000958 <MX_I2C1_Init>
  MX_TIM1_Init();
 800084c:	f000 f8b2 	bl	80009b4 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000850:	f000 f950 	bl	8000af4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
//  imu_9250_0 = IMU_9250_Create();
//  calibrateGyro(imu_9250_0, 500);
  motor_0 = MOTOR_Create();
 8000854:	f002 fdfa 	bl	800344c <MOTOR_Create>
 8000858:	4603      	mov	r3, r0
 800085a:	4a09      	ldr	r2, [pc, #36]	; (8000880 <main+0x4c>)
 800085c:	6013      	str	r3, [r2, #0]
  motor_0->Prop_p.speed = 20;
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <main+0x4c>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	2214      	movs	r2, #20
 8000864:	809a      	strh	r2, [r3, #4]
  setup();
 8000866:	f002 f809 	bl	800287c <setup>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  imu_9250_0->get_data(imu_9250_0);			// pointer store address of MPU9250_ProcessData function
//	  CalculateGyroAngle(&Angle, imu_9250_0);
	  motor_0->control_speed(motor_0);
 800086a:	4b05      	ldr	r3, [pc, #20]	; (8000880 <main+0x4c>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a03      	ldr	r2, [pc, #12]	; (8000880 <main+0x4c>)
 8000872:	6812      	ldr	r2, [r2, #0]
 8000874:	4610      	mov	r0, r2
 8000876:	4798      	blx	r3
	  loop();
 8000878:	f002 f81c 	bl	80028b4 <loop>
	  motor_0->control_speed(motor_0);
 800087c:	e7f5      	b.n	800086a <main+0x36>
 800087e:	bf00      	nop
 8000880:	20000698 	.word	0x20000698

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b094      	sub	sp, #80	; 0x50
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 0320 	add.w	r3, r7, #32
 800088e:	2230      	movs	r2, #48	; 0x30
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f006 ff93 	bl	80077be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	f107 030c 	add.w	r3, r7, #12
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	4b28      	ldr	r3, [pc, #160]	; (8000950 <SystemClock_Config+0xcc>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b0:	4a27      	ldr	r2, [pc, #156]	; (8000950 <SystemClock_Config+0xcc>)
 80008b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b6:	6413      	str	r3, [r2, #64]	; 0x40
 80008b8:	4b25      	ldr	r3, [pc, #148]	; (8000950 <SystemClock_Config+0xcc>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c4:	2300      	movs	r3, #0
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	4b22      	ldr	r3, [pc, #136]	; (8000954 <SystemClock_Config+0xd0>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a21      	ldr	r2, [pc, #132]	; (8000954 <SystemClock_Config+0xd0>)
 80008ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d2:	6013      	str	r3, [r2, #0]
 80008d4:	4b1f      	ldr	r3, [pc, #124]	; (8000954 <SystemClock_Config+0xd0>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008e0:	2301      	movs	r3, #1
 80008e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ea:	2302      	movs	r3, #2
 80008ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008f4:	2308      	movs	r3, #8
 80008f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008f8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008fe:	2302      	movs	r3, #2
 8000900:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000902:	2307      	movs	r3, #7
 8000904:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000906:	f107 0320 	add.w	r3, r7, #32
 800090a:	4618      	mov	r0, r3
 800090c:	f004 f920 	bl	8004b50 <HAL_RCC_OscConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000916:	f000 f9a7 	bl	8000c68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091a:	230f      	movs	r3, #15
 800091c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091e:	2302      	movs	r3, #2
 8000920:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000926:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800092a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800092c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000930:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000932:	f107 030c 	add.w	r3, r7, #12
 8000936:	2105      	movs	r1, #5
 8000938:	4618      	mov	r0, r3
 800093a:	f004 fb81 	bl	8005040 <HAL_RCC_ClockConfig>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000944:	f000 f990 	bl	8000c68 <Error_Handler>
  }
}
 8000948:	bf00      	nop
 800094a:	3750      	adds	r7, #80	; 0x50
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40023800 	.word	0x40023800
 8000954:	40007000 	.word	0x40007000

08000958 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <MX_I2C1_Init+0x50>)
 800095e:	4a13      	ldr	r2, [pc, #76]	; (80009ac <MX_I2C1_Init+0x54>)
 8000960:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_I2C1_Init+0x50>)
 8000964:	4a12      	ldr	r2, [pc, #72]	; (80009b0 <MX_I2C1_Init+0x58>)
 8000966:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_I2C1_Init+0x50>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_I2C1_Init+0x50>)
 8000970:	2200      	movs	r2, #0
 8000972:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_I2C1_Init+0x50>)
 8000976:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800097a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <MX_I2C1_Init+0x50>)
 800097e:	2200      	movs	r2, #0
 8000980:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_I2C1_Init+0x50>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000988:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <MX_I2C1_Init+0x50>)
 800098a:	2200      	movs	r2, #0
 800098c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_I2C1_Init+0x50>)
 8000990:	2200      	movs	r2, #0
 8000992:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000994:	4804      	ldr	r0, [pc, #16]	; (80009a8 <MX_I2C1_Init+0x50>)
 8000996:	f003 ff97 	bl	80048c8 <HAL_I2C_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009a0:	f000 f962 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000498 	.word	0x20000498
 80009ac:	40005400 	.word	0x40005400
 80009b0:	00061a80 	.word	0x00061a80

080009b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b096      	sub	sp, #88	; 0x58
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
 80009e0:	611a      	str	r2, [r3, #16]
 80009e2:	615a      	str	r2, [r3, #20]
 80009e4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	2220      	movs	r2, #32
 80009ea:	2100      	movs	r1, #0
 80009ec:	4618      	mov	r0, r3
 80009ee:	f006 fee6 	bl	80077be <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009f2:	4b3e      	ldr	r3, [pc, #248]	; (8000aec <MX_TIM1_Init+0x138>)
 80009f4:	4a3e      	ldr	r2, [pc, #248]	; (8000af0 <MX_TIM1_Init+0x13c>)
 80009f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 80009f8:	4b3c      	ldr	r3, [pc, #240]	; (8000aec <MX_TIM1_Init+0x138>)
 80009fa:	22a7      	movs	r2, #167	; 0xa7
 80009fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fe:	4b3b      	ldr	r3, [pc, #236]	; (8000aec <MX_TIM1_Init+0x138>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000a04:	4b39      	ldr	r3, [pc, #228]	; (8000aec <MX_TIM1_Init+0x138>)
 8000a06:	2263      	movs	r2, #99	; 0x63
 8000a08:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a0a:	4b38      	ldr	r3, [pc, #224]	; (8000aec <MX_TIM1_Init+0x138>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a10:	4b36      	ldr	r3, [pc, #216]	; (8000aec <MX_TIM1_Init+0x138>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a16:	4b35      	ldr	r3, [pc, #212]	; (8000aec <MX_TIM1_Init+0x138>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a1c:	4833      	ldr	r0, [pc, #204]	; (8000aec <MX_TIM1_Init+0x138>)
 8000a1e:	f004 fd2f 	bl	8005480 <HAL_TIM_Base_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000a28:	f000 f91e 	bl	8000c68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a30:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a36:	4619      	mov	r1, r3
 8000a38:	482c      	ldr	r0, [pc, #176]	; (8000aec <MX_TIM1_Init+0x138>)
 8000a3a:	f004 ff53 	bl	80058e4 <HAL_TIM_ConfigClockSource>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000a44:	f000 f910 	bl	8000c68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a48:	4828      	ldr	r0, [pc, #160]	; (8000aec <MX_TIM1_Init+0x138>)
 8000a4a:	f004 fd68 	bl	800551e <HAL_TIM_PWM_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000a54:	f000 f908 	bl	8000c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a64:	4619      	mov	r1, r3
 8000a66:	4821      	ldr	r0, [pc, #132]	; (8000aec <MX_TIM1_Init+0x138>)
 8000a68:	f005 fb14 	bl	8006094 <HAL_TIMEx_MasterConfigSynchronization>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000a72:	f000 f8f9 	bl	8000c68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a76:	2360      	movs	r3, #96	; 0x60
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a82:	2300      	movs	r3, #0
 8000a84:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a86:	2300      	movs	r3, #0
 8000a88:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a96:	2200      	movs	r2, #0
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4814      	ldr	r0, [pc, #80]	; (8000aec <MX_TIM1_Init+0x138>)
 8000a9c:	f004 fe60 	bl	8005760 <HAL_TIM_PWM_ConfigChannel>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000aa6:	f000 f8df 	bl	8000c68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000abe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	4619      	mov	r1, r3
 8000acc:	4807      	ldr	r0, [pc, #28]	; (8000aec <MX_TIM1_Init+0x138>)
 8000ace:	f005 fb5d 	bl	800618c <HAL_TIMEx_ConfigBreakDeadTime>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000ad8:	f000 f8c6 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000adc:	4803      	ldr	r0, [pc, #12]	; (8000aec <MX_TIM1_Init+0x138>)
 8000ade:	f002 fdb3 	bl	8003648 <HAL_TIM_MspPostInit>

}
 8000ae2:	bf00      	nop
 8000ae4:	3758      	adds	r7, #88	; 0x58
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	200004ec 	.word	0x200004ec
 8000af0:	40010000 	.word	0x40010000

08000af4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000afa:	4a12      	ldr	r2, [pc, #72]	; (8000b44 <MX_USART2_UART_Init+0x50>)
 8000afc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b2a:	4805      	ldr	r0, [pc, #20]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b2c:	f005 fb80 	bl	8006230 <HAL_UART_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b36:	f000 f897 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000594 	.word	0x20000594
 8000b44:	40004400 	.word	0x40004400

08000b48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <MX_DMA_Init+0x78>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a1a      	ldr	r2, [pc, #104]	; (8000bc0 <MX_DMA_Init+0x78>)
 8000b58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b18      	ldr	r3, [pc, #96]	; (8000bc0 <MX_DMA_Init+0x78>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	603b      	str	r3, [r7, #0]
 8000b6e:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <MX_DMA_Init+0x78>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a13      	ldr	r2, [pc, #76]	; (8000bc0 <MX_DMA_Init+0x78>)
 8000b74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <MX_DMA_Init+0x78>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2100      	movs	r1, #0
 8000b8a:	2010      	movs	r0, #16
 8000b8c:	f003 f8ad 	bl	8003cea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000b90:	2010      	movs	r0, #16
 8000b92:	f003 f8c6 	bl	8003d22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2100      	movs	r1, #0
 8000b9a:	2011      	movs	r0, #17
 8000b9c:	f003 f8a5 	bl	8003cea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000ba0:	2011      	movs	r0, #17
 8000ba2:	f003 f8be 	bl	8003d22 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2100      	movs	r1, #0
 8000baa:	2039      	movs	r0, #57	; 0x39
 8000bac:	f003 f89d 	bl	8003cea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000bb0:	2039      	movs	r0, #57	; 0x39
 8000bb2:	f003 f8b6 	bl	8003d22 <HAL_NVIC_EnableIRQ>

}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40023800 	.word	0x40023800

08000bc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b087      	sub	sp, #28
 8000bc8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]
 8000bce:	4b25      	ldr	r3, [pc, #148]	; (8000c64 <MX_GPIO_Init+0xa0>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a24      	ldr	r2, [pc, #144]	; (8000c64 <MX_GPIO_Init+0xa0>)
 8000bd4:	f043 0304 	orr.w	r3, r3, #4
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b22      	ldr	r3, [pc, #136]	; (8000c64 <MX_GPIO_Init+0xa0>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0304 	and.w	r3, r3, #4
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	4b1e      	ldr	r3, [pc, #120]	; (8000c64 <MX_GPIO_Init+0xa0>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a1d      	ldr	r2, [pc, #116]	; (8000c64 <MX_GPIO_Init+0xa0>)
 8000bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <MX_GPIO_Init+0xa0>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <MX_GPIO_Init+0xa0>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a16      	ldr	r2, [pc, #88]	; (8000c64 <MX_GPIO_Init+0xa0>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <MX_GPIO_Init+0xa0>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <MX_GPIO_Init+0xa0>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a0f      	ldr	r2, [pc, #60]	; (8000c64 <MX_GPIO_Init+0xa0>)
 8000c28:	f043 0310 	orr.w	r3, r3, #16
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <MX_GPIO_Init+0xa0>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0310 	and.w	r3, r3, #16
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <MX_GPIO_Init+0xa0>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a08      	ldr	r2, [pc, #32]	; (8000c64 <MX_GPIO_Init+0xa0>)
 8000c44:	f043 0302 	orr.w	r3, r3, #2
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <MX_GPIO_Init+0xa0>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c56:	bf00      	nop
 8000c58:	371c      	adds	r7, #28
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	40023800 	.word	0x40023800

08000c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c6c:	b672      	cpsid	i
}
 8000c6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <Error_Handler+0x8>
	...

08000c74 <_ZN13STM32HardwareC1Ev>:
// Create Serial Buffer with UART2:
extern BufferedSerial buff_serial;

class STM32Hardware {
 public:
  STM32Hardware() : serial(&buff_serial) {}
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <_ZN13STM32HardwareC1Ev+0x1c>)
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4618      	mov	r0, r3
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	20000088 	.word	0x20000088

08000c94 <_ZN13STM32Hardware4initEv>:

  // Any initialization code necessary to use the serial port:
  void init() { serial->init(); }
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fc37 	bl	8000514 <_ZN14BufferedSerial4initEv>
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <_ZN13STM32Hardware4readEv>:

  // Read a byte from the serial port. -1 = failure:
  int read() { return serial->read(); }
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fc35 	bl	800052a <_ZN14BufferedSerial4readEv>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <_ZN13STM32Hardware5writeEPhi>:

  // Write data to the connection to ROS:
  void write(uint8_t* data, int length) { serial->write(data, length); }
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b084      	sub	sp, #16
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	60f8      	str	r0, [r7, #12]
 8000cd2:	60b9      	str	r1, [r7, #8]
 8000cd4:	607a      	str	r2, [r7, #4]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	68b9      	ldr	r1, [r7, #8]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fc59 	bl	8000596 <_ZN14BufferedSerial5writeEPKhi>
 8000ce4:	bf00      	nop
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <_ZN13STM32Hardware4timeEv>:

  // Returns milliseconds since start of program:
  unsigned long time() { return HAL_GetTick(); };
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	f002 feee 	bl	8003ad4 <HAL_GetTick>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <_ZN3ros3Msg19serializeAvrFloat64EPhf>:
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 8000d02:	b480      	push	{r7}
 8000d04:	b087      	sub	sp, #28
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
 8000d0a:	ed87 0a00 	vstr	s0, [r7]
 8000d0e:	683b      	ldr	r3, [r7, #0]
  {
    int32_t val;
    memcpy(&val, &f, sizeof(val));
 8000d10:	60fb      	str	r3, [r7, #12]

    int16_t exp = ((val >> 23) & 255);
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	15db      	asrs	r3, r3, #23
 8000d16:	b21b      	sxth	r3, r3
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	82fb      	strh	r3, [r7, #22]
    uint32_t mantissa = val & 0x7FFFFF;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8000d22:	613b      	str	r3, [r7, #16]

    if (exp == 255)
 8000d24:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000d28:	2bff      	cmp	r3, #255	; 0xff
 8000d2a:	d103      	bne.n	8000d34 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x32>
    {
      exp = 2047; // Special value for NaN, infinity etc.
 8000d2c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d30:	82fb      	strh	r3, [r7, #22]
 8000d32:	e02a      	b.n	8000d8a <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else if (exp != 0)
 8000d34:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d005      	beq.n	8000d48 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x46>
    {
      exp += 1023 - 127; // Normal case
 8000d3c:	8afb      	ldrh	r3, [r7, #22]
 8000d3e:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	82fb      	strh	r3, [r7, #22]
 8000d46:	e020      	b.n	8000d8a <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else if (!mantissa)
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d102      	bne.n	8000d54 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x52>
    {
      exp = 0; // Zero
 8000d4e:	2300      	movs	r3, #0
 8000d50:	82fb      	strh	r3, [r7, #22]
 8000d52:	e01a      	b.n	8000d8a <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else
    {
      // Denormalized value in float, will fit as normalized value in double
      exp += 1023 - 127;
 8000d54:	8afb      	ldrh	r3, [r7, #22]
 8000d56:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	82fb      	strh	r3, [r7, #22]
      mantissa <<= 1;
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	613b      	str	r3, [r7, #16]
      while (!(mantissa & 0x800000))
 8000d64:	e008      	b.n	8000d78 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x76>
      {
          mantissa <<= 1;
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	613b      	str	r3, [r7, #16]
          exp--;
 8000d6c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	3b01      	subs	r3, #1
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	82fb      	strh	r3, [r7, #22]
      while (!(mantissa & 0x800000))
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d0f1      	beq.n	8000d66 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x64>
      }
      mantissa &= 0x7FFFFF;
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8000d88:	613b      	str	r3, [r7, #16]
    }

    *(outbuffer++) = 0;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	1c5a      	adds	r2, r3, #1
 8000d8e:	607a      	str	r2, [r7, #4]
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	1c5a      	adds	r2, r3, #1
 8000d98:	607a      	str	r2, [r7, #4]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	1c5a      	adds	r2, r3, #1
 8000da2:	607a      	str	r2, [r7, #4]
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa << 5) & 0xff;
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	1c59      	adds	r1, r3, #1
 8000db0:	6079      	str	r1, [r7, #4]
 8000db2:	0152      	lsls	r2, r2, #5
 8000db4:	b2d2      	uxtb	r2, r2
 8000db6:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa >> 3) & 0xff;
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	08d9      	lsrs	r1, r3, #3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	1c5a      	adds	r2, r3, #1
 8000dc0:	607a      	str	r2, [r7, #4]
 8000dc2:	b2ca      	uxtb	r2, r1
 8000dc4:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa >> 11) & 0xff;
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	0ad9      	lsrs	r1, r3, #11
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	1c5a      	adds	r2, r3, #1
 8000dce:	607a      	str	r2, [r7, #4]
 8000dd0:	b2ca      	uxtb	r2, r1
 8000dd2:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((mantissa >> 19) & 0x0F);
 8000dd4:	8afb      	ldrh	r3, [r7, #22]
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	011b      	lsls	r3, r3, #4
 8000dda:	b2d9      	uxtb	r1, r3
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	0cdb      	lsrs	r3, r3, #19
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	1c58      	adds	r0, r3, #1
 8000dec:	6078      	str	r0, [r7, #4]
 8000dee:	430a      	orrs	r2, r1
 8000df0:	b2d2      	uxtb	r2, r2
 8000df2:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (exp >> 4) & 0x7F;
 8000df4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000df8:	111b      	asrs	r3, r3, #4
 8000dfa:	b21b      	sxth	r3, r3
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	1c59      	adds	r1, r3, #1
 8000e02:	6079      	str	r1, [r7, #4]
 8000e04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	701a      	strb	r2, [r3, #0]

    // Mark negative bit as necessary.
    if (f < 0)
 8000e0c:	edd7 7a00 	vldr	s15, [r7]
 8000e10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e18:	d508      	bpl.n	8000e2c <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x12a>
    {
      *(outbuffer - 1) |= 0x80;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	781a      	ldrb	r2, [r3, #0]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000e28:	b2d2      	uxtb	r2, r2
 8000e2a:	701a      	strb	r2, [r3, #0]
    }

    return 8;
 8000e2c:	2308      	movs	r3, #8
  }
 8000e2e:	4618      	mov	r0, r3
 8000e30:	371c      	adds	r7, #28
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>:
   * @param[in] inbuffer pointer for buffer to deserialize from.
   * @param[out] f pointer to place the deserialized value in.
   *
   * @return number of bytes to advance the buffer pointer.
   */
  static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 8000e3a:	b480      	push	{r7}
 8000e3c:	b087      	sub	sp, #28
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
 8000e42:	6039      	str	r1, [r7, #0]
  {
    int16_t exp;
    uint32_t mantissa;

    // Skip lowest 24 bits
    inbuffer += 3;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3303      	adds	r3, #3
 8000e48:	607b      	str	r3, [r7, #4]

    // Copy truncated mantissa.
    mantissa = ((uint32_t)(*(inbuffer++)) >> 4 & 0x0F);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	1c5a      	adds	r2, r3, #1
 8000e4e:	607a      	str	r2, [r7, #4]
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	091b      	lsrs	r3, r3, #4
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	f003 030f 	and.w	r3, r3, #15
 8000e5a:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*(inbuffer++)) & 0xff) << 4;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	1c5a      	adds	r2, r3, #1
 8000e60:	607a      	str	r2, [r7, #4]
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	011b      	lsls	r3, r3, #4
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*(inbuffer++)) & 0xff) << 12;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	1c5a      	adds	r2, r3, #1
 8000e70:	607a      	str	r2, [r7, #4]
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	031b      	lsls	r3, r3, #12
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*inbuffer) & 0x0f) << 20;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	051b      	lsls	r3, r3, #20
 8000e82:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]

    // Copy exponent.
    exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	1c5a      	adds	r2, r3, #1
 8000e90:	607a      	str	r2, [r7, #4]
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	091b      	lsrs	r3, r3, #4
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	b21b      	sxth	r3, r3
 8000e9a:	f003 030f 	and.w	r3, r3, #15
 8000e9e:	82fb      	strh	r3, [r7, #22]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	011b      	lsls	r3, r3, #4
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	8afb      	ldrh	r3, [r7, #22]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	82fb      	strh	r3, [r7, #22]

    if (exp == 2047)
 8000eb8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ebc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d102      	bne.n	8000eca <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0x90>
    {
      exp = 255; // NaN, infinity etc.
 8000ec4:	23ff      	movs	r3, #255	; 0xff
 8000ec6:	82fb      	strh	r3, [r7, #22]
 8000ec8:	e02c      	b.n	8000f24 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else if (exp - 1023 > 127)
 8000eca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ece:	f240 427e 	movw	r2, #1150	; 0x47e
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	dd04      	ble.n	8000ee0 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xa6>
    {
      exp = 255;
 8000ed6:	23ff      	movs	r3, #255	; 0xff
 8000ed8:	82fb      	strh	r3, [r7, #22]
      mantissa = 0; // Too large for float, convert to infinity
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	e021      	b.n	8000f24 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else if (exp - 1023 >= -126)
 8000ee0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ee4:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000ee8:	dd05      	ble.n	8000ef6 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xbc>
    {
      exp -= 1023 - 127; // Normal case
 8000eea:	8afb      	ldrh	r3, [r7, #22]
 8000eec:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	82fb      	strh	r3, [r7, #22]
 8000ef4:	e016      	b.n	8000f24 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else if (exp - 1023 < -150)
 8000ef6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000efa:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 8000efe:	dc02      	bgt.n	8000f06 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xcc>
    {
      exp = 0; // Too small or zero
 8000f00:	2300      	movs	r3, #0
 8000f02:	82fb      	strh	r3, [r7, #22]
 8000f04:	e00e      	b.n	8000f24 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else
    {
      // Have to convert to denormalized representation for float
      mantissa |= 0x1000000;
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f0c:	613b      	str	r3, [r7, #16]
      mantissa >>= ((-126 + 1023) - exp);
 8000f0e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f12:	f5c3 7360 	rsb	r3, r3, #896	; 0x380
 8000f16:	3301      	adds	r3, #1
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f1e:	613b      	str	r3, [r7, #16]
      exp = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	82fb      	strh	r3, [r7, #22]
    }

    // Round off mantissa
    if (mantissa != 0xFFFFFF)
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d002      	beq.n	8000f34 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xfa>
      mantissa += 1;
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	3301      	adds	r3, #1
 8000f32:	613b      	str	r3, [r7, #16]

    mantissa >>= 1;
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	085b      	lsrs	r3, r3, #1
 8000f38:	613b      	str	r3, [r7, #16]

    // Put mantissa and exponent into place
    uint32_t val = mantissa;
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	60fb      	str	r3, [r7, #12]
    val |= static_cast<uint32_t>(exp) << 23;
 8000f3e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f42:	05da      	lsls	r2, r3, #23
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	60fb      	str	r3, [r7, #12]

    // Copy negative sign.
    val |= (static_cast<uint32_t>(*(inbuffer++)) & 0x80) << 24;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	1c5a      	adds	r2, r3, #1
 8000f4e:	607a      	str	r2, [r7, #4]
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	061b      	lsls	r3, r3, #24
 8000f54:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	68fa      	ldr	r2, [r7, #12]

    memcpy(f, &val, sizeof(val));
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	601a      	str	r2, [r3, #0]
    return 8;
 8000f64:	2308      	movs	r3, #8
  }
 8000f66:	4618      	mov	r0, r3
 8000f68:	371c      	adds	r7, #28
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000f72:	b480      	push	{r7}
 8000f74:	b083      	sub	sp, #12
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <_ZN3ros3MsgC1Ev>:
class Msg
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <_ZN3ros3MsgC1Ev+0x1c>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	08007d04 	.word	0x08007d04

08000fb4 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
      data()
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff ffe8 	bl	8000f94 <_ZN3ros3MsgC1Ev>
 8000fc4:	4a06      	ldr	r2, [pc, #24]	; (8000fe0 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff ffcf 	bl	8000f72 <_ZN3ros4TimeC1Ev>
    {
    }
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	08007cec 	.word	0x08007cec

08000fe4 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6859      	ldr	r1, [r3, #4]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	683a      	ldr	r2, [r7, #0]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	b2ca      	uxtb	r2, r1
 8000ffe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	0a19      	lsrs	r1, r3, #8
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3301      	adds	r3, #1
 800100a:	683a      	ldr	r2, [r7, #0]
 800100c:	4413      	add	r3, r2
 800100e:	b2ca      	uxtb	r2, r1
 8001010:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	0c19      	lsrs	r1, r3, #16
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	3302      	adds	r3, #2
 800101c:	683a      	ldr	r2, [r7, #0]
 800101e:	4413      	add	r3, r2
 8001020:	b2ca      	uxtb	r2, r1
 8001022:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	0e19      	lsrs	r1, r3, #24
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	3303      	adds	r3, #3
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	4413      	add	r3, r2
 8001032:	b2ca      	uxtb	r2, r1
 8001034:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	3304      	adds	r3, #4
 800103a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6899      	ldr	r1, [r3, #8]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	4413      	add	r3, r2
 8001046:	b2ca      	uxtb	r2, r1
 8001048:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	0a19      	lsrs	r1, r3, #8
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	3301      	adds	r3, #1
 8001054:	683a      	ldr	r2, [r7, #0]
 8001056:	4413      	add	r3, r2
 8001058:	b2ca      	uxtb	r2, r1
 800105a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	0c19      	lsrs	r1, r3, #16
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	3302      	adds	r3, #2
 8001066:	683a      	ldr	r2, [r7, #0]
 8001068:	4413      	add	r3, r2
 800106a:	b2ca      	uxtb	r2, r1
 800106c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	0e19      	lsrs	r1, r3, #24
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	3303      	adds	r3, #3
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	4413      	add	r3, r2
 800107c:	b2ca      	uxtb	r2, r1
 800107e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	3304      	adds	r3, #4
 8001084:	60fb      	str	r3, [r7, #12]
      return offset;
 8001086:	68fb      	ldr	r3, [r7, #12]
    }
 8001088:	4618      	mov	r0, r3
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	683a      	ldr	r2, [r7, #0]
 80010a6:	4413      	add	r3, r2
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685a      	ldr	r2, [r3, #4]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	3301      	adds	r3, #1
 80010b8:	6839      	ldr	r1, [r7, #0]
 80010ba:	440b      	add	r3, r1
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	021b      	lsls	r3, r3, #8
 80010c0:	431a      	orrs	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685a      	ldr	r2, [r3, #4]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	3302      	adds	r3, #2
 80010ce:	6839      	ldr	r1, [r7, #0]
 80010d0:	440b      	add	r3, r1
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	041b      	lsls	r3, r3, #16
 80010d6:	431a      	orrs	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685a      	ldr	r2, [r3, #4]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	3303      	adds	r3, #3
 80010e4:	6839      	ldr	r1, [r7, #0]
 80010e6:	440b      	add	r3, r1
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	061b      	lsls	r3, r3, #24
 80010ec:	431a      	orrs	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	3304      	adds	r3, #4
 80010f6:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	4413      	add	r3, r2
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	689a      	ldr	r2, [r3, #8]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	3301      	adds	r3, #1
 800110e:	6839      	ldr	r1, [r7, #0]
 8001110:	440b      	add	r3, r1
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	021b      	lsls	r3, r3, #8
 8001116:	431a      	orrs	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	3302      	adds	r3, #2
 8001124:	6839      	ldr	r1, [r7, #0]
 8001126:	440b      	add	r3, r1
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	041b      	lsls	r3, r3, #16
 800112c:	431a      	orrs	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	3303      	adds	r3, #3
 800113a:	6839      	ldr	r1, [r7, #0]
 800113c:	440b      	add	r3, r1
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	061b      	lsls	r3, r3, #24
 8001142:	431a      	orrs	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	3304      	adds	r3, #4
 800114c:	60fb      	str	r3, [r7, #12]
     return offset;
 800114e:	68fb      	ldr	r3, [r7, #12]
    }
 8001150:	4618      	mov	r0, r3
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	4b03      	ldr	r3, [pc, #12]	; (8001174 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001166:	4618      	mov	r0, r3
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	08007924 	.word	0x08007924

08001178 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	4b03      	ldr	r3, [pc, #12]	; (8001190 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001182:	4618      	mov	r0, r3
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	08007934 	.word	0x08007934

08001194 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff fef8 	bl	8000f94 <_ZN3ros3MsgC1Ev>
 80011a4:	4a0b      	ldr	r2, [pc, #44]	; (80011d4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	601a      	str	r2, [r3, #0]
      topic_id(0),
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4a09      	ldr	r2, [pc, #36]	; (80011d8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80011b4:	609a      	str	r2, [r3, #8]
      message_type(""),
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a07      	ldr	r2, [pc, #28]	; (80011d8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80011ba:	60da      	str	r2, [r3, #12]
      md5sum(""),
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a06      	ldr	r2, [pc, #24]	; (80011d8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80011c0:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	615a      	str	r2, [r3, #20]
    {
    }
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	08007cd4 	.word	0x08007cd4
 80011d8:	08007958 	.word	0x08007958

080011dc <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80011dc:	b580      	push	{r7, lr}
 80011de:	b088      	sub	sp, #32
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	8899      	ldrh	r1, [r3, #4]
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	4413      	add	r3, r2
 80011f4:	b2ca      	uxtb	r2, r1
 80011f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	889b      	ldrh	r3, [r3, #4]
 80011fc:	0a1b      	lsrs	r3, r3, #8
 80011fe:	b299      	uxth	r1, r3
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	3301      	adds	r3, #1
 8001204:	683a      	ldr	r2, [r7, #0]
 8001206:	4413      	add	r3, r2
 8001208:	b2ca      	uxtb	r2, r1
 800120a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	3302      	adds	r3, #2
 8001210:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	4618      	mov	r0, r3
 8001218:	f7fe ffd6 	bl	80001c8 <strlen>
 800121c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	4413      	add	r3, r2
 8001224:	69b9      	ldr	r1, [r7, #24]
 8001226:	4618      	mov	r0, r3
 8001228:	f001 fb76 	bl	8002918 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	3304      	adds	r3, #4
 8001230:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	18d0      	adds	r0, r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4619      	mov	r1, r3
 8001240:	f006 fb02 	bl	8007848 <memcpy>
      offset += length_topic_name;
 8001244:	69fa      	ldr	r2, [r7, #28]
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	4413      	add	r3, r2
 800124a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	4618      	mov	r0, r3
 8001252:	f7fe ffb9 	bl	80001c8 <strlen>
 8001256:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	683a      	ldr	r2, [r7, #0]
 800125c:	4413      	add	r3, r2
 800125e:	6979      	ldr	r1, [r7, #20]
 8001260:	4618      	mov	r0, r3
 8001262:	f001 fb59 	bl	8002918 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3304      	adds	r3, #4
 800126a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	18d0      	adds	r0, r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	4619      	mov	r1, r3
 800127a:	f006 fae5 	bl	8007848 <memcpy>
      offset += length_message_type;
 800127e:	69fa      	ldr	r2, [r7, #28]
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	4413      	add	r3, r2
 8001284:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	691b      	ldr	r3, [r3, #16]
 800128a:	4618      	mov	r0, r3
 800128c:	f7fe ff9c 	bl	80001c8 <strlen>
 8001290:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	4413      	add	r3, r2
 8001298:	6939      	ldr	r1, [r7, #16]
 800129a:	4618      	mov	r0, r3
 800129c:	f001 fb3c 	bl	8002918 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	3304      	adds	r3, #4
 80012a4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	18d0      	adds	r0, r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4619      	mov	r1, r3
 80012b4:	f006 fac8 	bl	8007848 <memcpy>
      offset += length_md5sum;
 80012b8:	69fa      	ldr	r2, [r7, #28]
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	4413      	add	r3, r2
 80012be:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80012c6:	68f9      	ldr	r1, [r7, #12]
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	683a      	ldr	r2, [r7, #0]
 80012cc:	4413      	add	r3, r2
 80012ce:	b2ca      	uxtb	r2, r1
 80012d0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	0a19      	lsrs	r1, r3, #8
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3301      	adds	r3, #1
 80012da:	683a      	ldr	r2, [r7, #0]
 80012dc:	4413      	add	r3, r2
 80012de:	b2ca      	uxtb	r2, r1
 80012e0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	0c19      	lsrs	r1, r3, #16
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3302      	adds	r3, #2
 80012ea:	683a      	ldr	r2, [r7, #0]
 80012ec:	4413      	add	r3, r2
 80012ee:	b2ca      	uxtb	r2, r1
 80012f0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	0e19      	lsrs	r1, r3, #24
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3303      	adds	r3, #3
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	4413      	add	r3, r2
 80012fe:	b2ca      	uxtb	r2, r1
 8001300:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3304      	adds	r3, #4
 8001306:	61fb      	str	r3, [r7, #28]
      return offset;
 8001308:	69fb      	ldr	r3, [r7, #28]
    }
 800130a:	4618      	mov	r0, r3
 800130c:	3720      	adds	r7, #32
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001312:	b580      	push	{r7, lr}
 8001314:	b08a      	sub	sp, #40	; 0x28
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
 800131a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	4413      	add	r3, r2
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	b29a      	uxth	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	889b      	ldrh	r3, [r3, #4]
 8001332:	b21a      	sxth	r2, r3
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	3301      	adds	r3, #1
 8001338:	6839      	ldr	r1, [r7, #0]
 800133a:	440b      	add	r3, r1
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	021b      	lsls	r3, r3, #8
 8001340:	b21b      	sxth	r3, r3
 8001342:	4313      	orrs	r3, r2
 8001344:	b21b      	sxth	r3, r3
 8001346:	b29a      	uxth	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	3302      	adds	r3, #2
 8001350:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	683a      	ldr	r2, [r7, #0]
 8001356:	441a      	add	r2, r3
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	4611      	mov	r1, r2
 800135e:	4618      	mov	r0, r3
 8001360:	f001 faf9 	bl	8002956 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	3304      	adds	r3, #4
 8001368:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
 800136e:	e00b      	b.n	8001388 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	441a      	add	r2, r3
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	3b01      	subs	r3, #1
 800137a:	6839      	ldr	r1, [r7, #0]
 800137c:	440b      	add	r3, r1
 800137e:	7812      	ldrb	r2, [r2, #0]
 8001380:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	3301      	adds	r3, #1
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	4413      	add	r3, r2
 800138e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001390:	429a      	cmp	r2, r3
 8001392:	d3ed      	bcc.n	8001370 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	4413      	add	r3, r2
 800139a:	3b01      	subs	r3, #1
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	4413      	add	r3, r2
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	441a      	add	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	4413      	add	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	441a      	add	r2, r3
 80013be:	f107 0310 	add.w	r3, r7, #16
 80013c2:	4611      	mov	r1, r2
 80013c4:	4618      	mov	r0, r3
 80013c6:	f001 fac6 	bl	8002956 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	3304      	adds	r3, #4
 80013ce:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	623b      	str	r3, [r7, #32]
 80013d4:	e00b      	b.n	80013ee <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	6a3b      	ldr	r3, [r7, #32]
 80013da:	441a      	add	r2, r3
 80013dc:	6a3b      	ldr	r3, [r7, #32]
 80013de:	3b01      	subs	r3, #1
 80013e0:	6839      	ldr	r1, [r7, #0]
 80013e2:	440b      	add	r3, r1
 80013e4:	7812      	ldrb	r2, [r2, #0]
 80013e6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80013e8:	6a3b      	ldr	r3, [r7, #32]
 80013ea:	3301      	adds	r3, #1
 80013ec:	623b      	str	r3, [r7, #32]
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	4413      	add	r3, r2
 80013f4:	6a3a      	ldr	r2, [r7, #32]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d3ed      	bcc.n	80013d6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	4413      	add	r3, r2
 8001400:	3b01      	subs	r3, #1
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	4413      	add	r3, r2
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	3b01      	subs	r3, #1
 800140e:	683a      	ldr	r2, [r7, #0]
 8001410:	441a      	add	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	4413      	add	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	441a      	add	r2, r3
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	4611      	mov	r1, r2
 800142a:	4618      	mov	r0, r3
 800142c:	f001 fa93 	bl	8002956 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	3304      	adds	r3, #4
 8001434:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	61fb      	str	r3, [r7, #28]
 800143a:	e00b      	b.n	8001454 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	441a      	add	r2, r3
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3b01      	subs	r3, #1
 8001446:	6839      	ldr	r1, [r7, #0]
 8001448:	440b      	add	r3, r1
 800144a:	7812      	ldrb	r2, [r2, #0]
 800144c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3301      	adds	r3, #1
 8001452:	61fb      	str	r3, [r7, #28]
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	4413      	add	r3, r2
 800145a:	69fa      	ldr	r2, [r7, #28]
 800145c:	429a      	cmp	r2, r3
 800145e:	d3ed      	bcc.n	800143c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4413      	add	r3, r2
 8001466:	3b01      	subs	r3, #1
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	4413      	add	r3, r2
 800146c:	2200      	movs	r2, #0
 800146e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	3b01      	subs	r3, #1
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	441a      	add	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4413      	add	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	6839      	ldr	r1, [r7, #0]
 800148e:	440a      	add	r2, r1
 8001490:	7812      	ldrb	r2, [r2, #0]
 8001492:	4313      	orrs	r3, r2
 8001494:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	3301      	adds	r3, #1
 800149c:	6839      	ldr	r1, [r7, #0]
 800149e:	440b      	add	r3, r1
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	021b      	lsls	r3, r3, #8
 80014a4:	4313      	orrs	r3, r2
 80014a6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80014a8:	68ba      	ldr	r2, [r7, #8]
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	3302      	adds	r3, #2
 80014ae:	6839      	ldr	r1, [r7, #0]
 80014b0:	440b      	add	r3, r1
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	041b      	lsls	r3, r3, #16
 80014b6:	4313      	orrs	r3, r2
 80014b8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	3303      	adds	r3, #3
 80014c0:	6839      	ldr	r1, [r7, #0]
 80014c2:	440b      	add	r3, r1
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	061b      	lsls	r3, r3, #24
 80014c8:	4313      	orrs	r3, r2
 80014ca:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80014cc:	68ba      	ldr	r2, [r7, #8]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	3304      	adds	r3, #4
 80014d6:	61bb      	str	r3, [r7, #24]
     return offset;
 80014d8:	69bb      	ldr	r3, [r7, #24]
    }
 80014da:	4618      	mov	r0, r3
 80014dc:	3728      	adds	r7, #40	; 0x28
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	4b03      	ldr	r3, [pc, #12]	; (80014fc <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80014ee:	4618      	mov	r0, r3
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	0800795c 	.word	0x0800795c

08001500 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	4b03      	ldr	r3, [pc, #12]	; (8001518 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800150a:	4618      	mov	r0, r3
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	08007978 	.word	0x08007978

0800151c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fd34 	bl	8000f94 <_ZN3ros3MsgC1Ev>
 800152c:	4a06      	ldr	r2, [pc, #24]	; (8001548 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	601a      	str	r2, [r3, #0]
      level(0),
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	711a      	strb	r2, [r3, #4]
      msg("")
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a04      	ldr	r2, [pc, #16]	; (800154c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 800153c:	609a      	str	r2, [r3, #8]
    {
    }
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	08007cbc 	.word	0x08007cbc
 800154c:	08007958 	.word	0x08007958

08001550 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	4413      	add	r3, r2
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	7912      	ldrb	r2, [r2, #4]
 8001568:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	3301      	adds	r3, #1
 800156e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	4618      	mov	r0, r3
 8001576:	f7fe fe27 	bl	80001c8 <strlen>
 800157a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	4413      	add	r3, r2
 8001582:	68b9      	ldr	r1, [r7, #8]
 8001584:	4618      	mov	r0, r3
 8001586:	f001 f9c7 	bl	8002918 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	3304      	adds	r3, #4
 800158e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	18d0      	adds	r0, r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	4619      	mov	r1, r3
 800159e:	f006 f953 	bl	8007848 <memcpy>
      offset += length_msg;
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	4413      	add	r3, r2
 80015a8:	60fb      	str	r3, [r7, #12]
      return offset;
 80015aa:	68fb      	ldr	r3, [r7, #12]
    }
 80015ac:	4618      	mov	r0, r3
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	4413      	add	r3, r2
 80015c8:	781a      	ldrb	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	3301      	adds	r3, #1
 80015d2:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	441a      	add	r2, r3
 80015da:	f107 030c 	add.w	r3, r7, #12
 80015de:	4611      	mov	r1, r2
 80015e0:	4618      	mov	r0, r3
 80015e2:	f001 f9b8 	bl	8002956 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	3304      	adds	r3, #4
 80015ea:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	617b      	str	r3, [r7, #20]
 80015f0:	e00b      	b.n	800160a <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	441a      	add	r2, r3
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	6839      	ldr	r1, [r7, #0]
 80015fe:	440b      	add	r3, r1
 8001600:	7812      	ldrb	r2, [r2, #0]
 8001602:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	3301      	adds	r3, #1
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4413      	add	r3, r2
 8001610:	697a      	ldr	r2, [r7, #20]
 8001612:	429a      	cmp	r2, r3
 8001614:	d3ed      	bcc.n	80015f2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4413      	add	r3, r2
 800161c:	3b01      	subs	r3, #1
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	4413      	add	r3, r2
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	3b01      	subs	r3, #1
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	441a      	add	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4413      	add	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
     return offset;
 800163a:	693b      	ldr	r3, [r7, #16]
    }
 800163c:	4618      	mov	r0, r3
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	4b03      	ldr	r3, [pc, #12]	; (800165c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800164e:	4618      	mov	r0, r3
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	0800799c 	.word	0x0800799c

08001660 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	4b03      	ldr	r3, [pc, #12]	; (8001678 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800166a:	4618      	mov	r0, r3
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	080079b0 	.word	0x080079b0

0800167c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fc84 	bl	8000f94 <_ZN3ros3MsgC1Ev>
 800168c:	4a11      	ldr	r2, [pc, #68]	; (80016d4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	611a      	str	r2, [r3, #16]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f04f 0200 	mov.w	r2, #0
 80016b0:	615a      	str	r2, [r3, #20]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	61da      	str	r2, [r3, #28]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	621a      	str	r2, [r3, #32]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4618      	mov	r0, r3
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	08007ca4 	.word	0x08007ca4

080016d8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	; 0x28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6859      	ldr	r1, [r3, #4]
 80016ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	4413      	add	r3, r2
 80016f0:	b2ca      	uxtb	r2, r1
 80016f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	0a19      	lsrs	r1, r3, #8
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	3301      	adds	r3, #1
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	4413      	add	r3, r2
 8001702:	b2ca      	uxtb	r2, r1
 8001704:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	0c19      	lsrs	r1, r3, #16
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	3302      	adds	r3, #2
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	4413      	add	r3, r2
 8001714:	b2ca      	uxtb	r2, r1
 8001716:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	0e19      	lsrs	r1, r3, #24
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	3303      	adds	r3, #3
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	4413      	add	r3, r2
 8001726:	b2ca      	uxtb	r2, r1
 8001728:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172c:	3304      	adds	r3, #4
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001730:	2300      	movs	r3, #0
 8001732:	623b      	str	r3, [r7, #32]
 8001734:	e02a      	b.n	800178c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68da      	ldr	r2, [r3, #12]
 800173a:	6a3b      	ldr	r3, [r7, #32]
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001744:	6939      	ldr	r1, [r7, #16]
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	4413      	add	r3, r2
 800174c:	b2ca      	uxtb	r2, r1
 800174e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	0a19      	lsrs	r1, r3, #8
 8001754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001756:	3301      	adds	r3, #1
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	4413      	add	r3, r2
 800175c:	b2ca      	uxtb	r2, r1
 800175e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	0c19      	lsrs	r1, r3, #16
 8001764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001766:	3302      	adds	r3, #2
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	4413      	add	r3, r2
 800176c:	b2ca      	uxtb	r2, r1
 800176e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	0e19      	lsrs	r1, r3, #24
 8001774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001776:	3303      	adds	r3, #3
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	4413      	add	r3, r2
 800177c:	b2ca      	uxtb	r2, r1
 800177e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001782:	3304      	adds	r3, #4
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001786:	6a3b      	ldr	r3, [r7, #32]
 8001788:	3301      	adds	r3, #1
 800178a:	623b      	str	r3, [r7, #32]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	6a3a      	ldr	r2, [r7, #32]
 8001792:	429a      	cmp	r2, r3
 8001794:	d3cf      	bcc.n	8001736 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6919      	ldr	r1, [r3, #16]
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	4413      	add	r3, r2
 80017a0:	b2ca      	uxtb	r2, r1
 80017a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	0a19      	lsrs	r1, r3, #8
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	3301      	adds	r3, #1
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	4413      	add	r3, r2
 80017b2:	b2ca      	uxtb	r2, r1
 80017b4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	0c19      	lsrs	r1, r3, #16
 80017bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017be:	3302      	adds	r3, #2
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	4413      	add	r3, r2
 80017c4:	b2ca      	uxtb	r2, r1
 80017c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	691b      	ldr	r3, [r3, #16]
 80017cc:	0e19      	lsrs	r1, r3, #24
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	3303      	adds	r3, #3
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	4413      	add	r3, r2
 80017d6:	b2ca      	uxtb	r2, r1
 80017d8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	3304      	adds	r3, #4
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80017e0:	2300      	movs	r3, #0
 80017e2:	61fb      	str	r3, [r7, #28]
 80017e4:	e02a      	b.n	800183c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	699a      	ldr	r2, [r3, #24]
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80017f4:	68f9      	ldr	r1, [r7, #12]
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	b2ca      	uxtb	r2, r1
 80017fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	0a19      	lsrs	r1, r3, #8
 8001804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001806:	3301      	adds	r3, #1
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	4413      	add	r3, r2
 800180c:	b2ca      	uxtb	r2, r1
 800180e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	0c19      	lsrs	r1, r3, #16
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001816:	3302      	adds	r3, #2
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	4413      	add	r3, r2
 800181c:	b2ca      	uxtb	r2, r1
 800181e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	0e19      	lsrs	r1, r3, #24
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	3303      	adds	r3, #3
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	4413      	add	r3, r2
 800182c:	b2ca      	uxtb	r2, r1
 800182e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	3304      	adds	r3, #4
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	3301      	adds	r3, #1
 800183a:	61fb      	str	r3, [r7, #28]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	69fa      	ldr	r2, [r7, #28]
 8001842:	429a      	cmp	r2, r3
 8001844:	d3cf      	bcc.n	80017e6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69d9      	ldr	r1, [r3, #28]
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	4413      	add	r3, r2
 8001850:	b2ca      	uxtb	r2, r1
 8001852:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69db      	ldr	r3, [r3, #28]
 8001858:	0a19      	lsrs	r1, r3, #8
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	3301      	adds	r3, #1
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	4413      	add	r3, r2
 8001862:	b2ca      	uxtb	r2, r1
 8001864:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	0c19      	lsrs	r1, r3, #16
 800186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186e:	3302      	adds	r3, #2
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	4413      	add	r3, r2
 8001874:	b2ca      	uxtb	r2, r1
 8001876:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	0e19      	lsrs	r1, r3, #24
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	3303      	adds	r3, #3
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	4413      	add	r3, r2
 8001886:	b2ca      	uxtb	r2, r1
 8001888:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	3304      	adds	r3, #4
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001890:	2300      	movs	r3, #0
 8001892:	61bb      	str	r3, [r7, #24]
 8001894:	e027      	b.n	80018e6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7fe fc90 	bl	80001c8 <strlen>
 80018a8:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	4413      	add	r3, r2
 80018b0:	6979      	ldr	r1, [r7, #20]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f001 f830 	bl	8002918 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	3304      	adds	r3, #4
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	18d0      	adds	r0, r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	4619      	mov	r1, r3
 80018d4:	f005 ffb8 	bl	8007848 <memcpy>
      offset += length_stringsi;
 80018d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	4413      	add	r3, r2
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	3301      	adds	r3, #1
 80018e4:	61bb      	str	r3, [r7, #24]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d3d2      	bcc.n	8001896 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80018f2:	4618      	mov	r0, r3
 80018f4:	3728      	adds	r7, #40	; 0x28
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b08e      	sub	sp, #56	; 0x38
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
 8001902:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800190a:	683a      	ldr	r2, [r7, #0]
 800190c:	4413      	add	r3, r2
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001914:	3301      	adds	r3, #1
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	4413      	add	r3, r2
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	021b      	lsls	r3, r3, #8
 800191e:	6a3a      	ldr	r2, [r7, #32]
 8001920:	4313      	orrs	r3, r2
 8001922:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001926:	3302      	adds	r3, #2
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	4413      	add	r3, r2
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	041b      	lsls	r3, r3, #16
 8001930:	6a3a      	ldr	r2, [r7, #32]
 8001932:	4313      	orrs	r3, r2
 8001934:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001938:	3303      	adds	r3, #3
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	4413      	add	r3, r2
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	061b      	lsls	r3, r3, #24
 8001942:	6a3a      	ldr	r2, [r7, #32]
 8001944:	4313      	orrs	r3, r2
 8001946:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800194a:	3304      	adds	r3, #4
 800194c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	6a3a      	ldr	r2, [r7, #32]
 8001954:	429a      	cmp	r2, r3
 8001956:	d90a      	bls.n	800196e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68da      	ldr	r2, [r3, #12]
 800195c:	6a3b      	ldr	r3, [r7, #32]
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4619      	mov	r1, r3
 8001962:	4610      	mov	r0, r2
 8001964:	f005 fef4 	bl	8007750 <realloc>
 8001968:	4602      	mov	r2, r0
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a3a      	ldr	r2, [r7, #32]
 8001972:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001974:	2300      	movs	r3, #0
 8001976:	633b      	str	r3, [r7, #48]	; 0x30
 8001978:	e035      	b.n	80019e6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001982:	6839      	ldr	r1, [r7, #0]
 8001984:	440a      	add	r2, r1
 8001986:	7812      	ldrb	r2, [r2, #0]
 8001988:	4313      	orrs	r3, r2
 800198a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001990:	3301      	adds	r3, #1
 8001992:	6839      	ldr	r1, [r7, #0]
 8001994:	440b      	add	r3, r1
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	021b      	lsls	r3, r3, #8
 800199a:	4313      	orrs	r3, r2
 800199c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019a2:	3302      	adds	r3, #2
 80019a4:	6839      	ldr	r1, [r7, #0]
 80019a6:	440b      	add	r3, r1
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	041b      	lsls	r3, r3, #16
 80019ac:	4313      	orrs	r3, r2
 80019ae:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80019b0:	697a      	ldr	r2, [r7, #20]
 80019b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019b4:	3303      	adds	r3, #3
 80019b6:	6839      	ldr	r1, [r7, #0]
 80019b8:	440b      	add	r3, r1
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	061b      	lsls	r3, r3, #24
 80019be:	4313      	orrs	r3, r2
 80019c0:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80019c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ca:	3304      	adds	r3, #4
 80019cc:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68da      	ldr	r2, [r3, #12]
 80019d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	3208      	adds	r2, #8
 80019dc:	6812      	ldr	r2, [r2, #0]
 80019de:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80019e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019e2:	3301      	adds	r3, #1
 80019e4:	633b      	str	r3, [r7, #48]	; 0x30
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d3c4      	bcc.n	800197a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80019f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	4413      	add	r3, r2
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80019fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019fc:	3301      	adds	r3, #1
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	4413      	add	r3, r2
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	021b      	lsls	r3, r3, #8
 8001a06:	69fa      	ldr	r2, [r7, #28]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a0e:	3302      	adds	r3, #2
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	4413      	add	r3, r2
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	041b      	lsls	r3, r3, #16
 8001a18:	69fa      	ldr	r2, [r7, #28]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a20:	3303      	adds	r3, #3
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	4413      	add	r3, r2
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	061b      	lsls	r3, r3, #24
 8001a2a:	69fa      	ldr	r2, [r7, #28]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a32:	3304      	adds	r3, #4
 8001a34:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	69fa      	ldr	r2, [r7, #28]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d90a      	bls.n	8001a56 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	699a      	ldr	r2, [r3, #24]
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	f005 fe80 	bl	8007750 <realloc>
 8001a50:	4602      	mov	r2, r0
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69fa      	ldr	r2, [r7, #28]
 8001a5a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a60:	e035      	b.n	8001ace <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a6a:	6839      	ldr	r1, [r7, #0]
 8001a6c:	440a      	add	r2, r1
 8001a6e:	7812      	ldrb	r2, [r2, #0]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a78:	3301      	adds	r3, #1
 8001a7a:	6839      	ldr	r1, [r7, #0]
 8001a7c:	440b      	add	r3, r1
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	021b      	lsls	r3, r3, #8
 8001a82:	4313      	orrs	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a8a:	3302      	adds	r3, #2
 8001a8c:	6839      	ldr	r1, [r7, #0]
 8001a8e:	440b      	add	r3, r1
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	041b      	lsls	r3, r3, #16
 8001a94:	4313      	orrs	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a9c:	3303      	adds	r3, #3
 8001a9e:	6839      	ldr	r1, [r7, #0]
 8001aa0:	440b      	add	r3, r1
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	061b      	lsls	r3, r3, #24
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ab2:	3304      	adds	r3, #4
 8001ab4:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	699a      	ldr	r2, [r3, #24]
 8001aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	3214      	adds	r2, #20
 8001ac4:	6812      	ldr	r2, [r2, #0]
 8001ac6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aca:	3301      	adds	r3, #1
 8001acc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d3c4      	bcc.n	8001a62 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	4413      	add	r3, r2
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	4413      	add	r3, r2
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	021b      	lsls	r3, r3, #8
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001af6:	3302      	adds	r3, #2
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	4413      	add	r3, r2
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	041b      	lsls	r3, r3, #16
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b08:	3303      	adds	r3, #3
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	061b      	lsls	r3, r3, #24
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b1a:	3304      	adds	r3, #4
 8001b1c:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d90a      	bls.n	8001b3e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4619      	mov	r1, r3
 8001b32:	4610      	mov	r0, r2
 8001b34:	f005 fe0c 	bl	8007750 <realloc>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001b44:	2300      	movs	r3, #0
 8001b46:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b48:	e03e      	b.n	8001bc8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	441a      	add	r2, r3
 8001b50:	f107 030c 	add.w	r3, r7, #12
 8001b54:	4611      	mov	r1, r2
 8001b56:	4618      	mov	r0, r3
 8001b58:	f000 fefd 	bl	8002956 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b5e:	3304      	adds	r3, #4
 8001b60:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
 8001b66:	e00b      	b.n	8001b80 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	441a      	add	r2, r3
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	3b01      	subs	r3, #1
 8001b72:	6839      	ldr	r1, [r7, #0]
 8001b74:	440b      	add	r3, r1
 8001b76:	7812      	ldrb	r2, [r2, #0]
 8001b78:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	4413      	add	r3, r2
 8001b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d3ed      	bcc.n	8001b68 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001b8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4413      	add	r3, r2
 8001b92:	3b01      	subs	r3, #1
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	4413      	add	r3, r2
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	441a      	add	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001ba8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	4413      	add	r3, r2
 8001bae:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	3220      	adds	r2, #32
 8001bbe:	6812      	ldr	r2, [r2, #0]
 8001bc0:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d3bb      	bcc.n	8001b4a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8001bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3738      	adds	r7, #56	; 0x38
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001be6:	4618      	mov	r0, r3
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	08007b98 	.word	0x08007b98

08001bf8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	4b03      	ldr	r3, [pc, #12]	; (8001c10 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001c02:	4618      	mov	r0, r3
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	080079d4 	.word	0x080079d4

08001c14 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
 8001c20:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	68ba      	ldr	r2, [r7, #8]
 8001c26:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	611a      	str	r2, [r3, #16]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4618      	mov	r0, r3
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68d8      	ldr	r0, [r3, #12]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6891      	ldr	r1, [r2, #8]
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	4798      	blx	r3
 8001c60:	4603      	mov	r3, r0
  };
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	691b      	ldr	r3, [r3, #16]
  }
 8001c76:	4618      	mov	r0, r3
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <_ZN8std_msgs5EmptyC1Ev>:

  class Empty : public ros::Msg
  {
    public:

    Empty()
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
    {
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff f980 	bl	8000f94 <_ZN3ros3MsgC1Ev>
 8001c94:	4a03      	ldr	r2, [pc, #12]	; (8001ca4 <_ZN8std_msgs5EmptyC1Ev+0x20>)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	601a      	str	r2, [r3, #0]
    }
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	08007c60 	.word	0x08007c60

08001ca8 <_ZNK8std_msgs5Empty9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
      return offset;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
    }
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <_ZN8std_msgs5Empty11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
     return offset;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
    }
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <_ZN8std_msgs5Empty7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Empty"; };
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <_ZN8std_msgs5Empty7getTypeEv+0x18>)
 8001cea:	4618      	mov	r0, r3
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	080079f8 	.word	0x080079f8

08001cfc <_ZN8std_msgs5Empty6getMD5Ev>:
    virtual const char * getMD5() override { return "d41d8cd98f00b204e9800998ecf8427e"; };
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	4b03      	ldr	r3, [pc, #12]	; (8001d14 <_ZN8std_msgs5Empty6getMD5Ev+0x18>)
 8001d06:	4618      	mov	r0, r3
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	08007a08 	.word	0x08007a08

08001d18 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
      data("")
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff f936 	bl	8000f94 <_ZN3ros3MsgC1Ev>
 8001d28:	4a05      	ldr	r2, [pc, #20]	; (8001d40 <_ZN8std_msgs6StringC1Ev+0x28>)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a04      	ldr	r2, [pc, #16]	; (8001d44 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8001d32:	605a      	str	r2, [r3, #4]
    {
    }
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	08007c48 	.word	0x08007c48
 8001d44:	08007958 	.word	0x08007958

08001d48 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe fa34 	bl	80001c8 <strlen>
 8001d60:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	4413      	add	r3, r2
 8001d68:	68b9      	ldr	r1, [r7, #8]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f000 fdd4 	bl	8002918 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	3304      	adds	r3, #4
 8001d74:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	18d0      	adds	r0, r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	68ba      	ldr	r2, [r7, #8]
 8001d82:	4619      	mov	r1, r3
 8001d84:	f005 fd60 	bl	8007848 <memcpy>
      offset += length_data;
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	60fb      	str	r3, [r7, #12]
      return offset;
 8001d90:	68fb      	ldr	r3, [r7, #12]
    }
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b086      	sub	sp, #24
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	441a      	add	r2, r3
 8001dae:	f107 030c 	add.w	r3, r7, #12
 8001db2:	4611      	mov	r1, r2
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 fdce 	bl	8002956 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	e00b      	b.n	8001dde <_ZN8std_msgs6String11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	441a      	add	r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	6839      	ldr	r1, [r7, #0]
 8001dd2:	440b      	add	r3, r1
 8001dd4:	7812      	ldrb	r2, [r2, #0]
 8001dd6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	617b      	str	r3, [r7, #20]
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4413      	add	r3, r2
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d3ed      	bcc.n	8001dc6 <_ZN8std_msgs6String11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_data-1]=0;
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4413      	add	r3, r2
 8001df0:	3b01      	subs	r3, #1
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	4413      	add	r3, r2
 8001df6:	2200      	movs	r2, #0
 8001df8:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	441a      	add	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
     return offset;
 8001e0e:	693b      	ldr	r3, [r7, #16]
    }
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	4b03      	ldr	r3, [pc, #12]	; (8001e30 <_ZN8std_msgs6String7getTypeEv+0x18>)
 8001e22:	4618      	mov	r0, r3
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	08007a2c 	.word	0x08007a2c

08001e34 <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <_ZN8std_msgs6String6getMD5Ev+0x18>)
 8001e3e:	4618      	mov	r0, r3
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	08007a3c 	.word	0x08007a3c

08001e50 <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff f89a 	bl	8000f94 <_ZN3ros3MsgC1Ev>
 8001e60:	4a09      	ldr	r2, [pc, #36]	; (8001e88 <_ZN8std_msgs6HeaderC1Ev+0x38>)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	601a      	str	r2, [r3, #0]
      seq(0),
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	605a      	str	r2, [r3, #4]
      stamp(),
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3308      	adds	r3, #8
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff f87e 	bl	8000f72 <_ZN3ros4TimeC1Ev>
      frame_id("")
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a04      	ldr	r2, [pc, #16]	; (8001e8c <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 8001e7a:	611a      	str	r2, [r3, #16]
    {
    }
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	08007c30 	.word	0x08007c30
 8001e8c:	08007958 	.word	0x08007958

08001e90 <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6859      	ldr	r1, [r3, #4]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	b2ca      	uxtb	r2, r1
 8001eaa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	0a19      	lsrs	r1, r3, #8
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	4413      	add	r3, r2
 8001eba:	b2ca      	uxtb	r2, r1
 8001ebc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	0c19      	lsrs	r1, r3, #16
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	3302      	adds	r3, #2
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	4413      	add	r3, r2
 8001ecc:	b2ca      	uxtb	r2, r1
 8001ece:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	0e19      	lsrs	r1, r3, #24
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	3303      	adds	r3, #3
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	4413      	add	r3, r2
 8001ede:	b2ca      	uxtb	r2, r1
 8001ee0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6899      	ldr	r1, [r3, #8]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	b2ca      	uxtb	r2, r1
 8001ef4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	0a19      	lsrs	r1, r3, #8
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	3301      	adds	r3, #1
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	4413      	add	r3, r2
 8001f04:	b2ca      	uxtb	r2, r1
 8001f06:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	0c19      	lsrs	r1, r3, #16
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	3302      	adds	r3, #2
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	4413      	add	r3, r2
 8001f16:	b2ca      	uxtb	r2, r1
 8001f18:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	0e19      	lsrs	r1, r3, #24
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	3303      	adds	r3, #3
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	4413      	add	r3, r2
 8001f28:	b2ca      	uxtb	r2, r1
 8001f2a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	3304      	adds	r3, #4
 8001f30:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68d9      	ldr	r1, [r3, #12]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	b2ca      	uxtb	r2, r1
 8001f3e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	0a19      	lsrs	r1, r3, #8
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	b2ca      	uxtb	r2, r1
 8001f50:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	0c19      	lsrs	r1, r3, #16
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	4413      	add	r3, r2
 8001f60:	b2ca      	uxtb	r2, r1
 8001f62:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	0e19      	lsrs	r1, r3, #24
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	3303      	adds	r3, #3
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	4413      	add	r3, r2
 8001f72:	b2ca      	uxtb	r2, r1
 8001f74:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	3304      	adds	r3, #4
 8001f7a:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7fe f921 	bl	80001c8 <strlen>
 8001f86:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	68b9      	ldr	r1, [r7, #8]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 fcc1 	bl	8002918 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	3304      	adds	r3, #4
 8001f9a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	18d0      	adds	r0, r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	4619      	mov	r1, r3
 8001faa:	f005 fc4d 	bl	8007848 <memcpy>
      offset += length_frame_id;
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	60fb      	str	r3, [r7, #12]
      return offset;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
    }
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	6839      	ldr	r1, [r7, #0]
 8001fe6:	440b      	add	r3, r1
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	021b      	lsls	r3, r3, #8
 8001fec:	431a      	orrs	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	3302      	adds	r3, #2
 8001ffa:	6839      	ldr	r1, [r7, #0]
 8001ffc:	440b      	add	r3, r1
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	041b      	lsls	r3, r3, #16
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	3303      	adds	r3, #3
 8002010:	6839      	ldr	r1, [r7, #0]
 8002012:	440b      	add	r3, r1
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	061b      	lsls	r3, r3, #24
 8002018:	431a      	orrs	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	3304      	adds	r3, #4
 8002022:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	4413      	add	r3, r2
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	461a      	mov	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	3301      	adds	r3, #1
 800203a:	6839      	ldr	r1, [r7, #0]
 800203c:	440b      	add	r3, r1
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	021b      	lsls	r3, r3, #8
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	3302      	adds	r3, #2
 8002050:	6839      	ldr	r1, [r7, #0]
 8002052:	440b      	add	r3, r1
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	041b      	lsls	r3, r3, #16
 8002058:	431a      	orrs	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	3303      	adds	r3, #3
 8002066:	6839      	ldr	r1, [r7, #0]
 8002068:	440b      	add	r3, r1
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	061b      	lsls	r3, r3, #24
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	3304      	adds	r3, #4
 8002078:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	4413      	add	r3, r2
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	461a      	mov	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68da      	ldr	r2, [r3, #12]
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	3301      	adds	r3, #1
 8002090:	6839      	ldr	r1, [r7, #0]
 8002092:	440b      	add	r3, r1
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	021b      	lsls	r3, r3, #8
 8002098:	431a      	orrs	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	3302      	adds	r3, #2
 80020a6:	6839      	ldr	r1, [r7, #0]
 80020a8:	440b      	add	r3, r1
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	041b      	lsls	r3, r3, #16
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	3303      	adds	r3, #3
 80020bc:	6839      	ldr	r1, [r7, #0]
 80020be:	440b      	add	r3, r1
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	061b      	lsls	r3, r3, #24
 80020c4:	431a      	orrs	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	3304      	adds	r3, #4
 80020ce:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	441a      	add	r2, r3
 80020d6:	f107 030c 	add.w	r3, r7, #12
 80020da:	4611      	mov	r1, r2
 80020dc:	4618      	mov	r0, r3
 80020de:	f000 fc3a 	bl	8002956 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	3304      	adds	r3, #4
 80020e6:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	e00b      	b.n	8002106 <_ZN8std_msgs6Header11deserializeEPh+0x146>
          inbuffer[k-1]=inbuffer[k];
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	441a      	add	r2, r3
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	6839      	ldr	r1, [r7, #0]
 80020fa:	440b      	add	r3, r1
 80020fc:	7812      	ldrb	r2, [r2, #0]
 80020fe:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	3301      	adds	r3, #1
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4413      	add	r3, r2
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	429a      	cmp	r2, r3
 8002110:	d3ed      	bcc.n	80020ee <_ZN8std_msgs6Header11deserializeEPh+0x12e>
      }
      inbuffer[offset+length_frame_id-1]=0;
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4413      	add	r3, r2
 8002118:	3b01      	subs	r3, #1
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	4413      	add	r3, r2
 800211e:	2200      	movs	r2, #0
 8002120:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	3b01      	subs	r3, #1
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	441a      	add	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4413      	add	r3, r2
 8002134:	613b      	str	r3, [r7, #16]
     return offset;
 8002136:	693b      	ldr	r3, [r7, #16]
    }
 8002138:	4618      	mov	r0, r3
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <_ZN8std_msgs6Header7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Header"; };
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	4b03      	ldr	r3, [pc, #12]	; (8002158 <_ZN8std_msgs6Header7getTypeEv+0x18>)
 800214a:	4618      	mov	r0, r3
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	08007a60 	.word	0x08007a60

0800215c <_ZN8std_msgs6Header6getMD5Ev>:
    virtual const char * getMD5() override { return "2176decaecbce78abc3b96ef049fabed"; };
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	4b03      	ldr	r3, [pc, #12]	; (8002174 <_ZN8std_msgs6Header6getMD5Ev+0x18>)
 8002166:	4618      	mov	r0, r3
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	08007a70 	.word	0x08007a70

08002178 <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef float _z_type;
      _z_type z;
      typedef float _w_type;
      _w_type w;

    Quaternion():
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe ff06 	bl	8000f94 <_ZN3ros3MsgC1Ev>
 8002188:	4a0b      	ldr	r2, [pc, #44]	; (80021b8 <_ZN13geometry_msgs10QuaternionC1Ev+0x40>)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	601a      	str	r2, [r3, #0]
      x(0),
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	605a      	str	r2, [r3, #4]
      y(0),
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	609a      	str	r2, [r3, #8]
      z(0),
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f04f 0200 	mov.w	r2, #0
 80021a4:	60da      	str	r2, [r3, #12]
      w(0)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	611a      	str	r2, [r3, #16]
    {
    }
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4618      	mov	r0, r3
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	08007c18 	.word	0x08007c18

080021bc <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	441a      	add	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80021d6:	eeb0 0a67 	vmov.f32	s0, s15
 80021da:	4610      	mov	r0, r2
 80021dc:	f7fe fd91 	bl	8000d02 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80021e0:	4602      	mov	r2, r0
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	4413      	add	r3, r2
 80021e6:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	441a      	add	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80021f4:	eeb0 0a67 	vmov.f32	s0, s15
 80021f8:	4610      	mov	r0, r2
 80021fa:	f7fe fd82 	bl	8000d02 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80021fe:	4602      	mov	r2, r0
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	4413      	add	r3, r2
 8002204:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	441a      	add	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002212:	eeb0 0a67 	vmov.f32	s0, s15
 8002216:	4610      	mov	r0, r2
 8002218:	f7fe fd73 	bl	8000d02 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800221c:	4602      	mov	r2, r0
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	4413      	add	r3, r2
 8002222:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->w);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	441a      	add	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002230:	eeb0 0a67 	vmov.f32	s0, s15
 8002234:	4610      	mov	r0, r2
 8002236:	f7fe fd64 	bl	8000d02 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800223a:	4602      	mov	r2, r0
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4413      	add	r3, r2
 8002240:	60fb      	str	r3, [r7, #12]
      return offset;
 8002242:	68fb      	ldr	r3, [r7, #12]
    }
 8002244:	4618      	mov	r0, r3
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	441a      	add	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3304      	adds	r3, #4
 8002264:	4619      	mov	r1, r3
 8002266:	4610      	mov	r0, r2
 8002268:	f7fe fde7 	bl	8000e3a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800226c:	4602      	mov	r2, r0
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	4413      	add	r3, r2
 8002272:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	441a      	add	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3308      	adds	r3, #8
 800227e:	4619      	mov	r1, r3
 8002280:	4610      	mov	r0, r2
 8002282:	f7fe fdda 	bl	8000e3a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8002286:	4602      	mov	r2, r0
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4413      	add	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	441a      	add	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	330c      	adds	r3, #12
 8002298:	4619      	mov	r1, r3
 800229a:	4610      	mov	r0, r2
 800229c:	f7fe fdcd 	bl	8000e3a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80022a0:	4602      	mov	r2, r0
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	4413      	add	r3, r2
 80022a6:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->w));
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	441a      	add	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	3310      	adds	r3, #16
 80022b2:	4619      	mov	r1, r3
 80022b4:	4610      	mov	r0, r2
 80022b6:	f7fe fdc0 	bl	8000e3a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80022ba:	4602      	mov	r2, r0
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4413      	add	r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]
     return offset;
 80022c2:	68fb      	ldr	r3, [r7, #12]
    }
 80022c4:	4618      	mov	r0, r3
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Quaternion"; };
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	4b03      	ldr	r3, [pc, #12]	; (80022e4 <_ZN13geometry_msgs10Quaternion7getTypeEv+0x18>)
 80022d6:	4618      	mov	r0, r3
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	08007a94 	.word	0x08007a94

080022e8 <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    virtual const char * getMD5() override { return "a779879fadf0160734f906b8c19c7004"; };
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	4b03      	ldr	r3, [pc, #12]	; (8002300 <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x18>)
 80022f2:	4618      	mov	r0, r3
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	08007ab0 	.word	0x08007ab0

08002304 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef float _y_type;
      _y_type y;
      typedef float _z_type;
      _z_type z;

    Vector3():
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe fe40 	bl	8000f94 <_ZN3ros3MsgC1Ev>
 8002314:	4a09      	ldr	r2, [pc, #36]	; (800233c <_ZN13geometry_msgs7Vector3C1Ev+0x38>)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	601a      	str	r2, [r3, #0]
      x(0),
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f04f 0200 	mov.w	r2, #0
 8002320:	605a      	str	r2, [r3, #4]
      y(0),
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f04f 0200 	mov.w	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
      z(0)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	60da      	str	r2, [r3, #12]
    {
    }
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4618      	mov	r0, r3
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	08007c00 	.word	0x08007c00

08002340 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800234a:	2300      	movs	r3, #0
 800234c:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	441a      	add	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	edd3 7a01 	vldr	s15, [r3, #4]
 800235a:	eeb0 0a67 	vmov.f32	s0, s15
 800235e:	4610      	mov	r0, r2
 8002360:	f7fe fccf 	bl	8000d02 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8002364:	4602      	mov	r2, r0
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4413      	add	r3, r2
 800236a:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	441a      	add	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	edd3 7a02 	vldr	s15, [r3, #8]
 8002378:	eeb0 0a67 	vmov.f32	s0, s15
 800237c:	4610      	mov	r0, r2
 800237e:	f7fe fcc0 	bl	8000d02 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8002382:	4602      	mov	r2, r0
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	4413      	add	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	441a      	add	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	edd3 7a03 	vldr	s15, [r3, #12]
 8002396:	eeb0 0a67 	vmov.f32	s0, s15
 800239a:	4610      	mov	r0, r2
 800239c:	f7fe fcb1 	bl	8000d02 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80023a0:	4602      	mov	r2, r0
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	4413      	add	r3, r2
 80023a6:	60fb      	str	r3, [r7, #12]
      return offset;
 80023a8:	68fb      	ldr	r3, [r7, #12]
    }
 80023aa:	4618      	mov	r0, r3
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b084      	sub	sp, #16
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
 80023ba:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	441a      	add	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3304      	adds	r3, #4
 80023ca:	4619      	mov	r1, r3
 80023cc:	4610      	mov	r0, r2
 80023ce:	f7fe fd34 	bl	8000e3a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80023d2:	4602      	mov	r2, r0
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4413      	add	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	441a      	add	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3308      	adds	r3, #8
 80023e4:	4619      	mov	r1, r3
 80023e6:	4610      	mov	r0, r2
 80023e8:	f7fe fd27 	bl	8000e3a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80023ec:	4602      	mov	r2, r0
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	4413      	add	r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	441a      	add	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	330c      	adds	r3, #12
 80023fe:	4619      	mov	r1, r3
 8002400:	4610      	mov	r0, r2
 8002402:	f7fe fd1a 	bl	8000e3a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8002406:	4602      	mov	r2, r0
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4413      	add	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]
     return offset;
 800240e:	68fb      	ldr	r3, [r7, #12]
    }
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	4b03      	ldr	r3, [pc, #12]	; (8002430 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8002422:	4618      	mov	r0, r3
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	08007ad4 	.word	0x08007ad4

08002434 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	4b03      	ldr	r3, [pc, #12]	; (800244c <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 800243e:	4618      	mov	r0, r3
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	08007aec 	.word	0x08007aec

08002450 <_ZN11sensor_msgs3ImuC1Ev>:
      float angular_velocity_covariance[9];
      typedef geometry_msgs::Vector3 _linear_acceleration_type;
      _linear_acceleration_type linear_acceleration;
      float linear_acceleration_covariance[9];

    Imu():
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
      orientation(),
      orientation_covariance(),
      angular_velocity(),
      angular_velocity_covariance(),
      linear_acceleration(),
      linear_acceleration_covariance()
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4618      	mov	r0, r3
 800245c:	f7fe fd9a 	bl	8000f94 <_ZN3ros3MsgC1Ev>
 8002460:	4a1f      	ldr	r2, [pc, #124]	; (80024e0 <_ZN11sensor_msgs3ImuC1Ev+0x90>)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	601a      	str	r2, [r3, #0]
      header(),
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3304      	adds	r3, #4
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff fcf0 	bl	8001e50 <_ZN8std_msgs6HeaderC1Ev>
      orientation(),
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3318      	adds	r3, #24
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff fe7f 	bl	8002178 <_ZN13geometry_msgs10QuaternionC1Ev>
      orientation_covariance(),
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8002480:	2308      	movs	r3, #8
 8002482:	e004      	b.n	800248e <_ZN11sensor_msgs3ImuC1Ev+0x3e>
 8002484:	f04f 0100 	mov.w	r1, #0
 8002488:	6011      	str	r1, [r2, #0]
 800248a:	3204      	adds	r2, #4
 800248c:	3b01      	subs	r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	daf8      	bge.n	8002484 <_ZN11sensor_msgs3ImuC1Ev+0x34>
      angular_velocity(),
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3350      	adds	r3, #80	; 0x50
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff ff34 	bl	8002304 <_ZN13geometry_msgs7Vector3C1Ev>
      angular_velocity_covariance(),
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f103 0260 	add.w	r2, r3, #96	; 0x60
 80024a2:	2308      	movs	r3, #8
 80024a4:	e004      	b.n	80024b0 <_ZN11sensor_msgs3ImuC1Ev+0x60>
 80024a6:	f04f 0100 	mov.w	r1, #0
 80024aa:	6011      	str	r1, [r2, #0]
 80024ac:	3204      	adds	r2, #4
 80024ae:	3b01      	subs	r3, #1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	daf8      	bge.n	80024a6 <_ZN11sensor_msgs3ImuC1Ev+0x56>
      linear_acceleration(),
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3384      	adds	r3, #132	; 0x84
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff ff23 	bl	8002304 <_ZN13geometry_msgs7Vector3C1Ev>
      linear_acceleration_covariance()
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f103 0294 	add.w	r2, r3, #148	; 0x94
 80024c4:	2308      	movs	r3, #8
 80024c6:	e004      	b.n	80024d2 <_ZN11sensor_msgs3ImuC1Ev+0x82>
 80024c8:	f04f 0100 	mov.w	r1, #0
 80024cc:	6011      	str	r1, [r2, #0]
 80024ce:	3204      	adds	r2, #4
 80024d0:	3b01      	subs	r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	daf8      	bge.n	80024c8 <_ZN11sensor_msgs3ImuC1Ev+0x78>
    {
    }
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4618      	mov	r0, r3
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	08007be8 	.word	0x08007be8

080024e4 <_ZNK11sensor_msgs3Imu9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	617b      	str	r3, [r7, #20]
      offset += this->header.serialize(outbuffer + offset);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	1d18      	adds	r0, r3, #4
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	4413      	add	r3, r2
 80024fc:	4619      	mov	r1, r3
 80024fe:	f7ff fcc7 	bl	8001e90 <_ZNK8std_msgs6Header9serializeEPh>
 8002502:	4602      	mov	r2, r0
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	4413      	add	r3, r2
 8002508:	617b      	str	r3, [r7, #20]
      offset += this->orientation.serialize(outbuffer + offset);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f103 0018 	add.w	r0, r3, #24
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	4413      	add	r3, r2
 8002516:	4619      	mov	r1, r3
 8002518:	f7ff fe50 	bl	80021bc <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 800251c:	4602      	mov	r2, r0
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	4413      	add	r3, r2
 8002522:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 8002524:	2300      	movs	r3, #0
 8002526:	613b      	str	r3, [r7, #16]
 8002528:	e016      	b.n	8002558 <_ZNK11sensor_msgs3Imu9serializeEPh+0x74>
      offset += serializeAvrFloat64(outbuffer + offset, this->orientation_covariance[i]);
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	18d1      	adds	r1, r2, r3
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	330a      	adds	r3, #10
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	3304      	adds	r3, #4
 800253c:	edd3 7a00 	vldr	s15, [r3]
 8002540:	eeb0 0a67 	vmov.f32	s0, s15
 8002544:	4608      	mov	r0, r1
 8002546:	f7fe fbdc 	bl	8000d02 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800254a:	4602      	mov	r2, r0
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	4413      	add	r3, r2
 8002550:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	3301      	adds	r3, #1
 8002556:	613b      	str	r3, [r7, #16]
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	2b08      	cmp	r3, #8
 800255c:	d9e5      	bls.n	800252a <_ZNK11sensor_msgs3Imu9serializeEPh+0x46>
      }
      offset += this->angular_velocity.serialize(outbuffer + offset);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	4413      	add	r3, r2
 800256a:	4619      	mov	r1, r3
 800256c:	f7ff fee8 	bl	8002340 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002570:	4602      	mov	r2, r0
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	4413      	add	r3, r2
 8002576:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 8002578:	2300      	movs	r3, #0
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	e015      	b.n	80025aa <_ZNK11sensor_msgs3Imu9serializeEPh+0xc6>
      offset += serializeAvrFloat64(outbuffer + offset, this->angular_velocity_covariance[i]);
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	18d1      	adds	r1, r2, r3
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	3318      	adds	r3, #24
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	edd3 7a00 	vldr	s15, [r3]
 8002592:	eeb0 0a67 	vmov.f32	s0, s15
 8002596:	4608      	mov	r0, r1
 8002598:	f7fe fbb3 	bl	8000d02 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800259c:	4602      	mov	r2, r0
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	4413      	add	r3, r2
 80025a2:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	3301      	adds	r3, #1
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d9e6      	bls.n	800257e <_ZNK11sensor_msgs3Imu9serializeEPh+0x9a>
      }
      offset += this->linear_acceleration.serialize(outbuffer + offset);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f103 0084 	add.w	r0, r3, #132	; 0x84
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	4413      	add	r3, r2
 80025bc:	4619      	mov	r1, r3
 80025be:	f7ff febf 	bl	8002340 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80025c2:	4602      	mov	r2, r0
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	4413      	add	r3, r2
 80025c8:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 80025ca:	2300      	movs	r3, #0
 80025cc:	60bb      	str	r3, [r7, #8]
 80025ce:	e016      	b.n	80025fe <_ZNK11sensor_msgs3Imu9serializeEPh+0x11a>
      offset += serializeAvrFloat64(outbuffer + offset, this->linear_acceleration_covariance[i]);
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	18d1      	adds	r1, r2, r3
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	3324      	adds	r3, #36	; 0x24
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	3304      	adds	r3, #4
 80025e2:	edd3 7a00 	vldr	s15, [r3]
 80025e6:	eeb0 0a67 	vmov.f32	s0, s15
 80025ea:	4608      	mov	r0, r1
 80025ec:	f7fe fb89 	bl	8000d02 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80025f0:	4602      	mov	r2, r0
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	4413      	add	r3, r2
 80025f6:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	3301      	adds	r3, #1
 80025fc:	60bb      	str	r3, [r7, #8]
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2b08      	cmp	r3, #8
 8002602:	d9e5      	bls.n	80025d0 <_ZNK11sensor_msgs3Imu9serializeEPh+0xec>
      }
      return offset;
 8002604:	697b      	ldr	r3, [r7, #20]
    }
 8002606:	4618      	mov	r0, r3
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <_ZN11sensor_msgs3Imu11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800260e:	b580      	push	{r7, lr}
 8002610:	b086      	sub	sp, #24
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
 8002616:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]
      offset += this->header.deserialize(inbuffer + offset);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	1d18      	adds	r0, r3, #4
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	4413      	add	r3, r2
 8002626:	4619      	mov	r1, r3
 8002628:	f7ff fcca 	bl	8001fc0 <_ZN8std_msgs6Header11deserializeEPh>
 800262c:	4602      	mov	r2, r0
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	4413      	add	r3, r2
 8002632:	617b      	str	r3, [r7, #20]
      offset += this->orientation.deserialize(inbuffer + offset);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f103 0018 	add.w	r0, r3, #24
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	4413      	add	r3, r2
 8002640:	4619      	mov	r1, r3
 8002642:	f7ff fe03 	bl	800224c <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8002646:	4602      	mov	r2, r0
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	4413      	add	r3, r2
 800264c:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 800264e:	2300      	movs	r3, #0
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	e012      	b.n	800267a <_ZN11sensor_msgs3Imu11deserializeEPh+0x6c>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->orientation_covariance[i]));
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	18d0      	adds	r0, r2, r3
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	330a      	adds	r3, #10
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	4413      	add	r3, r2
 8002664:	3304      	adds	r3, #4
 8002666:	4619      	mov	r1, r3
 8002668:	f7fe fbe7 	bl	8000e3a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800266c:	4602      	mov	r2, r0
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	4413      	add	r3, r2
 8002672:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	3301      	adds	r3, #1
 8002678:	613b      	str	r3, [r7, #16]
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	2b08      	cmp	r3, #8
 800267e:	d9e9      	bls.n	8002654 <_ZN11sensor_msgs3Imu11deserializeEPh+0x46>
      }
      offset += this->angular_velocity.deserialize(inbuffer + offset);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	4413      	add	r3, r2
 800268c:	4619      	mov	r1, r3
 800268e:	f7ff fe90 	bl	80023b2 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002692:	4602      	mov	r2, r0
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	4413      	add	r3, r2
 8002698:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 800269a:	2300      	movs	r3, #0
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	e011      	b.n	80026c4 <_ZN11sensor_msgs3Imu11deserializeEPh+0xb6>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->angular_velocity_covariance[i]));
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	18d0      	adds	r0, r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	3318      	adds	r3, #24
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	4413      	add	r3, r2
 80026b0:	4619      	mov	r1, r3
 80026b2:	f7fe fbc2 	bl	8000e3a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80026b6:	4602      	mov	r2, r0
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	4413      	add	r3, r2
 80026bc:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	3301      	adds	r3, #1
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2b08      	cmp	r3, #8
 80026c8:	d9ea      	bls.n	80026a0 <_ZN11sensor_msgs3Imu11deserializeEPh+0x92>
      }
      offset += this->linear_acceleration.deserialize(inbuffer + offset);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f103 0084 	add.w	r0, r3, #132	; 0x84
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	4413      	add	r3, r2
 80026d6:	4619      	mov	r1, r3
 80026d8:	f7ff fe6b 	bl	80023b2 <_ZN13geometry_msgs7Vector311deserializeEPh>
 80026dc:	4602      	mov	r2, r0
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	4413      	add	r3, r2
 80026e2:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 80026e4:	2300      	movs	r3, #0
 80026e6:	60bb      	str	r3, [r7, #8]
 80026e8:	e012      	b.n	8002710 <_ZN11sensor_msgs3Imu11deserializeEPh+0x102>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->linear_acceleration_covariance[i]));
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	18d0      	adds	r0, r2, r3
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	3324      	adds	r3, #36	; 0x24
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	4413      	add	r3, r2
 80026fa:	3304      	adds	r3, #4
 80026fc:	4619      	mov	r1, r3
 80026fe:	f7fe fb9c 	bl	8000e3a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8002702:	4602      	mov	r2, r0
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	4413      	add	r3, r2
 8002708:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	3301      	adds	r3, #1
 800270e:	60bb      	str	r3, [r7, #8]
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	2b08      	cmp	r3, #8
 8002714:	d9e9      	bls.n	80026ea <_ZN11sensor_msgs3Imu11deserializeEPh+0xdc>
      }
     return offset;
 8002716:	697b      	ldr	r3, [r7, #20]
    }
 8002718:	4618      	mov	r0, r3
 800271a:	3718      	adds	r7, #24
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <_ZN11sensor_msgs3Imu7getTypeEv>:

    virtual const char * getType() override { return "sensor_msgs/Imu"; };
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	4b03      	ldr	r3, [pc, #12]	; (8002738 <_ZN11sensor_msgs3Imu7getTypeEv+0x18>)
 800272a:	4618      	mov	r0, r3
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	08007b10 	.word	0x08007b10

0800273c <_ZN11sensor_msgs3Imu6getMD5Ev>:
    virtual const char * getMD5() override { return "6a62c6daae103f4ff57a132d6f95cec2"; };
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	4b03      	ldr	r3, [pc, #12]	; (8002754 <_ZN11sensor_msgs3Imu6getMD5Ev+0x18>)
 8002746:	4618      	mov	r0, r3
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	08007b20 	.word	0x08007b20

08002758 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	4a04      	ldr	r2, [pc, #16]	; (8002774 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4618      	mov	r0, r3
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	08007c90 	.word	0x08007c90

08002778 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff ffe8 	bl	8002758 <_ZN3ros15NodeHandleBase_C1Ev>
 8002788:	4a33      	ldr	r2, [pc, #204]	; (8002858 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xe0>)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3304      	adds	r3, #4
 8002792:	4618      	mov	r0, r3
 8002794:	f7fe fa6e 	bl	8000c74 <_ZN13STM32HardwareC1Ev>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	609a      	str	r2, [r3, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	60da      	str	r2, [r3, #12]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	611a      	str	r2, [r3, #16]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	615a      	str	r2, [r3, #20]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3318      	adds	r3, #24
 80027b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027b8:	2100      	movs	r1, #0
 80027ba:	4618      	mov	r0, r3
 80027bc:	f004 ffff 	bl	80077be <memset>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80027c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027ca:	2100      	movs	r1, #0
 80027cc:	4618      	mov	r0, r3
 80027ce:	f004 fff6 	bl	80077be <memset>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80027d8:	2264      	movs	r2, #100	; 0x64
 80027da:	2100      	movs	r1, #0
 80027dc:	4618      	mov	r0, r3
 80027de:	f004 ffee 	bl	80077be <memset>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 80027e8:	2264      	movs	r2, #100	; 0x64
 80027ea:	2100      	movs	r1, #0
 80027ec:	4618      	mov	r0, r3
 80027ee:	f004 ffe6 	bl	80077be <memset>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8002848:	4618      	mov	r0, r3
 800284a:	f7fe ff17 	bl	800167c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4618      	mov	r0, r3
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	08007bd4 	.word	0x08007bd4

0800285c <_Z6led_cbRKN8std_msgs5EmptyE>:
std_msgs::String str_msg;
ros::Publisher chatter("chatter", &str_msg);
char hello[] = "Hello world!";

// Subscriber:
void led_cb(const std_msgs::Empty &msg) {
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8002864:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002868:	4803      	ldr	r0, [pc, #12]	; (8002878 <_Z6led_cbRKN8std_msgs5EmptyE+0x1c>)
 800286a:	f002 f813 	bl	8004894 <HAL_GPIO_TogglePin>
}
 800286e:	bf00      	nop
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40020c00 	.word	0x40020c00

0800287c <setup>:
// Publisher IMU:
sensor_msgs::Imu imu_msg;
ros::Publisher mpu9250("imu", &imu_msg);

// Setup node:
void setup(void) {
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  nh.initNode();
 8002880:	4808      	ldr	r0, [pc, #32]	; (80028a4 <setup+0x28>)
 8002882:	f000 f8c3 	bl	8002a0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.advertise(chatter);
 8002886:	4908      	ldr	r1, [pc, #32]	; (80028a8 <setup+0x2c>)
 8002888:	4806      	ldr	r0, [pc, #24]	; (80028a4 <setup+0x28>)
 800288a:	f000 f8dc 	bl	8002a46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.advertise(mpu9250);
 800288e:	4907      	ldr	r1, [pc, #28]	; (80028ac <setup+0x30>)
 8002890:	4804      	ldr	r0, [pc, #16]	; (80028a4 <setup+0x28>)
 8002892:	f000 f8d8 	bl	8002a46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.subscribe(led_sub);
 8002896:	4906      	ldr	r1, [pc, #24]	; (80028b0 <setup+0x34>)
 8002898:	4802      	ldr	r0, [pc, #8]	; (80028a4 <setup+0x28>)
 800289a:	f000 f902 	bl	8002aa2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
}
 800289e:	bf00      	nop
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	2000069c 	.word	0x2000069c
 80028a8:	20000bd4 	.word	0x20000bd4
 80028ac:	20000cb8 	.word	0x20000cb8
 80028b0:	20000be8 	.word	0x20000be8

080028b4 <loop>:

// Loop:
void loop(void) {
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  // Publish message:
  str_msg.data = hello;
 80028b8:	4b10      	ldr	r3, [pc, #64]	; (80028fc <loop+0x48>)
 80028ba:	4a11      	ldr	r2, [pc, #68]	; (8002900 <loop+0x4c>)
 80028bc:	605a      	str	r2, [r3, #4]
  chatter.publish(&str_msg);
 80028be:	490f      	ldr	r1, [pc, #60]	; (80028fc <loop+0x48>)
 80028c0:	4810      	ldr	r0, [pc, #64]	; (8002904 <loop+0x50>)
 80028c2:	f7ff f9be 	bl	8001c42 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  // Imu message:
  imu_msg.linear_acceleration.x = 0;
 80028c6:	4b10      	ldr	r3, [pc, #64]	; (8002908 <loop+0x54>)
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  imu_msg.linear_acceleration.y = 9.8;
 80028d0:	4b0d      	ldr	r3, [pc, #52]	; (8002908 <loop+0x54>)
 80028d2:	4a0e      	ldr	r2, [pc, #56]	; (800290c <loop+0x58>)
 80028d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  imu_msg.linear_acceleration.z = 0;
 80028d8:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <loop+0x54>)
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  mpu9250.publish(&imu_msg);
 80028e2:	4909      	ldr	r1, [pc, #36]	; (8002908 <loop+0x54>)
 80028e4:	480a      	ldr	r0, [pc, #40]	; (8002910 <loop+0x5c>)
 80028e6:	f7ff f9ac 	bl	8001c42 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

  nh.spinOnce();
 80028ea:	480a      	ldr	r0, [pc, #40]	; (8002914 <loop+0x60>)
 80028ec:	f000 f906 	bl	8002afc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
  HAL_Delay(500);
 80028f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80028f4:	f001 f8fa 	bl	8003aec <HAL_Delay>
}
 80028f8:	bf00      	nop
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	20000bcc 	.word	0x20000bcc
 8002900:	20000000 	.word	0x20000000
 8002904:	20000bd4 	.word	0x20000bd4
 8002908:	20000c00 	.word	0x20000c00
 800290c:	411ccccd 	.word	0x411ccccd
 8002910:	20000cb8 	.word	0x20000cb8
 8002914:	2000069c 	.word	0x2000069c

08002918 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8002922:	2300      	movs	r3, #0
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	e00c      	b.n	8002942 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	fa22 f103 	lsr.w	r1, r2, r3
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4413      	add	r3, r2
 8002938:	b2ca      	uxtb	r2, r1
 800293a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	3301      	adds	r3, #1
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2b03      	cmp	r3, #3
 8002946:	d9ef      	bls.n	8002928 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8002948:	bf00      	nop
 800294a:	bf00      	nop
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002956:	b480      	push	{r7}
 8002958:	b085      	sub	sp, #20
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
 800295e:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002966:	2300      	movs	r3, #0
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	e010      	b.n	800298e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6839      	ldr	r1, [r7, #0]
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	440a      	add	r2, r1
 8002976:	7812      	ldrb	r2, [r2, #0]
 8002978:	4611      	mov	r1, r2
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	00d2      	lsls	r2, r2, #3
 800297e:	fa01 f202 	lsl.w	r2, r1, r2
 8002982:	431a      	orrs	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	3301      	adds	r3, #1
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2b03      	cmp	r3, #3
 8002992:	d9eb      	bls.n	800296c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8002994:	bf00      	nop
 8002996:	bf00      	nop
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
	...

080029a4 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	4a04      	ldr	r2, [pc, #16]	; (80029c0 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4618      	mov	r0, r3
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	08007c78 	.word	0x08007c78

080029c4 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
 80029d0:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff ffe5 	bl	80029a4 <_ZN3ros11Subscriber_C1Ev>
 80029da:	4a0b      	ldr	r2, [pc, #44]	; (8002a08 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvEC1EPKcPFvRKS2_Ei+0x44>)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	330c      	adds	r3, #12
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff f94d 	bl	8001c84 <_ZN8std_msgs5EmptyC1Ev>
    cb_(cb),
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	611a      	str	r2, [r3, #16]
    endpoint_(endpoint)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	615a      	str	r2, [r3, #20]
  {
    topic_ = topic_name;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	609a      	str	r2, [r3, #8]
  };
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4618      	mov	r0, r3
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	08007bbc 	.word	0x08007bbc

08002a0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3304      	adds	r3, #4
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7fe f93b 	bl	8000c94 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
    bytes_ = 0;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
    index_ = 0;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
    topic_ = 0;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
  };
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8002a46:	b480      	push	{r7}
 8002a48:	b085      	sub	sp, #20
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
 8002a4e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002a50:	2300      	movs	r3, #0
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	e01b      	b.n	8002a8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x48>
    {
      if (publishers[i] == 0) // empty slot
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8002a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d110      	bne.n	8002a88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x42>
      {
        publishers[i] = &p;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8002a6e:	6839      	ldr	r1, [r7, #0]
 8002a70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	60da      	str	r2, [r3, #12]
        return true;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e006      	b.n	8002a96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2b18      	cmp	r3, #24
 8002a92:	dde0      	ble.n	8002a56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 8002a94:	2300      	movs	r3, #0
  }
 8002a96:	4618      	mov	r0, r3
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 8002aa2:	b480      	push	{r7}
 8002aa4:	b085      	sub	sp, #20
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
 8002aaa:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002aac:	2300      	movs	r3, #0
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	e01a      	b.n	8002ae8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x46>
    {
      if (subscribers[i] == 0) // empty slot
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10e      	bne.n	8002ae2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	605a      	str	r2, [r3, #4]
        return true;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e006      	b.n	8002af0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2b18      	cmp	r3, #24
 8002aec:	dde1      	ble.n	8002ab2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 8002aee:	2300      	movs	r3, #0
  }
 8002af0:	4618      	mov	r0, r3
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3304      	adds	r3, #4
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7fe f8ef 	bl	8000cec <_ZN13STM32Hardware4timeEv>
 8002b0e:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d903      	bls.n	8002b2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
    if (mode_ != MODE_FIRST_FF)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d009      	beq.n	8002b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d903      	bls.n	8002b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
      if (spin_timeout_ > 0)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d013      	beq.n	8002b78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3304      	adds	r3, #4
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fe f8c9 	bl	8000cec <_ZN13STM32Hardware4timeEv>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	1ad2      	subs	r2, r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	bf8c      	ite	hi
 8002b68:	2301      	movhi	r3, #1
 8002b6a:	2300      	movls	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d002      	beq.n	8002b78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
          return SPIN_TIMEOUT;
 8002b72:	f06f 0301 	mvn.w	r3, #1
 8002b76:	e190      	b.n	8002e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
      int data = hardware_.read();
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3304      	adds	r3, #4
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7fe f896 	bl	8000cae <_ZN13STM32Hardware4readEv>
 8002b82:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f2c0 8170 	blt.w	8002e6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x370>
      checksum_ += data;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	441a      	add	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002ba2:	2b07      	cmp	r3, #7
 8002ba4:	d11d      	bne.n	8002be2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xe6>
        message_in[index_++] = data;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002bac:	1c59      	adds	r1, r3, #1
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	f8c2 14ec 	str.w	r1, [r2, #1260]	; 0x4ec
 8002bb4:	68ba      	ldr	r2, [r7, #8]
 8002bb6:	b2d1      	uxtb	r1, r2
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	4413      	add	r3, r2
 8002bbc:	460a      	mov	r2, r1
 8002bbe:	761a      	strb	r2, [r3, #24]
        bytes_--;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8002bc6:	1e5a      	subs	r2, r3, #1
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1b7      	bne.n	8002b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2208      	movs	r2, #8
 8002bdc:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8002be0:	e7b2      	b.n	8002b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d128      	bne.n	8002c3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x142>
        if (data == 0xff)
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2bff      	cmp	r3, #255	; 0xff
 8002bf0:	d10d      	bne.n	8002c0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x112>
          mode_++;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f103 0214 	add.w	r2, r3, #20
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8002c0c:	e79c      	b.n	8002b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	3304      	adds	r3, #4
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fe f86a 	bl	8000cec <_ZN13STM32Hardware4timeEv>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c22:	4293      	cmp	r3, r2
 8002c24:	bf8c      	ite	hi
 8002c26:	2301      	movhi	r3, #1
 8002c28:	2300      	movls	r3, #0
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d08b      	beq.n	8002b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
          return SPIN_TIMEOUT;
 8002c38:	f06f 0301 	mvn.w	r3, #1
 8002c3c:	e12d      	b.n	8002e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
      else if (mode_ == MODE_PROTOCOL_VER)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d118      	bne.n	8002c7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x17e>
        if (data == PROTOCOL_VER)
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2bfe      	cmp	r3, #254	; 0xfe
 8002c4c:	d107      	bne.n	8002c5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x162>
          mode_++;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002c54:	1c5a      	adds	r2, r3, #1
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8002c5c:	e774      	b.n	8002b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          if (configured_ == false)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f47f af6b 	bne.w	8002b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f915 	bl	8002ea2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8002c78:	e766      	b.n	8002b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d113      	bne.n	8002cac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b0>
        bytes_ = data;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        index_ = 0;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
        mode_++;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002c9a:	1c5a      	adds	r2, r3, #1
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte for calculating size checksum */
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8002caa:	e74d      	b.n	8002b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002cb2:	2b03      	cmp	r3, #3
 8002cb4:	d110      	bne.n	8002cd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1dc>
        bytes_ += data << 8;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f8d3 24e4 	ldr.w	r2, [r3, #1252]	; 0x4e4
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	021b      	lsls	r3, r3, #8
 8002cc0:	441a      	add	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        mode_++;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002cce:	1c5a      	adds	r2, r3, #1
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8002cd6:	e737      	b.n	8002b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d116      	bne.n	8002d10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x214>
        if ((checksum_ % 256) == 255)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8002ce8:	425a      	negs	r2, r3
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	bf58      	it	pl
 8002cf0:	4253      	negpl	r3, r2
 8002cf2:	2bff      	cmp	r3, #255	; 0xff
 8002cf4:	d107      	bne.n	8002d06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x20a>
          mode_++;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002cfc:	1c5a      	adds	r2, r3, #1
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8002d04:	e720      	b.n	8002b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8002d0e:	e71b      	b.n	8002b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002d16:	2b05      	cmp	r3, #5
 8002d18:	d10f      	bne.n	8002d3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x23e>
        topic_ = data;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_++;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002d28:	1c5a      	adds	r2, r3, #1
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte included in checksum */
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68ba      	ldr	r2, [r7, #8]
 8002d34:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8002d38:	e706      	b.n	8002b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002d40:	2b06      	cmp	r3, #6
 8002d42:	d117      	bne.n	8002d74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x278>
        topic_ += data << 8;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	; 0x4e8
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	021b      	lsls	r3, r3, #8
 8002d4e:	441a      	add	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_ = MODE_MESSAGE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2207      	movs	r2, #7
 8002d5a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if (bytes_ == 0)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f47f aeef 	bne.w	8002b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2208      	movs	r2, #8
 8002d6e:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8002d72:	e6e9      	b.n	8002b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002d7a:	2b08      	cmp	r3, #8
 8002d7c:	f47f aee4 	bne.w	8002b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if ((checksum_ % 256) == 255)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8002d8e:	425a      	negs	r2, r3
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	bf58      	it	pl
 8002d96:	4253      	negpl	r3, r2
 8002d98:	2bff      	cmp	r3, #255	; 0xff
 8002d9a:	f47f aed5 	bne.w	8002b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d110      	bne.n	8002dca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ce>
            requestSyncTime();
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 f87a 	bl	8002ea2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f894 	bl	8002edc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
            last_sync_receive_time = c_time;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
            return SPIN_ERR;
 8002dc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dc8:	e067      	b.n	8002e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
          else if (topic_ == TopicInfo::ID_TIME)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8002dd0:	2b0a      	cmp	r3, #10
 8002dd2:	d106      	bne.n	8002de2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e6>
            syncTime(message_in);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3318      	adds	r3, #24
 8002dd8:	4619      	mov	r1, r3
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f95e 	bl	800309c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8002de0:	e6b2      	b.n	8002b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8002de8:	2b06      	cmp	r3, #6
 8002dea:	d10d      	bne.n	8002e08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x30c>
            req_param_resp.deserialize(message_in);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3318      	adds	r3, #24
 8002df6:	4619      	mov	r1, r3
 8002df8:	4610      	mov	r0, r2
 8002dfa:	f7fe fd7e 	bl	80018fa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 8002e06:	e69f      	b.n	8002b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8002e0e:	2b0b      	cmp	r3, #11
 8002e10:	d104      	bne.n	8002e1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x320>
            configured_ = false;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 8002e1a:	e695      	b.n	8002b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8002e22:	3b64      	subs	r3, #100	; 0x64
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f43f ae89 	beq.w	8002b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8002e3c:	3b64      	subs	r3, #100	; 0x64
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	6858      	ldr	r0, [r3, #4]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8002e50:	3b64      	subs	r3, #100	; 0x64
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	3218      	adds	r2, #24
 8002e66:	4611      	mov	r1, r2
 8002e68:	4798      	blx	r3
    while (true)
 8002e6a:	e66d      	b.n	8002b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8002e6c:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00f      	beq.n	8002e98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d906      	bls.n	8002e98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>
      requestSyncTime();
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f809 	bl	8002ea2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    return SPIN_OK;
 8002e98:	2300      	movs	r3, #0
  }
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b086      	sub	sp, #24
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8002eaa:	f107 030c 	add.w	r3, r7, #12
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fe f880 	bl	8000fb4 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f107 020c 	add.w	r2, r7, #12
 8002ebe:	210a      	movs	r1, #10
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	4798      	blx	r3
    rt_time = hardware_.time();
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3304      	adds	r3, #4
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7fd ff0f 	bl	8000cec <_ZN13STM32Hardware4timeEv>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	609a      	str	r2, [r3, #8]
  }
 8002ed4:	bf00      	nop
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8002edc:	b590      	push	{r4, r7, lr}
 8002ede:	b08b      	sub	sp, #44	; 0x2c
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8002ee4:	f107 030c 	add.w	r3, r7, #12
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fe f953 	bl	8001194 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002eee:	2300      	movs	r3, #0
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef2:	e05a      	b.n	8002faa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xce>
    {
      if (publishers[i] != 0) // non-empty slot
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef8:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8002efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d04f      	beq.n	8002fa4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xc8>
      {
        ti.topic_id = publishers[i]->id_;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f08:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8002f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f1a:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8002f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f2a:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8002f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f32:	6859      	ldr	r1, [r3, #4]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f38:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8002f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	3308      	adds	r3, #8
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4608      	mov	r0, r1
 8002f4a:	4798      	blx	r3
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f54:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8002f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f5c:	6859      	ldr	r1, [r3, #4]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f62:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8002f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	330c      	adds	r3, #12
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4608      	mov	r0, r1
 8002f74:	4798      	blx	r3
 8002f76:	4603      	mov	r3, r0
 8002f78:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8002f7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f7e:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681c      	ldr	r4, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f8a:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8002f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fe fe69 	bl	8001c6a <_ZN3ros9Publisher15getEndpointTypeEv>
 8002f98:	4601      	mov	r1, r0
 8002f9a:	f107 030c 	add.w	r3, r7, #12
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	2b18      	cmp	r3, #24
 8002fae:	dda1      	ble.n	8002ef4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb4:	e067      	b.n	8003086 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1aa>
    {
      if (subscribers[i] != 0) // non-empty slot
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d05b      	beq.n	8003080 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a4>
      {
        ti.topic_id = subscribers[i]->id_;
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fcc:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4413      	add	r3, r2
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	6859      	ldr	r1, [r3, #4]
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	3308      	adds	r3, #8
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4608      	mov	r0, r1
 8003012:	4798      	blx	r3
 8003014:	4603      	mov	r3, r0
 8003016:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	6859      	ldr	r1, [r3, #4]
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4413      	add	r3, r2
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	330c      	adds	r3, #12
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4608      	mov	r0, r1
 800303c:	4798      	blx	r3
 800303e:	4603      	mov	r3, r0
 8003040:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003042:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003046:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681c      	ldr	r4, [r3, #0]
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	6859      	ldr	r1, [r3, #4]
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003060:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	3304      	adds	r3, #4
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4608      	mov	r0, r1
 8003072:	4798      	blx	r3
 8003074:	4601      	mov	r1, r0
 8003076:	f107 030c 	add.w	r3, r7, #12
 800307a:	461a      	mov	r2, r3
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	3301      	adds	r3, #1
 8003084:	627b      	str	r3, [r7, #36]	; 0x24
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	2b18      	cmp	r3, #24
 800308a:	dd94      	ble.n	8002fb6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xda>
      }
    }
    configured_ = true;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  }
 8003094:	bf00      	nop
 8003096:	372c      	adds	r7, #44	; 0x2c
 8003098:	46bd      	mov	sp, r7
 800309a:	bd90      	pop	{r4, r7, pc}

0800309c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80030a6:	f107 0308 	add.w	r3, r7, #8
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fd ff82 	bl	8000fb4 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3304      	adds	r3, #4
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7fd fe19 	bl	8000cec <_ZN13STM32Hardware4timeEv>
 80030ba:	4602      	mov	r2, r0
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80030c4:	f107 0308 	add.w	r3, r7, #8
 80030c8:	6839      	ldr	r1, [r7, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fd ffe2 	bl	8001094 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	4914      	ldr	r1, [pc, #80]	; (8003128 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 80030d6:	fba1 1303 	umull	r1, r3, r1, r3
 80030da:	099b      	lsrs	r3, r3, #6
 80030dc:	4413      	add	r3, r2
 80030de:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80030e0:	6939      	ldr	r1, [r7, #16]
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	4b10      	ldr	r3, [pc, #64]	; (8003128 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 80030e6:	fba3 0302 	umull	r0, r3, r3, r2
 80030ea:	099b      	lsrs	r3, r3, #6
 80030ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030f0:	fb00 f303 	mul.w	r3, r0, r3
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	4a0d      	ldr	r2, [pc, #52]	; (800312c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80030f8:	fb02 f303 	mul.w	r3, r2, r3
 80030fc:	440b      	add	r3, r1
 80030fe:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003100:	f107 0308 	add.w	r3, r7, #8
 8003104:	3304      	adds	r3, #4
 8003106:	4619      	mov	r1, r3
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f8a5 	bl	8003258 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	3304      	adds	r3, #4
 8003112:	4618      	mov	r0, r3
 8003114:	f7fd fdea 	bl	8000cec <_ZN13STM32Hardware4timeEv>
 8003118:	4602      	mov	r2, r0
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
  }
 8003120:	bf00      	nop
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	10624dd3 	.word	0x10624dd3
 800312c:	000f4240 	.word	0x000f4240

08003130 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8003130:	b580      	push	{r7, lr}
 8003132:	b088      	sub	sp, #32
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	2b63      	cmp	r3, #99	; 0x63
 8003140:	dd09      	ble.n	8003156 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003148:	f083 0301 	eor.w	r3, r3, #1
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8003152:	2300      	movs	r3, #0
 8003154:	e079      	b.n	800324a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	f502 7206 	add.w	r2, r2, #536	; 0x218
 8003162:	3207      	adds	r2, #7
 8003164:	4611      	mov	r1, r2
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	4798      	blx	r3
 800316a:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	22ff      	movs	r2, #255	; 0xff
 8003170:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
    message_out[1] = PROTOCOL_VER;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	22fe      	movs	r2, #254	; 0xfe
 8003178:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	b2da      	uxtb	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	b29b      	uxth	r3, r3
 800318a:	0a1b      	lsrs	r3, r3, #8
 800318c:	b29b      	uxth	r3, r3
 800318e:	b2da      	uxtb	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 80031a2:	4413      	add	r3, r2
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	43db      	mvns	r3, r3
 80031a8:	b2da      	uxtb	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	b21b      	sxth	r3, r3
 80031be:	121b      	asrs	r3, r3, #8
 80031c0:	b21b      	sxth	r3, r3
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e

    /* calculate checksum */
    int chk = 0;
 80031ca:	2300      	movs	r3, #0
 80031cc:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80031ce:	2305      	movs	r3, #5
 80031d0:	61bb      	str	r3, [r7, #24]
 80031d2:	e00c      	b.n	80031ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	4413      	add	r3, r2
 80031da:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	461a      	mov	r2, r3
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	4413      	add	r3, r2
 80031e6:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	3301      	adds	r3, #1
 80031ec:	61bb      	str	r3, [r7, #24]
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	3306      	adds	r3, #6
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	dded      	ble.n	80031d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	3307      	adds	r3, #7
 80031fc:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	425a      	negs	r2, r3
 8003202:	b2db      	uxtb	r3, r3
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	bf58      	it	pl
 8003208:	4253      	negpl	r3, r2
 800320a:	b2da      	uxtb	r2, r3
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	1c59      	adds	r1, r3, #1
 8003210:	6179      	str	r1, [r7, #20]
 8003212:	43d2      	mvns	r2, r2
 8003214:	b2d1      	uxtb	r1, r2
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	4413      	add	r3, r2
 800321a:	460a      	mov	r2, r1
 800321c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

    if (l <= OUTPUT_SIZE)
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003226:	dc0a      	bgt.n	800323e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	1d18      	adds	r0, r3, #4
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	4619      	mov	r1, r3
 8003236:	f7fd fd48 	bl	8000cca <_ZN13STM32Hardware5writeEPhi>
      return l;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	e005      	b.n	800324a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800323e:	4905      	ldr	r1, [pc, #20]	; (8003254 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f000 f847 	bl	80032d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003246:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 800324a:	4618      	mov	r0, r3
 800324c:	3720      	adds	r7, #32
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	08007b44 	.word	0x08007b44

08003258 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	3304      	adds	r3, #4
 8003266:	4618      	mov	r0, r3
 8003268:	f7fd fd40 	bl	8000cec <_ZN13STM32Hardware4timeEv>
 800326c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4914      	ldr	r1, [pc, #80]	; (80032c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x70>)
 8003276:	fba1 1303 	umull	r1, r3, r1, r3
 800327a:	099b      	lsrs	r3, r3, #6
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	1e5a      	subs	r2, r3, #1
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	6859      	ldr	r1, [r3, #4]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	4b0f      	ldr	r3, [pc, #60]	; (80032c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x70>)
 800328c:	fba3 0302 	umull	r0, r3, r3, r2
 8003290:	099b      	lsrs	r3, r3, #6
 8003292:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003296:	fb00 f303 	mul.w	r3, r0, r3
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	4a0b      	ldr	r2, [pc, #44]	; (80032cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 800329e:	fb02 f303 	mul.w	r3, r2, r3
 80032a2:	1aca      	subs	r2, r1, r3
 80032a4:	4b0a      	ldr	r3, [pc, #40]	; (80032d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 80032a6:	4413      	add	r3, r2
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f103 020c 	add.w	r2, r3, #12
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	3310      	adds	r3, #16
 80032b6:	4619      	mov	r1, r3
 80032b8:	4610      	mov	r0, r2
 80032ba:	f000 fb4f 	bl	800395c <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80032be:	bf00      	nop
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	10624dd3 	.word	0x10624dd3
 80032cc:	000f4240 	.word	0x000f4240
 80032d0:	3b9aca00 	.word	0x3b9aca00

080032d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	2103      	movs	r1, #3
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f804 	bl	80032f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80032e8:	bf00      	nop
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b088      	sub	sp, #32
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	460b      	mov	r3, r1
 80032fa:	607a      	str	r2, [r7, #4]
 80032fc:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80032fe:	f107 0314 	add.w	r3, r7, #20
 8003302:	4618      	mov	r0, r3
 8003304:	f7fe f90a 	bl	800151c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003308:	7afb      	ldrb	r3, [r7, #11]
 800330a:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f107 0214 	add.w	r2, r7, #20
 800331a:	2107      	movs	r1, #7
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	4798      	blx	r3
  }
 8003320:	bf00      	nop
 8003322:	3720      	adds	r7, #32
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <_Z41__static_initialization_and_destruction_0ii>:
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d11f      	bne.n	8003378 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800333e:	4293      	cmp	r3, r2
 8003340:	d11a      	bne.n	8003378 <_Z41__static_initialization_and_destruction_0ii+0x50>
ros::NodeHandle nh;
 8003342:	480f      	ldr	r0, [pc, #60]	; (8003380 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003344:	f7ff fa18 	bl	8002778 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 8003348:	480e      	ldr	r0, [pc, #56]	; (8003384 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800334a:	f7fe fce5 	bl	8001d18 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 800334e:	2300      	movs	r3, #0
 8003350:	4a0c      	ldr	r2, [pc, #48]	; (8003384 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003352:	490d      	ldr	r1, [pc, #52]	; (8003388 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003354:	480d      	ldr	r0, [pc, #52]	; (800338c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8003356:	f7fe fc5d 	bl	8001c14 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Empty> led_sub("toggle_led", &led_cb);
 800335a:	2301      	movs	r3, #1
 800335c:	4a0c      	ldr	r2, [pc, #48]	; (8003390 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800335e:	490d      	ldr	r1, [pc, #52]	; (8003394 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8003360:	480d      	ldr	r0, [pc, #52]	; (8003398 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8003362:	f7ff fb2f 	bl	80029c4 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvEC1EPKcPFvRKS2_Ei>
sensor_msgs::Imu imu_msg;
 8003366:	480d      	ldr	r0, [pc, #52]	; (800339c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8003368:	f7ff f872 	bl	8002450 <_ZN11sensor_msgs3ImuC1Ev>
ros::Publisher mpu9250("imu", &imu_msg);
 800336c:	2300      	movs	r3, #0
 800336e:	4a0b      	ldr	r2, [pc, #44]	; (800339c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8003370:	490b      	ldr	r1, [pc, #44]	; (80033a0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8003372:	480c      	ldr	r0, [pc, #48]	; (80033a4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003374:	f7fe fc4e 	bl	8001c14 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8003378:	bf00      	nop
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	2000069c 	.word	0x2000069c
 8003384:	20000bcc 	.word	0x20000bcc
 8003388:	08007b80 	.word	0x08007b80
 800338c:	20000bd4 	.word	0x20000bd4
 8003390:	0800285d 	.word	0x0800285d
 8003394:	08007b88 	.word	0x08007b88
 8003398:	20000be8 	.word	0x20000be8
 800339c:	20000c00 	.word	0x20000c00
 80033a0:	08007b94 	.word	0x08007b94
 80033a4:	20000cb8 	.word	0x20000cb8

080033a8 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	330c      	adds	r3, #12
 80033b6:	6839      	ldr	r1, [r7, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fe fc83 	bl	8001cc4 <_ZN8std_msgs5Empty11deserializeEPh>
    this->cb_(msg);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	320c      	adds	r2, #12
 80033c6:	4610      	mov	r0, r2
 80033c8:	4798      	blx	r3
  }
 80033ca:	bf00      	nop
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695b      	ldr	r3, [r3, #20]
  }
 80033de:	4618      	mov	r0, r3
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b082      	sub	sp, #8
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	330c      	adds	r3, #12
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fe fc72 	bl	8001ce0 <_ZN8std_msgs5Empty7getTypeEv>
 80033fc:	4603      	mov	r3, r0
  }
 80033fe:	4618      	mov	r0, r3
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8003406:	b580      	push	{r7, lr}
 8003408:	b082      	sub	sp, #8
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	330c      	adds	r3, #12
 8003412:	4618      	mov	r0, r3
 8003414:	f7fe fc72 	bl	8001cfc <_ZN8std_msgs5Empty6getMD5Ev>
 8003418:	4603      	mov	r3, r0
  }
 800341a:	4618      	mov	r0, r3
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8003422:	b480      	push	{r7}
 8003424:	b083      	sub	sp, #12
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
    return configured_;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
  };
 8003430:	4618      	mov	r0, r3
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <_GLOBAL__sub_I_nh>:
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
 8003440:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003444:	2001      	movs	r0, #1
 8003446:	f7ff ff6f 	bl	8003328 <_Z41__static_initialization_and_destruction_0ii>
 800344a:	bd80      	pop	{r7, pc}

0800344c <MOTOR_Create>:
 * The function creates and initializes a new instance of the MOTOR structure.
 *
 * @return a pointer to a structure of type motor_t;
 */
motor_t *MOTOR_Create()
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
	motor_t *motor_p = malloc(sizeof(motor_t));
 8003452:	2008      	movs	r0, #8
 8003454:	f004 f8c8 	bl	80075e8 <malloc>
 8003458:	4603      	mov	r3, r0
 800345a:	607b      	str	r3, [r7, #4]
	if(motor_p != NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <MOTOR_Create+0x1e>
	{
		MOTOR_Init(motor_p,MOTOR_ControlSpeed);
 8003462:	4904      	ldr	r1, [pc, #16]	; (8003474 <MOTOR_Create+0x28>)
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 f807 	bl	8003478 <MOTOR_Init>
	}
	return motor_p;
 800346a:	687b      	ldr	r3, [r7, #4]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3708      	adds	r7, #8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	0800349d 	.word	0x0800349d

08003478 <MOTOR_Init>:
 *
 * @param1: motor_p is a pointer to a structure of type motor_t.
 * @param2: (*ctrl_speed_func)(motor_t *motor_p) is a control speed function.
 */
void MOTOR_Init(motor_t *motor_p, void (*ctrl_speed_func)(motor_t *motor_p))
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
	motor_p->control_speed = ctrl_speed_func;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003488:	2100      	movs	r1, #0
 800348a:	4803      	ldr	r0, [pc, #12]	; (8003498 <MOTOR_Init+0x20>)
 800348c:	f002 f8a0 	bl	80055d0 <HAL_TIM_PWM_Start>
}
 8003490:	bf00      	nop
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	200004ec 	.word	0x200004ec

0800349c <MOTOR_ControlSpeed>:
 * The function MOTOR_ControlSpeed controls speed of the motor.
 *
 * @param1: motor_p is a pointer to a structure of type motor_t.
 */
void MOTOR_ControlSpeed(motor_t *motor_p)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
//	TIM1->CCR1 = motor_p->Prop_p.speed;
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,motor_p->Prop_p.speed);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	889a      	ldrh	r2, [r3, #4]
 80034a8:	4b04      	ldr	r3, [pc, #16]	; (80034bc <MOTOR_ControlSpeed+0x20>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	635a      	str	r2, [r3, #52]	; 0x34
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	200004ec 	.word	0x200004ec

080034c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034c6:	2300      	movs	r3, #0
 80034c8:	607b      	str	r3, [r7, #4]
 80034ca:	4b10      	ldr	r3, [pc, #64]	; (800350c <HAL_MspInit+0x4c>)
 80034cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ce:	4a0f      	ldr	r2, [pc, #60]	; (800350c <HAL_MspInit+0x4c>)
 80034d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034d4:	6453      	str	r3, [r2, #68]	; 0x44
 80034d6:	4b0d      	ldr	r3, [pc, #52]	; (800350c <HAL_MspInit+0x4c>)
 80034d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034de:	607b      	str	r3, [r7, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034e2:	2300      	movs	r3, #0
 80034e4:	603b      	str	r3, [r7, #0]
 80034e6:	4b09      	ldr	r3, [pc, #36]	; (800350c <HAL_MspInit+0x4c>)
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	4a08      	ldr	r2, [pc, #32]	; (800350c <HAL_MspInit+0x4c>)
 80034ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034f0:	6413      	str	r3, [r2, #64]	; 0x40
 80034f2:	4b06      	ldr	r3, [pc, #24]	; (800350c <HAL_MspInit+0x4c>)
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034fa:	603b      	str	r3, [r7, #0]
 80034fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80034fe:	2007      	movs	r0, #7
 8003500:	f000 fbe8 	bl	8003cd4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003504:	bf00      	nop
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40023800 	.word	0x40023800

08003510 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08a      	sub	sp, #40	; 0x28
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003518:	f107 0314 	add.w	r3, r7, #20
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	605a      	str	r2, [r3, #4]
 8003522:	609a      	str	r2, [r3, #8]
 8003524:	60da      	str	r2, [r3, #12]
 8003526:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a19      	ldr	r2, [pc, #100]	; (8003594 <HAL_I2C_MspInit+0x84>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d12b      	bne.n	800358a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003532:	2300      	movs	r3, #0
 8003534:	613b      	str	r3, [r7, #16]
 8003536:	4b18      	ldr	r3, [pc, #96]	; (8003598 <HAL_I2C_MspInit+0x88>)
 8003538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353a:	4a17      	ldr	r2, [pc, #92]	; (8003598 <HAL_I2C_MspInit+0x88>)
 800353c:	f043 0302 	orr.w	r3, r3, #2
 8003540:	6313      	str	r3, [r2, #48]	; 0x30
 8003542:	4b15      	ldr	r3, [pc, #84]	; (8003598 <HAL_I2C_MspInit+0x88>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	613b      	str	r3, [r7, #16]
 800354c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800354e:	23c0      	movs	r3, #192	; 0xc0
 8003550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003552:	2312      	movs	r3, #18
 8003554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003556:	2300      	movs	r3, #0
 8003558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800355a:	2303      	movs	r3, #3
 800355c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800355e:	2304      	movs	r3, #4
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003562:	f107 0314 	add.w	r3, r7, #20
 8003566:	4619      	mov	r1, r3
 8003568:	480c      	ldr	r0, [pc, #48]	; (800359c <HAL_I2C_MspInit+0x8c>)
 800356a:	f000 fff7 	bl	800455c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800356e:	2300      	movs	r3, #0
 8003570:	60fb      	str	r3, [r7, #12]
 8003572:	4b09      	ldr	r3, [pc, #36]	; (8003598 <HAL_I2C_MspInit+0x88>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	4a08      	ldr	r2, [pc, #32]	; (8003598 <HAL_I2C_MspInit+0x88>)
 8003578:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800357c:	6413      	str	r3, [r2, #64]	; 0x40
 800357e:	4b06      	ldr	r3, [pc, #24]	; (8003598 <HAL_I2C_MspInit+0x88>)
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800358a:	bf00      	nop
 800358c:	3728      	adds	r7, #40	; 0x28
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40005400 	.word	0x40005400
 8003598:	40023800 	.word	0x40023800
 800359c:	40020400 	.word	0x40020400

080035a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a22      	ldr	r2, [pc, #136]	; (8003638 <HAL_TIM_Base_MspInit+0x98>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d13d      	bne.n	800362e <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80035b2:	2300      	movs	r3, #0
 80035b4:	60fb      	str	r3, [r7, #12]
 80035b6:	4b21      	ldr	r3, [pc, #132]	; (800363c <HAL_TIM_Base_MspInit+0x9c>)
 80035b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ba:	4a20      	ldr	r2, [pc, #128]	; (800363c <HAL_TIM_Base_MspInit+0x9c>)
 80035bc:	f043 0301 	orr.w	r3, r3, #1
 80035c0:	6453      	str	r3, [r2, #68]	; 0x44
 80035c2:	4b1e      	ldr	r3, [pc, #120]	; (800363c <HAL_TIM_Base_MspInit+0x9c>)
 80035c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80035ce:	4b1c      	ldr	r3, [pc, #112]	; (8003640 <HAL_TIM_Base_MspInit+0xa0>)
 80035d0:	4a1c      	ldr	r2, [pc, #112]	; (8003644 <HAL_TIM_Base_MspInit+0xa4>)
 80035d2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80035d4:	4b1a      	ldr	r3, [pc, #104]	; (8003640 <HAL_TIM_Base_MspInit+0xa0>)
 80035d6:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80035da:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035dc:	4b18      	ldr	r3, [pc, #96]	; (8003640 <HAL_TIM_Base_MspInit+0xa0>)
 80035de:	2200      	movs	r2, #0
 80035e0:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80035e2:	4b17      	ldr	r3, [pc, #92]	; (8003640 <HAL_TIM_Base_MspInit+0xa0>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80035e8:	4b15      	ldr	r3, [pc, #84]	; (8003640 <HAL_TIM_Base_MspInit+0xa0>)
 80035ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035ee:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80035f0:	4b13      	ldr	r3, [pc, #76]	; (8003640 <HAL_TIM_Base_MspInit+0xa0>)
 80035f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035f6:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80035f8:	4b11      	ldr	r3, [pc, #68]	; (8003640 <HAL_TIM_Base_MspInit+0xa0>)
 80035fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80035fe:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8003600:	4b0f      	ldr	r3, [pc, #60]	; (8003640 <HAL_TIM_Base_MspInit+0xa0>)
 8003602:	2200      	movs	r2, #0
 8003604:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003606:	4b0e      	ldr	r3, [pc, #56]	; (8003640 <HAL_TIM_Base_MspInit+0xa0>)
 8003608:	2200      	movs	r2, #0
 800360a:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800360c:	4b0c      	ldr	r3, [pc, #48]	; (8003640 <HAL_TIM_Base_MspInit+0xa0>)
 800360e:	2200      	movs	r2, #0
 8003610:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8003612:	480b      	ldr	r0, [pc, #44]	; (8003640 <HAL_TIM_Base_MspInit+0xa0>)
 8003614:	f000 fba0 	bl	8003d58 <HAL_DMA_Init>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 800361e:	f7fd fb23 	bl	8000c68 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a06      	ldr	r2, [pc, #24]	; (8003640 <HAL_TIM_Base_MspInit+0xa0>)
 8003626:	625a      	str	r2, [r3, #36]	; 0x24
 8003628:	4a05      	ldr	r2, [pc, #20]	; (8003640 <HAL_TIM_Base_MspInit+0xa0>)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800362e:	bf00      	nop
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	40010000 	.word	0x40010000
 800363c:	40023800 	.word	0x40023800
 8003640:	20000534 	.word	0x20000534
 8003644:	40026428 	.word	0x40026428

08003648 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b088      	sub	sp, #32
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003650:	f107 030c 	add.w	r3, r7, #12
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	605a      	str	r2, [r3, #4]
 800365a:	609a      	str	r2, [r3, #8]
 800365c:	60da      	str	r2, [r3, #12]
 800365e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a12      	ldr	r2, [pc, #72]	; (80036b0 <HAL_TIM_MspPostInit+0x68>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d11e      	bne.n	80036a8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800366a:	2300      	movs	r3, #0
 800366c:	60bb      	str	r3, [r7, #8]
 800366e:	4b11      	ldr	r3, [pc, #68]	; (80036b4 <HAL_TIM_MspPostInit+0x6c>)
 8003670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003672:	4a10      	ldr	r2, [pc, #64]	; (80036b4 <HAL_TIM_MspPostInit+0x6c>)
 8003674:	f043 0310 	orr.w	r3, r3, #16
 8003678:	6313      	str	r3, [r2, #48]	; 0x30
 800367a:	4b0e      	ldr	r3, [pc, #56]	; (80036b4 <HAL_TIM_MspPostInit+0x6c>)
 800367c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367e:	f003 0310 	and.w	r3, r3, #16
 8003682:	60bb      	str	r3, [r7, #8]
 8003684:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003686:	f44f 7300 	mov.w	r3, #512	; 0x200
 800368a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368c:	2302      	movs	r3, #2
 800368e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003690:	2300      	movs	r3, #0
 8003692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003694:	2300      	movs	r3, #0
 8003696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003698:	2301      	movs	r3, #1
 800369a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800369c:	f107 030c 	add.w	r3, r7, #12
 80036a0:	4619      	mov	r1, r3
 80036a2:	4805      	ldr	r0, [pc, #20]	; (80036b8 <HAL_TIM_MspPostInit+0x70>)
 80036a4:	f000 ff5a 	bl	800455c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80036a8:	bf00      	nop
 80036aa:	3720      	adds	r7, #32
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40010000 	.word	0x40010000
 80036b4:	40023800 	.word	0x40023800
 80036b8:	40021000 	.word	0x40021000

080036bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08a      	sub	sp, #40	; 0x28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036c4:	f107 0314 	add.w	r3, r7, #20
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	605a      	str	r2, [r3, #4]
 80036ce:	609a      	str	r2, [r3, #8]
 80036d0:	60da      	str	r2, [r3, #12]
 80036d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a4c      	ldr	r2, [pc, #304]	; (800380c <HAL_UART_MspInit+0x150>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	f040 8092 	bne.w	8003804 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80036e0:	2300      	movs	r3, #0
 80036e2:	613b      	str	r3, [r7, #16]
 80036e4:	4b4a      	ldr	r3, [pc, #296]	; (8003810 <HAL_UART_MspInit+0x154>)
 80036e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e8:	4a49      	ldr	r2, [pc, #292]	; (8003810 <HAL_UART_MspInit+0x154>)
 80036ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ee:	6413      	str	r3, [r2, #64]	; 0x40
 80036f0:	4b47      	ldr	r3, [pc, #284]	; (8003810 <HAL_UART_MspInit+0x154>)
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f8:	613b      	str	r3, [r7, #16]
 80036fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036fc:	2300      	movs	r3, #0
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	4b43      	ldr	r3, [pc, #268]	; (8003810 <HAL_UART_MspInit+0x154>)
 8003702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003704:	4a42      	ldr	r2, [pc, #264]	; (8003810 <HAL_UART_MspInit+0x154>)
 8003706:	f043 0301 	orr.w	r3, r3, #1
 800370a:	6313      	str	r3, [r2, #48]	; 0x30
 800370c:	4b40      	ldr	r3, [pc, #256]	; (8003810 <HAL_UART_MspInit+0x154>)
 800370e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	60fb      	str	r3, [r7, #12]
 8003716:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003718:	230c      	movs	r3, #12
 800371a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800371c:	2302      	movs	r3, #2
 800371e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003720:	2300      	movs	r3, #0
 8003722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003724:	2303      	movs	r3, #3
 8003726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003728:	2307      	movs	r3, #7
 800372a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800372c:	f107 0314 	add.w	r3, r7, #20
 8003730:	4619      	mov	r1, r3
 8003732:	4838      	ldr	r0, [pc, #224]	; (8003814 <HAL_UART_MspInit+0x158>)
 8003734:	f000 ff12 	bl	800455c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003738:	4b37      	ldr	r3, [pc, #220]	; (8003818 <HAL_UART_MspInit+0x15c>)
 800373a:	4a38      	ldr	r2, [pc, #224]	; (800381c <HAL_UART_MspInit+0x160>)
 800373c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800373e:	4b36      	ldr	r3, [pc, #216]	; (8003818 <HAL_UART_MspInit+0x15c>)
 8003740:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003744:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003746:	4b34      	ldr	r3, [pc, #208]	; (8003818 <HAL_UART_MspInit+0x15c>)
 8003748:	2200      	movs	r2, #0
 800374a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800374c:	4b32      	ldr	r3, [pc, #200]	; (8003818 <HAL_UART_MspInit+0x15c>)
 800374e:	2200      	movs	r2, #0
 8003750:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003752:	4b31      	ldr	r3, [pc, #196]	; (8003818 <HAL_UART_MspInit+0x15c>)
 8003754:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003758:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800375a:	4b2f      	ldr	r3, [pc, #188]	; (8003818 <HAL_UART_MspInit+0x15c>)
 800375c:	2200      	movs	r2, #0
 800375e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003760:	4b2d      	ldr	r3, [pc, #180]	; (8003818 <HAL_UART_MspInit+0x15c>)
 8003762:	2200      	movs	r2, #0
 8003764:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003766:	4b2c      	ldr	r3, [pc, #176]	; (8003818 <HAL_UART_MspInit+0x15c>)
 8003768:	2200      	movs	r2, #0
 800376a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800376c:	4b2a      	ldr	r3, [pc, #168]	; (8003818 <HAL_UART_MspInit+0x15c>)
 800376e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003772:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003774:	4b28      	ldr	r3, [pc, #160]	; (8003818 <HAL_UART_MspInit+0x15c>)
 8003776:	2200      	movs	r2, #0
 8003778:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800377a:	4827      	ldr	r0, [pc, #156]	; (8003818 <HAL_UART_MspInit+0x15c>)
 800377c:	f000 faec 	bl	8003d58 <HAL_DMA_Init>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003786:	f7fd fa6f 	bl	8000c68 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a22      	ldr	r2, [pc, #136]	; (8003818 <HAL_UART_MspInit+0x15c>)
 800378e:	639a      	str	r2, [r3, #56]	; 0x38
 8003790:	4a21      	ldr	r2, [pc, #132]	; (8003818 <HAL_UART_MspInit+0x15c>)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003796:	4b22      	ldr	r3, [pc, #136]	; (8003820 <HAL_UART_MspInit+0x164>)
 8003798:	4a22      	ldr	r2, [pc, #136]	; (8003824 <HAL_UART_MspInit+0x168>)
 800379a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800379c:	4b20      	ldr	r3, [pc, #128]	; (8003820 <HAL_UART_MspInit+0x164>)
 800379e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037a2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037a4:	4b1e      	ldr	r3, [pc, #120]	; (8003820 <HAL_UART_MspInit+0x164>)
 80037a6:	2240      	movs	r2, #64	; 0x40
 80037a8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037aa:	4b1d      	ldr	r3, [pc, #116]	; (8003820 <HAL_UART_MspInit+0x164>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80037b0:	4b1b      	ldr	r3, [pc, #108]	; (8003820 <HAL_UART_MspInit+0x164>)
 80037b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037b6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037b8:	4b19      	ldr	r3, [pc, #100]	; (8003820 <HAL_UART_MspInit+0x164>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037be:	4b18      	ldr	r3, [pc, #96]	; (8003820 <HAL_UART_MspInit+0x164>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80037c4:	4b16      	ldr	r3, [pc, #88]	; (8003820 <HAL_UART_MspInit+0x164>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80037ca:	4b15      	ldr	r3, [pc, #84]	; (8003820 <HAL_UART_MspInit+0x164>)
 80037cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037d0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037d2:	4b13      	ldr	r3, [pc, #76]	; (8003820 <HAL_UART_MspInit+0x164>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80037d8:	4811      	ldr	r0, [pc, #68]	; (8003820 <HAL_UART_MspInit+0x164>)
 80037da:	f000 fabd 	bl	8003d58 <HAL_DMA_Init>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 80037e4:	f7fd fa40 	bl	8000c68 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a0d      	ldr	r2, [pc, #52]	; (8003820 <HAL_UART_MspInit+0x164>)
 80037ec:	635a      	str	r2, [r3, #52]	; 0x34
 80037ee:	4a0c      	ldr	r2, [pc, #48]	; (8003820 <HAL_UART_MspInit+0x164>)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80037f4:	2200      	movs	r2, #0
 80037f6:	2100      	movs	r1, #0
 80037f8:	2026      	movs	r0, #38	; 0x26
 80037fa:	f000 fa76 	bl	8003cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80037fe:	2026      	movs	r0, #38	; 0x26
 8003800:	f000 fa8f 	bl	8003d22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003804:	bf00      	nop
 8003806:	3728      	adds	r7, #40	; 0x28
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40004400 	.word	0x40004400
 8003810:	40023800 	.word	0x40023800
 8003814:	40020000 	.word	0x40020000
 8003818:	200005d8 	.word	0x200005d8
 800381c:	40026088 	.word	0x40026088
 8003820:	20000638 	.word	0x20000638
 8003824:	400260a0 	.word	0x400260a0

08003828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800382c:	e7fe      	b.n	800382c <NMI_Handler+0x4>

0800382e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800382e:	b480      	push	{r7}
 8003830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003832:	e7fe      	b.n	8003832 <HardFault_Handler+0x4>

08003834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003838:	e7fe      	b.n	8003838 <MemManage_Handler+0x4>

0800383a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800383a:	b480      	push	{r7}
 800383c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800383e:	e7fe      	b.n	800383e <BusFault_Handler+0x4>

08003840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003844:	e7fe      	b.n	8003844 <UsageFault_Handler+0x4>

08003846 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003846:	b480      	push	{r7}
 8003848:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800384a:	bf00      	nop
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003858:	bf00      	nop
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003862:	b480      	push	{r7}
 8003864:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003866:	bf00      	nop
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003874:	f000 f91a 	bl	8003aac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003878:	bf00      	nop
 800387a:	bd80      	pop	{r7, pc}

0800387c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003880:	4802      	ldr	r0, [pc, #8]	; (800388c <DMA1_Stream5_IRQHandler+0x10>)
 8003882:	f000 fc01 	bl	8004088 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003886:	bf00      	nop
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	200005d8 	.word	0x200005d8

08003890 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003894:	4802      	ldr	r0, [pc, #8]	; (80038a0 <DMA1_Stream6_IRQHandler+0x10>)
 8003896:	f000 fbf7 	bl	8004088 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800389a:	bf00      	nop
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	20000638 	.word	0x20000638

080038a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80038a8:	4802      	ldr	r0, [pc, #8]	; (80038b4 <USART2_IRQHandler+0x10>)
 80038aa:	f002 fdbd 	bl	8006428 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80038ae:	bf00      	nop
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	20000594 	.word	0x20000594

080038b8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80038bc:	4802      	ldr	r0, [pc, #8]	; (80038c8 <DMA2_Stream1_IRQHandler+0x10>)
 80038be:	f000 fbe3 	bl	8004088 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80038c2:	bf00      	nop
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	20000534 	.word	0x20000534

080038cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038d4:	4a14      	ldr	r2, [pc, #80]	; (8003928 <_sbrk+0x5c>)
 80038d6:	4b15      	ldr	r3, [pc, #84]	; (800392c <_sbrk+0x60>)
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038e0:	4b13      	ldr	r3, [pc, #76]	; (8003930 <_sbrk+0x64>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d102      	bne.n	80038ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038e8:	4b11      	ldr	r3, [pc, #68]	; (8003930 <_sbrk+0x64>)
 80038ea:	4a12      	ldr	r2, [pc, #72]	; (8003934 <_sbrk+0x68>)
 80038ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038ee:	4b10      	ldr	r3, [pc, #64]	; (8003930 <_sbrk+0x64>)
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4413      	add	r3, r2
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d207      	bcs.n	800390c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038fc:	f003 ff78 	bl	80077f0 <__errno>
 8003900:	4603      	mov	r3, r0
 8003902:	220c      	movs	r2, #12
 8003904:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003906:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800390a:	e009      	b.n	8003920 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800390c:	4b08      	ldr	r3, [pc, #32]	; (8003930 <_sbrk+0x64>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003912:	4b07      	ldr	r3, [pc, #28]	; (8003930 <_sbrk+0x64>)
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4413      	add	r3, r2
 800391a:	4a05      	ldr	r2, [pc, #20]	; (8003930 <_sbrk+0x64>)
 800391c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800391e:	68fb      	ldr	r3, [r7, #12]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3718      	adds	r7, #24
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	20020000 	.word	0x20020000
 800392c:	00000400 	.word	0x00000400
 8003930:	20000ccc 	.word	0x20000ccc
 8003934:	20000e20 	.word	0x20000e20

08003938 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800393c:	4b06      	ldr	r3, [pc, #24]	; (8003958 <SystemInit+0x20>)
 800393e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003942:	4a05      	ldr	r2, [pc, #20]	; (8003958 <SystemInit+0x20>)
 8003944:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003948:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800394c:	bf00      	nop
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	e000ed00 	.word	0xe000ed00

0800395c <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	0a5a      	lsrs	r2, r3, #9
 800396c:	490f      	ldr	r1, [pc, #60]	; (80039ac <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800396e:	fba1 1202 	umull	r1, r2, r1, r2
 8003972:	09d2      	lsrs	r2, r2, #7
 8003974:	490e      	ldr	r1, [pc, #56]	; (80039b0 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8003976:	fb01 f202 	mul.w	r2, r1, r2
 800397a:	1a9b      	subs	r3, r3, r2
 800397c:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	0a5b      	lsrs	r3, r3, #9
 8003984:	4a09      	ldr	r2, [pc, #36]	; (80039ac <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8003986:	fba2 2303 	umull	r2, r3, r2, r3
 800398a:	09db      	lsrs	r3, r3, #7
 800398c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	441a      	add	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	601a      	str	r2, [r3, #0]
}
 80039a0:	bf00      	nop
 80039a2:	3714      	adds	r7, #20
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	00044b83 	.word	0x00044b83
 80039b0:	3b9aca00 	.word	0x3b9aca00

080039b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80039b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80039b8:	480d      	ldr	r0, [pc, #52]	; (80039f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80039ba:	490e      	ldr	r1, [pc, #56]	; (80039f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80039bc:	4a0e      	ldr	r2, [pc, #56]	; (80039f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80039be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039c0:	e002      	b.n	80039c8 <LoopCopyDataInit>

080039c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039c6:	3304      	adds	r3, #4

080039c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039cc:	d3f9      	bcc.n	80039c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039ce:	4a0b      	ldr	r2, [pc, #44]	; (80039fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80039d0:	4c0b      	ldr	r4, [pc, #44]	; (8003a00 <LoopFillZerobss+0x26>)
  movs r3, #0
 80039d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039d4:	e001      	b.n	80039da <LoopFillZerobss>

080039d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039d8:	3204      	adds	r2, #4

080039da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039dc:	d3fb      	bcc.n	80039d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80039de:	f7ff ffab 	bl	8003938 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039e2:	f003 ff0b 	bl	80077fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039e6:	f7fc ff25 	bl	8000834 <main>
  bx  lr    
 80039ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80039ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80039f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039f4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80039f8:	08007d4c 	.word	0x08007d4c
  ldr r2, =_sbss
 80039fc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8003a00:	20000e1c 	.word	0x20000e1c

08003a04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a04:	e7fe      	b.n	8003a04 <ADC_IRQHandler>
	...

08003a08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a0c:	4b0e      	ldr	r3, [pc, #56]	; (8003a48 <HAL_Init+0x40>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a0d      	ldr	r2, [pc, #52]	; (8003a48 <HAL_Init+0x40>)
 8003a12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a18:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <HAL_Init+0x40>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a0a      	ldr	r2, [pc, #40]	; (8003a48 <HAL_Init+0x40>)
 8003a1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a24:	4b08      	ldr	r3, [pc, #32]	; (8003a48 <HAL_Init+0x40>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a07      	ldr	r2, [pc, #28]	; (8003a48 <HAL_Init+0x40>)
 8003a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a30:	2003      	movs	r0, #3
 8003a32:	f000 f94f 	bl	8003cd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a36:	2000      	movs	r0, #0
 8003a38:	f000 f808 	bl	8003a4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a3c:	f7ff fd40 	bl	80034c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40023c00 	.word	0x40023c00

08003a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a54:	4b12      	ldr	r3, [pc, #72]	; (8003aa0 <HAL_InitTick+0x54>)
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	4b12      	ldr	r3, [pc, #72]	; (8003aa4 <HAL_InitTick+0x58>)
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a62:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f000 f967 	bl	8003d3e <HAL_SYSTICK_Config>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e00e      	b.n	8003a98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b0f      	cmp	r3, #15
 8003a7e:	d80a      	bhi.n	8003a96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a80:	2200      	movs	r2, #0
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a88:	f000 f92f 	bl	8003cea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a8c:	4a06      	ldr	r2, [pc, #24]	; (8003aa8 <HAL_InitTick+0x5c>)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
 8003a94:	e000      	b.n	8003a98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3708      	adds	r7, #8
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	20000010 	.word	0x20000010
 8003aa4:	20000018 	.word	0x20000018
 8003aa8:	20000014 	.word	0x20000014

08003aac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ab0:	4b06      	ldr	r3, [pc, #24]	; (8003acc <HAL_IncTick+0x20>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <HAL_IncTick+0x24>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4413      	add	r3, r2
 8003abc:	4a04      	ldr	r2, [pc, #16]	; (8003ad0 <HAL_IncTick+0x24>)
 8003abe:	6013      	str	r3, [r2, #0]
}
 8003ac0:	bf00      	nop
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	20000018 	.word	0x20000018
 8003ad0:	20000cd0 	.word	0x20000cd0

08003ad4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8003ad8:	4b03      	ldr	r3, [pc, #12]	; (8003ae8 <HAL_GetTick+0x14>)
 8003ada:	681b      	ldr	r3, [r3, #0]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	20000cd0 	.word	0x20000cd0

08003aec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003af4:	f7ff ffee 	bl	8003ad4 <HAL_GetTick>
 8003af8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b04:	d005      	beq.n	8003b12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b06:	4b0a      	ldr	r3, [pc, #40]	; (8003b30 <HAL_Delay+0x44>)
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4413      	add	r3, r2
 8003b10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b12:	bf00      	nop
 8003b14:	f7ff ffde 	bl	8003ad4 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d8f7      	bhi.n	8003b14 <HAL_Delay+0x28>
  {
  }
}
 8003b24:	bf00      	nop
 8003b26:	bf00      	nop
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	20000018 	.word	0x20000018

08003b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b44:	4b0c      	ldr	r3, [pc, #48]	; (8003b78 <__NVIC_SetPriorityGrouping+0x44>)
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b50:	4013      	ands	r3, r2
 8003b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b66:	4a04      	ldr	r2, [pc, #16]	; (8003b78 <__NVIC_SetPriorityGrouping+0x44>)
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	60d3      	str	r3, [r2, #12]
}
 8003b6c:	bf00      	nop
 8003b6e:	3714      	adds	r7, #20
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	e000ed00 	.word	0xe000ed00

08003b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b80:	4b04      	ldr	r3, [pc, #16]	; (8003b94 <__NVIC_GetPriorityGrouping+0x18>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	0a1b      	lsrs	r3, r3, #8
 8003b86:	f003 0307 	and.w	r3, r3, #7
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr
 8003b94:	e000ed00 	.word	0xe000ed00

08003b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	db0b      	blt.n	8003bc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003baa:	79fb      	ldrb	r3, [r7, #7]
 8003bac:	f003 021f 	and.w	r2, r3, #31
 8003bb0:	4907      	ldr	r1, [pc, #28]	; (8003bd0 <__NVIC_EnableIRQ+0x38>)
 8003bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb6:	095b      	lsrs	r3, r3, #5
 8003bb8:	2001      	movs	r0, #1
 8003bba:	fa00 f202 	lsl.w	r2, r0, r2
 8003bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bc2:	bf00      	nop
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	e000e100 	.word	0xe000e100

08003bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	4603      	mov	r3, r0
 8003bdc:	6039      	str	r1, [r7, #0]
 8003bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	db0a      	blt.n	8003bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	b2da      	uxtb	r2, r3
 8003bec:	490c      	ldr	r1, [pc, #48]	; (8003c20 <__NVIC_SetPriority+0x4c>)
 8003bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf2:	0112      	lsls	r2, r2, #4
 8003bf4:	b2d2      	uxtb	r2, r2
 8003bf6:	440b      	add	r3, r1
 8003bf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bfc:	e00a      	b.n	8003c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	4908      	ldr	r1, [pc, #32]	; (8003c24 <__NVIC_SetPriority+0x50>)
 8003c04:	79fb      	ldrb	r3, [r7, #7]
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	3b04      	subs	r3, #4
 8003c0c:	0112      	lsls	r2, r2, #4
 8003c0e:	b2d2      	uxtb	r2, r2
 8003c10:	440b      	add	r3, r1
 8003c12:	761a      	strb	r2, [r3, #24]
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	e000e100 	.word	0xe000e100
 8003c24:	e000ed00 	.word	0xe000ed00

08003c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b089      	sub	sp, #36	; 0x24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	f1c3 0307 	rsb	r3, r3, #7
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	bf28      	it	cs
 8003c46:	2304      	movcs	r3, #4
 8003c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	2b06      	cmp	r3, #6
 8003c50:	d902      	bls.n	8003c58 <NVIC_EncodePriority+0x30>
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	3b03      	subs	r3, #3
 8003c56:	e000      	b.n	8003c5a <NVIC_EncodePriority+0x32>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	fa02 f303 	lsl.w	r3, r2, r3
 8003c66:	43da      	mvns	r2, r3
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	401a      	ands	r2, r3
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	fa01 f303 	lsl.w	r3, r1, r3
 8003c7a:	43d9      	mvns	r1, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c80:	4313      	orrs	r3, r2
         );
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3724      	adds	r7, #36	; 0x24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
	...

08003c90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ca0:	d301      	bcc.n	8003ca6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e00f      	b.n	8003cc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ca6:	4a0a      	ldr	r2, [pc, #40]	; (8003cd0 <SysTick_Config+0x40>)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3b01      	subs	r3, #1
 8003cac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cae:	210f      	movs	r1, #15
 8003cb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cb4:	f7ff ff8e 	bl	8003bd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cb8:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <SysTick_Config+0x40>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cbe:	4b04      	ldr	r3, [pc, #16]	; (8003cd0 <SysTick_Config+0x40>)
 8003cc0:	2207      	movs	r2, #7
 8003cc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	e000e010 	.word	0xe000e010

08003cd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f7ff ff29 	bl	8003b34 <__NVIC_SetPriorityGrouping>
}
 8003ce2:	bf00      	nop
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b086      	sub	sp, #24
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	60b9      	str	r1, [r7, #8]
 8003cf4:	607a      	str	r2, [r7, #4]
 8003cf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cfc:	f7ff ff3e 	bl	8003b7c <__NVIC_GetPriorityGrouping>
 8003d00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	68b9      	ldr	r1, [r7, #8]
 8003d06:	6978      	ldr	r0, [r7, #20]
 8003d08:	f7ff ff8e 	bl	8003c28 <NVIC_EncodePriority>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d12:	4611      	mov	r1, r2
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff ff5d 	bl	8003bd4 <__NVIC_SetPriority>
}
 8003d1a:	bf00      	nop
 8003d1c:	3718      	adds	r7, #24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b082      	sub	sp, #8
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	4603      	mov	r3, r0
 8003d2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7ff ff31 	bl	8003b98 <__NVIC_EnableIRQ>
}
 8003d36:	bf00      	nop
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b082      	sub	sp, #8
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7ff ffa2 	bl	8003c90 <SysTick_Config>
 8003d4c:	4603      	mov	r3, r0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d60:	2300      	movs	r3, #0
 8003d62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003d64:	f7ff feb6 	bl	8003ad4 <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e099      	b.n	8003ea8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0201 	bic.w	r2, r2, #1
 8003d92:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d94:	e00f      	b.n	8003db6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d96:	f7ff fe9d 	bl	8003ad4 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b05      	cmp	r3, #5
 8003da2:	d908      	bls.n	8003db6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2220      	movs	r2, #32
 8003da8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2203      	movs	r2, #3
 8003dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e078      	b.n	8003ea8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1e8      	bne.n	8003d96 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	4b38      	ldr	r3, [pc, #224]	; (8003eb0 <HAL_DMA_Init+0x158>)
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003de2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dfa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	2b04      	cmp	r3, #4
 8003e0e:	d107      	bne.n	8003e20 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f023 0307 	bic.w	r3, r3, #7
 8003e36:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	2b04      	cmp	r3, #4
 8003e48:	d117      	bne.n	8003e7a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00e      	beq.n	8003e7a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 fb01 	bl	8004464 <DMA_CheckFifoParam>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d008      	beq.n	8003e7a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2240      	movs	r2, #64	; 0x40
 8003e6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003e76:	2301      	movs	r3, #1
 8003e78:	e016      	b.n	8003ea8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 fab8 	bl	80043f8 <DMA_CalcBaseAndBitshift>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e90:	223f      	movs	r2, #63	; 0x3f
 8003e92:	409a      	lsls	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3718      	adds	r7, #24
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	f010803f 	.word	0xf010803f

08003eb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
 8003ec0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d101      	bne.n	8003eda <HAL_DMA_Start_IT+0x26>
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	e040      	b.n	8003f5c <HAL_DMA_Start_IT+0xa8>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d12f      	bne.n	8003f4e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2202      	movs	r2, #2
 8003ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	68b9      	ldr	r1, [r7, #8]
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 fa4a 	bl	800439c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f0c:	223f      	movs	r2, #63	; 0x3f
 8003f0e:	409a      	lsls	r2, r3
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f042 0216 	orr.w	r2, r2, #22
 8003f22:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d007      	beq.n	8003f3c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f042 0208 	orr.w	r2, r2, #8
 8003f3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f042 0201 	orr.w	r2, r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	e005      	b.n	8003f5a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003f56:	2302      	movs	r3, #2
 8003f58:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3718      	adds	r7, #24
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f70:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003f72:	f7ff fdaf 	bl	8003ad4 <HAL_GetTick>
 8003f76:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d008      	beq.n	8003f96 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2280      	movs	r2, #128	; 0x80
 8003f88:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e052      	b.n	800403c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0216 	bic.w	r2, r2, #22
 8003fa4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	695a      	ldr	r2, [r3, #20]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fb4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d103      	bne.n	8003fc6 <HAL_DMA_Abort+0x62>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d007      	beq.n	8003fd6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0208 	bic.w	r2, r2, #8
 8003fd4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 0201 	bic.w	r2, r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fe6:	e013      	b.n	8004010 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fe8:	f7ff fd74 	bl	8003ad4 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b05      	cmp	r3, #5
 8003ff4:	d90c      	bls.n	8004010 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2203      	movs	r2, #3
 8004000:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e015      	b.n	800403c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1e4      	bne.n	8003fe8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004022:	223f      	movs	r2, #63	; 0x3f
 8004024:	409a      	lsls	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d004      	beq.n	8004062 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2280      	movs	r2, #128	; 0x80
 800405c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e00c      	b.n	800407c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2205      	movs	r2, #5
 8004066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 0201 	bic.w	r2, r2, #1
 8004078:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004090:	2300      	movs	r3, #0
 8004092:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004094:	4b8e      	ldr	r3, [pc, #568]	; (80042d0 <HAL_DMA_IRQHandler+0x248>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a8e      	ldr	r2, [pc, #568]	; (80042d4 <HAL_DMA_IRQHandler+0x24c>)
 800409a:	fba2 2303 	umull	r2, r3, r2, r3
 800409e:	0a9b      	lsrs	r3, r3, #10
 80040a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b2:	2208      	movs	r2, #8
 80040b4:	409a      	lsls	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	4013      	ands	r3, r2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d01a      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d013      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 0204 	bic.w	r2, r2, #4
 80040da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e0:	2208      	movs	r2, #8
 80040e2:	409a      	lsls	r2, r3
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ec:	f043 0201 	orr.w	r2, r3, #1
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f8:	2201      	movs	r2, #1
 80040fa:	409a      	lsls	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4013      	ands	r3, r2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d012      	beq.n	800412a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00b      	beq.n	800412a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004116:	2201      	movs	r2, #1
 8004118:	409a      	lsls	r2, r3
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004122:	f043 0202 	orr.w	r2, r3, #2
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800412e:	2204      	movs	r2, #4
 8004130:	409a      	lsls	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	4013      	ands	r3, r2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d012      	beq.n	8004160 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00b      	beq.n	8004160 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800414c:	2204      	movs	r2, #4
 800414e:	409a      	lsls	r2, r3
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004158:	f043 0204 	orr.w	r2, r3, #4
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004164:	2210      	movs	r2, #16
 8004166:	409a      	lsls	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	4013      	ands	r3, r2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d043      	beq.n	80041f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0308 	and.w	r3, r3, #8
 800417a:	2b00      	cmp	r3, #0
 800417c:	d03c      	beq.n	80041f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004182:	2210      	movs	r2, #16
 8004184:	409a      	lsls	r2, r3
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d018      	beq.n	80041ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d108      	bne.n	80041b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d024      	beq.n	80041f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	4798      	blx	r3
 80041b6:	e01f      	b.n	80041f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d01b      	beq.n	80041f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	4798      	blx	r3
 80041c8:	e016      	b.n	80041f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d107      	bne.n	80041e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f022 0208 	bic.w	r2, r2, #8
 80041e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d003      	beq.n	80041f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041fc:	2220      	movs	r2, #32
 80041fe:	409a      	lsls	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4013      	ands	r3, r2
 8004204:	2b00      	cmp	r3, #0
 8004206:	f000 808f 	beq.w	8004328 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0310 	and.w	r3, r3, #16
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 8087 	beq.w	8004328 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800421e:	2220      	movs	r2, #32
 8004220:	409a      	lsls	r2, r3
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b05      	cmp	r3, #5
 8004230:	d136      	bne.n	80042a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0216 	bic.w	r2, r2, #22
 8004240:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	695a      	ldr	r2, [r3, #20]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004250:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	2b00      	cmp	r3, #0
 8004258:	d103      	bne.n	8004262 <HAL_DMA_IRQHandler+0x1da>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800425e:	2b00      	cmp	r3, #0
 8004260:	d007      	beq.n	8004272 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 0208 	bic.w	r2, r2, #8
 8004270:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004276:	223f      	movs	r2, #63	; 0x3f
 8004278:	409a      	lsls	r2, r3
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004292:	2b00      	cmp	r3, #0
 8004294:	d07e      	beq.n	8004394 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	4798      	blx	r3
        }
        return;
 800429e:	e079      	b.n	8004394 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d01d      	beq.n	80042ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10d      	bne.n	80042d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d031      	beq.n	8004328 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	4798      	blx	r3
 80042cc:	e02c      	b.n	8004328 <HAL_DMA_IRQHandler+0x2a0>
 80042ce:	bf00      	nop
 80042d0:	20000010 	.word	0x20000010
 80042d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d023      	beq.n	8004328 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	4798      	blx	r3
 80042e8:	e01e      	b.n	8004328 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10f      	bne.n	8004318 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f022 0210 	bic.w	r2, r2, #16
 8004306:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431c:	2b00      	cmp	r3, #0
 800431e:	d003      	beq.n	8004328 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432c:	2b00      	cmp	r3, #0
 800432e:	d032      	beq.n	8004396 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b00      	cmp	r3, #0
 800433a:	d022      	beq.n	8004382 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2205      	movs	r2, #5
 8004340:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 0201 	bic.w	r2, r2, #1
 8004352:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	3301      	adds	r3, #1
 8004358:	60bb      	str	r3, [r7, #8]
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	429a      	cmp	r2, r3
 800435e:	d307      	bcc.n	8004370 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1f2      	bne.n	8004354 <HAL_DMA_IRQHandler+0x2cc>
 800436e:	e000      	b.n	8004372 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004370:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004386:	2b00      	cmp	r3, #0
 8004388:	d005      	beq.n	8004396 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	4798      	blx	r3
 8004392:	e000      	b.n	8004396 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004394:	bf00      	nop
    }
  }
}
 8004396:	3718      	adds	r7, #24
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
 80043a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80043b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	2b40      	cmp	r3, #64	; 0x40
 80043c8:	d108      	bne.n	80043dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80043da:	e007      	b.n	80043ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68ba      	ldr	r2, [r7, #8]
 80043e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	60da      	str	r2, [r3, #12]
}
 80043ec:	bf00      	nop
 80043ee:	3714      	adds	r7, #20
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	b2db      	uxtb	r3, r3
 8004406:	3b10      	subs	r3, #16
 8004408:	4a14      	ldr	r2, [pc, #80]	; (800445c <DMA_CalcBaseAndBitshift+0x64>)
 800440a:	fba2 2303 	umull	r2, r3, r2, r3
 800440e:	091b      	lsrs	r3, r3, #4
 8004410:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004412:	4a13      	ldr	r2, [pc, #76]	; (8004460 <DMA_CalcBaseAndBitshift+0x68>)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4413      	add	r3, r2
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	461a      	mov	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2b03      	cmp	r3, #3
 8004424:	d909      	bls.n	800443a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800442e:	f023 0303 	bic.w	r3, r3, #3
 8004432:	1d1a      	adds	r2, r3, #4
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	659a      	str	r2, [r3, #88]	; 0x58
 8004438:	e007      	b.n	800444a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004442:	f023 0303 	bic.w	r3, r3, #3
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800444e:	4618      	mov	r0, r3
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	aaaaaaab 	.word	0xaaaaaaab
 8004460:	08007d2c 	.word	0x08007d2c

08004464 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800446c:	2300      	movs	r3, #0
 800446e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004474:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d11f      	bne.n	80044be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	2b03      	cmp	r3, #3
 8004482:	d856      	bhi.n	8004532 <DMA_CheckFifoParam+0xce>
 8004484:	a201      	add	r2, pc, #4	; (adr r2, 800448c <DMA_CheckFifoParam+0x28>)
 8004486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800448a:	bf00      	nop
 800448c:	0800449d 	.word	0x0800449d
 8004490:	080044af 	.word	0x080044af
 8004494:	0800449d 	.word	0x0800449d
 8004498:	08004533 	.word	0x08004533
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d046      	beq.n	8004536 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044ac:	e043      	b.n	8004536 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044b6:	d140      	bne.n	800453a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044bc:	e03d      	b.n	800453a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044c6:	d121      	bne.n	800450c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	2b03      	cmp	r3, #3
 80044cc:	d837      	bhi.n	800453e <DMA_CheckFifoParam+0xda>
 80044ce:	a201      	add	r2, pc, #4	; (adr r2, 80044d4 <DMA_CheckFifoParam+0x70>)
 80044d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d4:	080044e5 	.word	0x080044e5
 80044d8:	080044eb 	.word	0x080044eb
 80044dc:	080044e5 	.word	0x080044e5
 80044e0:	080044fd 	.word	0x080044fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	73fb      	strb	r3, [r7, #15]
      break;
 80044e8:	e030      	b.n	800454c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d025      	beq.n	8004542 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044fa:	e022      	b.n	8004542 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004500:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004504:	d11f      	bne.n	8004546 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800450a:	e01c      	b.n	8004546 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	2b02      	cmp	r3, #2
 8004510:	d903      	bls.n	800451a <DMA_CheckFifoParam+0xb6>
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	2b03      	cmp	r3, #3
 8004516:	d003      	beq.n	8004520 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004518:	e018      	b.n	800454c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	73fb      	strb	r3, [r7, #15]
      break;
 800451e:	e015      	b.n	800454c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004524:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00e      	beq.n	800454a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	73fb      	strb	r3, [r7, #15]
      break;
 8004530:	e00b      	b.n	800454a <DMA_CheckFifoParam+0xe6>
      break;
 8004532:	bf00      	nop
 8004534:	e00a      	b.n	800454c <DMA_CheckFifoParam+0xe8>
      break;
 8004536:	bf00      	nop
 8004538:	e008      	b.n	800454c <DMA_CheckFifoParam+0xe8>
      break;
 800453a:	bf00      	nop
 800453c:	e006      	b.n	800454c <DMA_CheckFifoParam+0xe8>
      break;
 800453e:	bf00      	nop
 8004540:	e004      	b.n	800454c <DMA_CheckFifoParam+0xe8>
      break;
 8004542:	bf00      	nop
 8004544:	e002      	b.n	800454c <DMA_CheckFifoParam+0xe8>
      break;   
 8004546:	bf00      	nop
 8004548:	e000      	b.n	800454c <DMA_CheckFifoParam+0xe8>
      break;
 800454a:	bf00      	nop
    }
  } 
  
  return status; 
 800454c:	7bfb      	ldrb	r3, [r7, #15]
}
 800454e:	4618      	mov	r0, r3
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop

0800455c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800455c:	b480      	push	{r7}
 800455e:	b089      	sub	sp, #36	; 0x24
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004566:	2300      	movs	r3, #0
 8004568:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800456a:	2300      	movs	r3, #0
 800456c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800456e:	2300      	movs	r3, #0
 8004570:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004572:	2300      	movs	r3, #0
 8004574:	61fb      	str	r3, [r7, #28]
 8004576:	e16b      	b.n	8004850 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004578:	2201      	movs	r2, #1
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	fa02 f303 	lsl.w	r3, r2, r3
 8004580:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	4013      	ands	r3, r2
 800458a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	429a      	cmp	r2, r3
 8004592:	f040 815a 	bne.w	800484a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f003 0303 	and.w	r3, r3, #3
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d005      	beq.n	80045ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d130      	bne.n	8004610 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	2203      	movs	r2, #3
 80045ba:	fa02 f303 	lsl.w	r3, r2, r3
 80045be:	43db      	mvns	r3, r3
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	4013      	ands	r3, r2
 80045c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	fa02 f303 	lsl.w	r3, r2, r3
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045e4:	2201      	movs	r2, #1
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ec:	43db      	mvns	r3, r3
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	4013      	ands	r3, r2
 80045f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	091b      	lsrs	r3, r3, #4
 80045fa:	f003 0201 	and.w	r2, r3, #1
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	4313      	orrs	r3, r2
 8004608:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f003 0303 	and.w	r3, r3, #3
 8004618:	2b03      	cmp	r3, #3
 800461a:	d017      	beq.n	800464c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	2203      	movs	r2, #3
 8004628:	fa02 f303 	lsl.w	r3, r2, r3
 800462c:	43db      	mvns	r3, r3
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	4013      	ands	r3, r2
 8004632:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	fa02 f303 	lsl.w	r3, r2, r3
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	4313      	orrs	r3, r2
 8004644:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f003 0303 	and.w	r3, r3, #3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d123      	bne.n	80046a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	08da      	lsrs	r2, r3, #3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3208      	adds	r2, #8
 8004660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004664:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	f003 0307 	and.w	r3, r3, #7
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	220f      	movs	r2, #15
 8004670:	fa02 f303 	lsl.w	r3, r2, r3
 8004674:	43db      	mvns	r3, r3
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	4013      	ands	r3, r2
 800467a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	691a      	ldr	r2, [r3, #16]
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	f003 0307 	and.w	r3, r3, #7
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	fa02 f303 	lsl.w	r3, r2, r3
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	4313      	orrs	r3, r2
 8004690:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	08da      	lsrs	r2, r3, #3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	3208      	adds	r2, #8
 800469a:	69b9      	ldr	r1, [r7, #24]
 800469c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	2203      	movs	r2, #3
 80046ac:	fa02 f303 	lsl.w	r3, r2, r3
 80046b0:	43db      	mvns	r3, r3
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	4013      	ands	r3, r2
 80046b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f003 0203 	and.w	r2, r3, #3
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	005b      	lsls	r3, r3, #1
 80046c4:	fa02 f303 	lsl.w	r3, r2, r3
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 80b4 	beq.w	800484a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046e2:	2300      	movs	r3, #0
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	4b60      	ldr	r3, [pc, #384]	; (8004868 <HAL_GPIO_Init+0x30c>)
 80046e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ea:	4a5f      	ldr	r2, [pc, #380]	; (8004868 <HAL_GPIO_Init+0x30c>)
 80046ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046f0:	6453      	str	r3, [r2, #68]	; 0x44
 80046f2:	4b5d      	ldr	r3, [pc, #372]	; (8004868 <HAL_GPIO_Init+0x30c>)
 80046f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046fe:	4a5b      	ldr	r2, [pc, #364]	; (800486c <HAL_GPIO_Init+0x310>)
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	089b      	lsrs	r3, r3, #2
 8004704:	3302      	adds	r3, #2
 8004706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800470a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	f003 0303 	and.w	r3, r3, #3
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	220f      	movs	r2, #15
 8004716:	fa02 f303 	lsl.w	r3, r2, r3
 800471a:	43db      	mvns	r3, r3
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	4013      	ands	r3, r2
 8004720:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a52      	ldr	r2, [pc, #328]	; (8004870 <HAL_GPIO_Init+0x314>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d02b      	beq.n	8004782 <HAL_GPIO_Init+0x226>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a51      	ldr	r2, [pc, #324]	; (8004874 <HAL_GPIO_Init+0x318>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d025      	beq.n	800477e <HAL_GPIO_Init+0x222>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a50      	ldr	r2, [pc, #320]	; (8004878 <HAL_GPIO_Init+0x31c>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d01f      	beq.n	800477a <HAL_GPIO_Init+0x21e>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a4f      	ldr	r2, [pc, #316]	; (800487c <HAL_GPIO_Init+0x320>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d019      	beq.n	8004776 <HAL_GPIO_Init+0x21a>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a4e      	ldr	r2, [pc, #312]	; (8004880 <HAL_GPIO_Init+0x324>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d013      	beq.n	8004772 <HAL_GPIO_Init+0x216>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a4d      	ldr	r2, [pc, #308]	; (8004884 <HAL_GPIO_Init+0x328>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d00d      	beq.n	800476e <HAL_GPIO_Init+0x212>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a4c      	ldr	r2, [pc, #304]	; (8004888 <HAL_GPIO_Init+0x32c>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d007      	beq.n	800476a <HAL_GPIO_Init+0x20e>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a4b      	ldr	r2, [pc, #300]	; (800488c <HAL_GPIO_Init+0x330>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d101      	bne.n	8004766 <HAL_GPIO_Init+0x20a>
 8004762:	2307      	movs	r3, #7
 8004764:	e00e      	b.n	8004784 <HAL_GPIO_Init+0x228>
 8004766:	2308      	movs	r3, #8
 8004768:	e00c      	b.n	8004784 <HAL_GPIO_Init+0x228>
 800476a:	2306      	movs	r3, #6
 800476c:	e00a      	b.n	8004784 <HAL_GPIO_Init+0x228>
 800476e:	2305      	movs	r3, #5
 8004770:	e008      	b.n	8004784 <HAL_GPIO_Init+0x228>
 8004772:	2304      	movs	r3, #4
 8004774:	e006      	b.n	8004784 <HAL_GPIO_Init+0x228>
 8004776:	2303      	movs	r3, #3
 8004778:	e004      	b.n	8004784 <HAL_GPIO_Init+0x228>
 800477a:	2302      	movs	r3, #2
 800477c:	e002      	b.n	8004784 <HAL_GPIO_Init+0x228>
 800477e:	2301      	movs	r3, #1
 8004780:	e000      	b.n	8004784 <HAL_GPIO_Init+0x228>
 8004782:	2300      	movs	r3, #0
 8004784:	69fa      	ldr	r2, [r7, #28]
 8004786:	f002 0203 	and.w	r2, r2, #3
 800478a:	0092      	lsls	r2, r2, #2
 800478c:	4093      	lsls	r3, r2
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	4313      	orrs	r3, r2
 8004792:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004794:	4935      	ldr	r1, [pc, #212]	; (800486c <HAL_GPIO_Init+0x310>)
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	089b      	lsrs	r3, r3, #2
 800479a:	3302      	adds	r3, #2
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047a2:	4b3b      	ldr	r3, [pc, #236]	; (8004890 <HAL_GPIO_Init+0x334>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	43db      	mvns	r3, r3
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	4013      	ands	r3, r2
 80047b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80047c6:	4a32      	ldr	r2, [pc, #200]	; (8004890 <HAL_GPIO_Init+0x334>)
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047cc:	4b30      	ldr	r3, [pc, #192]	; (8004890 <HAL_GPIO_Init+0x334>)
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	43db      	mvns	r3, r3
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	4013      	ands	r3, r2
 80047da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d003      	beq.n	80047f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047f0:	4a27      	ldr	r2, [pc, #156]	; (8004890 <HAL_GPIO_Init+0x334>)
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80047f6:	4b26      	ldr	r3, [pc, #152]	; (8004890 <HAL_GPIO_Init+0x334>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	43db      	mvns	r3, r3
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	4013      	ands	r3, r2
 8004804:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d003      	beq.n	800481a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	4313      	orrs	r3, r2
 8004818:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800481a:	4a1d      	ldr	r2, [pc, #116]	; (8004890 <HAL_GPIO_Init+0x334>)
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004820:	4b1b      	ldr	r3, [pc, #108]	; (8004890 <HAL_GPIO_Init+0x334>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	43db      	mvns	r3, r3
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	4013      	ands	r3, r2
 800482e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	4313      	orrs	r3, r2
 8004842:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004844:	4a12      	ldr	r2, [pc, #72]	; (8004890 <HAL_GPIO_Init+0x334>)
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	3301      	adds	r3, #1
 800484e:	61fb      	str	r3, [r7, #28]
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	2b0f      	cmp	r3, #15
 8004854:	f67f ae90 	bls.w	8004578 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004858:	bf00      	nop
 800485a:	bf00      	nop
 800485c:	3724      	adds	r7, #36	; 0x24
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	40023800 	.word	0x40023800
 800486c:	40013800 	.word	0x40013800
 8004870:	40020000 	.word	0x40020000
 8004874:	40020400 	.word	0x40020400
 8004878:	40020800 	.word	0x40020800
 800487c:	40020c00 	.word	0x40020c00
 8004880:	40021000 	.word	0x40021000
 8004884:	40021400 	.word	0x40021400
 8004888:	40021800 	.word	0x40021800
 800488c:	40021c00 	.word	0x40021c00
 8004890:	40013c00 	.word	0x40013c00

08004894 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	460b      	mov	r3, r1
 800489e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80048a6:	887a      	ldrh	r2, [r7, #2]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4013      	ands	r3, r2
 80048ac:	041a      	lsls	r2, r3, #16
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	43d9      	mvns	r1, r3
 80048b2:	887b      	ldrh	r3, [r7, #2]
 80048b4:	400b      	ands	r3, r1
 80048b6:	431a      	orrs	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	619a      	str	r2, [r3, #24]
}
 80048bc:	bf00      	nop
 80048be:	3714      	adds	r7, #20
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e12b      	b.n	8004b32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d106      	bne.n	80048f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7fe fe0e 	bl	8003510 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2224      	movs	r2, #36	; 0x24
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0201 	bic.w	r2, r2, #1
 800490a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800491a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800492a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800492c:	f000 fd80 	bl	8005430 <HAL_RCC_GetPCLK1Freq>
 8004930:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	4a81      	ldr	r2, [pc, #516]	; (8004b3c <HAL_I2C_Init+0x274>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d807      	bhi.n	800494c <HAL_I2C_Init+0x84>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4a80      	ldr	r2, [pc, #512]	; (8004b40 <HAL_I2C_Init+0x278>)
 8004940:	4293      	cmp	r3, r2
 8004942:	bf94      	ite	ls
 8004944:	2301      	movls	r3, #1
 8004946:	2300      	movhi	r3, #0
 8004948:	b2db      	uxtb	r3, r3
 800494a:	e006      	b.n	800495a <HAL_I2C_Init+0x92>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4a7d      	ldr	r2, [pc, #500]	; (8004b44 <HAL_I2C_Init+0x27c>)
 8004950:	4293      	cmp	r3, r2
 8004952:	bf94      	ite	ls
 8004954:	2301      	movls	r3, #1
 8004956:	2300      	movhi	r3, #0
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e0e7      	b.n	8004b32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	4a78      	ldr	r2, [pc, #480]	; (8004b48 <HAL_I2C_Init+0x280>)
 8004966:	fba2 2303 	umull	r2, r3, r2, r3
 800496a:	0c9b      	lsrs	r3, r3, #18
 800496c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	430a      	orrs	r2, r1
 8004980:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	4a6a      	ldr	r2, [pc, #424]	; (8004b3c <HAL_I2C_Init+0x274>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d802      	bhi.n	800499c <HAL_I2C_Init+0xd4>
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	3301      	adds	r3, #1
 800499a:	e009      	b.n	80049b0 <HAL_I2C_Init+0xe8>
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80049a2:	fb02 f303 	mul.w	r3, r2, r3
 80049a6:	4a69      	ldr	r2, [pc, #420]	; (8004b4c <HAL_I2C_Init+0x284>)
 80049a8:	fba2 2303 	umull	r2, r3, r2, r3
 80049ac:	099b      	lsrs	r3, r3, #6
 80049ae:	3301      	adds	r3, #1
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	6812      	ldr	r2, [r2, #0]
 80049b4:	430b      	orrs	r3, r1
 80049b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80049c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	495c      	ldr	r1, [pc, #368]	; (8004b3c <HAL_I2C_Init+0x274>)
 80049cc:	428b      	cmp	r3, r1
 80049ce:	d819      	bhi.n	8004a04 <HAL_I2C_Init+0x13c>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	1e59      	subs	r1, r3, #1
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	fbb1 f3f3 	udiv	r3, r1, r3
 80049de:	1c59      	adds	r1, r3, #1
 80049e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80049e4:	400b      	ands	r3, r1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00a      	beq.n	8004a00 <HAL_I2C_Init+0x138>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	1e59      	subs	r1, r3, #1
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	005b      	lsls	r3, r3, #1
 80049f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80049f8:	3301      	adds	r3, #1
 80049fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049fe:	e051      	b.n	8004aa4 <HAL_I2C_Init+0x1dc>
 8004a00:	2304      	movs	r3, #4
 8004a02:	e04f      	b.n	8004aa4 <HAL_I2C_Init+0x1dc>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d111      	bne.n	8004a30 <HAL_I2C_Init+0x168>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	1e58      	subs	r0, r3, #1
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6859      	ldr	r1, [r3, #4]
 8004a14:	460b      	mov	r3, r1
 8004a16:	005b      	lsls	r3, r3, #1
 8004a18:	440b      	add	r3, r1
 8004a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a1e:	3301      	adds	r3, #1
 8004a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	bf0c      	ite	eq
 8004a28:	2301      	moveq	r3, #1
 8004a2a:	2300      	movne	r3, #0
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	e012      	b.n	8004a56 <HAL_I2C_Init+0x18e>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	1e58      	subs	r0, r3, #1
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6859      	ldr	r1, [r3, #4]
 8004a38:	460b      	mov	r3, r1
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	440b      	add	r3, r1
 8004a3e:	0099      	lsls	r1, r3, #2
 8004a40:	440b      	add	r3, r1
 8004a42:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a46:	3301      	adds	r3, #1
 8004a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	bf0c      	ite	eq
 8004a50:	2301      	moveq	r3, #1
 8004a52:	2300      	movne	r3, #0
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <HAL_I2C_Init+0x196>
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e022      	b.n	8004aa4 <HAL_I2C_Init+0x1dc>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10e      	bne.n	8004a84 <HAL_I2C_Init+0x1bc>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	1e58      	subs	r0, r3, #1
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6859      	ldr	r1, [r3, #4]
 8004a6e:	460b      	mov	r3, r1
 8004a70:	005b      	lsls	r3, r3, #1
 8004a72:	440b      	add	r3, r1
 8004a74:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a78:	3301      	adds	r3, #1
 8004a7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a82:	e00f      	b.n	8004aa4 <HAL_I2C_Init+0x1dc>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	1e58      	subs	r0, r3, #1
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6859      	ldr	r1, [r3, #4]
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	440b      	add	r3, r1
 8004a92:	0099      	lsls	r1, r3, #2
 8004a94:	440b      	add	r3, r1
 8004a96:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aa0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004aa4:	6879      	ldr	r1, [r7, #4]
 8004aa6:	6809      	ldr	r1, [r1, #0]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	69da      	ldr	r2, [r3, #28]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004ad2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6911      	ldr	r1, [r2, #16]
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	68d2      	ldr	r2, [r2, #12]
 8004ade:	4311      	orrs	r1, r2
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	6812      	ldr	r2, [r2, #0]
 8004ae4:	430b      	orrs	r3, r1
 8004ae6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	695a      	ldr	r2, [r3, #20]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	431a      	orrs	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	430a      	orrs	r2, r1
 8004b02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 0201 	orr.w	r2, r2, #1
 8004b12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2220      	movs	r2, #32
 8004b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	000186a0 	.word	0x000186a0
 8004b40:	001e847f 	.word	0x001e847f
 8004b44:	003d08ff 	.word	0x003d08ff
 8004b48:	431bde83 	.word	0x431bde83
 8004b4c:	10624dd3 	.word	0x10624dd3

08004b50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e267      	b.n	8005032 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d075      	beq.n	8004c5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b6e:	4b88      	ldr	r3, [pc, #544]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f003 030c 	and.w	r3, r3, #12
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	d00c      	beq.n	8004b94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b7a:	4b85      	ldr	r3, [pc, #532]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b82:	2b08      	cmp	r3, #8
 8004b84:	d112      	bne.n	8004bac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b86:	4b82      	ldr	r3, [pc, #520]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b92:	d10b      	bne.n	8004bac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b94:	4b7e      	ldr	r3, [pc, #504]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d05b      	beq.n	8004c58 <HAL_RCC_OscConfig+0x108>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d157      	bne.n	8004c58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e242      	b.n	8005032 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bb4:	d106      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x74>
 8004bb6:	4b76      	ldr	r3, [pc, #472]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a75      	ldr	r2, [pc, #468]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bc0:	6013      	str	r3, [r2, #0]
 8004bc2:	e01d      	b.n	8004c00 <HAL_RCC_OscConfig+0xb0>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bcc:	d10c      	bne.n	8004be8 <HAL_RCC_OscConfig+0x98>
 8004bce:	4b70      	ldr	r3, [pc, #448]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a6f      	ldr	r2, [pc, #444]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004bd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bd8:	6013      	str	r3, [r2, #0]
 8004bda:	4b6d      	ldr	r3, [pc, #436]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a6c      	ldr	r2, [pc, #432]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004be4:	6013      	str	r3, [r2, #0]
 8004be6:	e00b      	b.n	8004c00 <HAL_RCC_OscConfig+0xb0>
 8004be8:	4b69      	ldr	r3, [pc, #420]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a68      	ldr	r2, [pc, #416]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bf2:	6013      	str	r3, [r2, #0]
 8004bf4:	4b66      	ldr	r3, [pc, #408]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a65      	ldr	r2, [pc, #404]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004bfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d013      	beq.n	8004c30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c08:	f7fe ff64 	bl	8003ad4 <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c10:	f7fe ff60 	bl	8003ad4 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b64      	cmp	r3, #100	; 0x64
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e207      	b.n	8005032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c22:	4b5b      	ldr	r3, [pc, #364]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0f0      	beq.n	8004c10 <HAL_RCC_OscConfig+0xc0>
 8004c2e:	e014      	b.n	8004c5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c30:	f7fe ff50 	bl	8003ad4 <HAL_GetTick>
 8004c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c36:	e008      	b.n	8004c4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c38:	f7fe ff4c 	bl	8003ad4 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b64      	cmp	r3, #100	; 0x64
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e1f3      	b.n	8005032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c4a:	4b51      	ldr	r3, [pc, #324]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1f0      	bne.n	8004c38 <HAL_RCC_OscConfig+0xe8>
 8004c56:	e000      	b.n	8004c5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d063      	beq.n	8004d2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c66:	4b4a      	ldr	r3, [pc, #296]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f003 030c 	and.w	r3, r3, #12
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00b      	beq.n	8004c8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c72:	4b47      	ldr	r3, [pc, #284]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c7a:	2b08      	cmp	r3, #8
 8004c7c:	d11c      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c7e:	4b44      	ldr	r3, [pc, #272]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d116      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c8a:	4b41      	ldr	r3, [pc, #260]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d005      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x152>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d001      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e1c7      	b.n	8005032 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ca2:	4b3b      	ldr	r3, [pc, #236]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	00db      	lsls	r3, r3, #3
 8004cb0:	4937      	ldr	r1, [pc, #220]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cb6:	e03a      	b.n	8004d2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d020      	beq.n	8004d02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cc0:	4b34      	ldr	r3, [pc, #208]	; (8004d94 <HAL_RCC_OscConfig+0x244>)
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc6:	f7fe ff05 	bl	8003ad4 <HAL_GetTick>
 8004cca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ccc:	e008      	b.n	8004ce0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cce:	f7fe ff01 	bl	8003ad4 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d901      	bls.n	8004ce0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e1a8      	b.n	8005032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ce0:	4b2b      	ldr	r3, [pc, #172]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0302 	and.w	r3, r3, #2
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d0f0      	beq.n	8004cce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cec:	4b28      	ldr	r3, [pc, #160]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	00db      	lsls	r3, r3, #3
 8004cfa:	4925      	ldr	r1, [pc, #148]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	600b      	str	r3, [r1, #0]
 8004d00:	e015      	b.n	8004d2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d02:	4b24      	ldr	r3, [pc, #144]	; (8004d94 <HAL_RCC_OscConfig+0x244>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d08:	f7fe fee4 	bl	8003ad4 <HAL_GetTick>
 8004d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d0e:	e008      	b.n	8004d22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d10:	f7fe fee0 	bl	8003ad4 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e187      	b.n	8005032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d22:	4b1b      	ldr	r3, [pc, #108]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1f0      	bne.n	8004d10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0308 	and.w	r3, r3, #8
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d036      	beq.n	8004da8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d016      	beq.n	8004d70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d42:	4b15      	ldr	r3, [pc, #84]	; (8004d98 <HAL_RCC_OscConfig+0x248>)
 8004d44:	2201      	movs	r2, #1
 8004d46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d48:	f7fe fec4 	bl	8003ad4 <HAL_GetTick>
 8004d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d4e:	e008      	b.n	8004d62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d50:	f7fe fec0 	bl	8003ad4 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e167      	b.n	8005032 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d62:	4b0b      	ldr	r3, [pc, #44]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004d64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d0f0      	beq.n	8004d50 <HAL_RCC_OscConfig+0x200>
 8004d6e:	e01b      	b.n	8004da8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d70:	4b09      	ldr	r3, [pc, #36]	; (8004d98 <HAL_RCC_OscConfig+0x248>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d76:	f7fe fead 	bl	8003ad4 <HAL_GetTick>
 8004d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d7c:	e00e      	b.n	8004d9c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d7e:	f7fe fea9 	bl	8003ad4 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d907      	bls.n	8004d9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e150      	b.n	8005032 <HAL_RCC_OscConfig+0x4e2>
 8004d90:	40023800 	.word	0x40023800
 8004d94:	42470000 	.word	0x42470000
 8004d98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d9c:	4b88      	ldr	r3, [pc, #544]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1ea      	bne.n	8004d7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0304 	and.w	r3, r3, #4
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f000 8097 	beq.w	8004ee4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004db6:	2300      	movs	r3, #0
 8004db8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dba:	4b81      	ldr	r3, [pc, #516]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10f      	bne.n	8004de6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60bb      	str	r3, [r7, #8]
 8004dca:	4b7d      	ldr	r3, [pc, #500]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dce:	4a7c      	ldr	r2, [pc, #496]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8004dd6:	4b7a      	ldr	r3, [pc, #488]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dde:	60bb      	str	r3, [r7, #8]
 8004de0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004de2:	2301      	movs	r3, #1
 8004de4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004de6:	4b77      	ldr	r3, [pc, #476]	; (8004fc4 <HAL_RCC_OscConfig+0x474>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d118      	bne.n	8004e24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004df2:	4b74      	ldr	r3, [pc, #464]	; (8004fc4 <HAL_RCC_OscConfig+0x474>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a73      	ldr	r2, [pc, #460]	; (8004fc4 <HAL_RCC_OscConfig+0x474>)
 8004df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dfe:	f7fe fe69 	bl	8003ad4 <HAL_GetTick>
 8004e02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e04:	e008      	b.n	8004e18 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e06:	f7fe fe65 	bl	8003ad4 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e10c      	b.n	8005032 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e18:	4b6a      	ldr	r3, [pc, #424]	; (8004fc4 <HAL_RCC_OscConfig+0x474>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d0f0      	beq.n	8004e06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d106      	bne.n	8004e3a <HAL_RCC_OscConfig+0x2ea>
 8004e2c:	4b64      	ldr	r3, [pc, #400]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e30:	4a63      	ldr	r2, [pc, #396]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004e32:	f043 0301 	orr.w	r3, r3, #1
 8004e36:	6713      	str	r3, [r2, #112]	; 0x70
 8004e38:	e01c      	b.n	8004e74 <HAL_RCC_OscConfig+0x324>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	2b05      	cmp	r3, #5
 8004e40:	d10c      	bne.n	8004e5c <HAL_RCC_OscConfig+0x30c>
 8004e42:	4b5f      	ldr	r3, [pc, #380]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e46:	4a5e      	ldr	r2, [pc, #376]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004e48:	f043 0304 	orr.w	r3, r3, #4
 8004e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e4e:	4b5c      	ldr	r3, [pc, #368]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e52:	4a5b      	ldr	r2, [pc, #364]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004e54:	f043 0301 	orr.w	r3, r3, #1
 8004e58:	6713      	str	r3, [r2, #112]	; 0x70
 8004e5a:	e00b      	b.n	8004e74 <HAL_RCC_OscConfig+0x324>
 8004e5c:	4b58      	ldr	r3, [pc, #352]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e60:	4a57      	ldr	r2, [pc, #348]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004e62:	f023 0301 	bic.w	r3, r3, #1
 8004e66:	6713      	str	r3, [r2, #112]	; 0x70
 8004e68:	4b55      	ldr	r3, [pc, #340]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6c:	4a54      	ldr	r2, [pc, #336]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004e6e:	f023 0304 	bic.w	r3, r3, #4
 8004e72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d015      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e7c:	f7fe fe2a 	bl	8003ad4 <HAL_GetTick>
 8004e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e82:	e00a      	b.n	8004e9a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e84:	f7fe fe26 	bl	8003ad4 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e0cb      	b.n	8005032 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e9a:	4b49      	ldr	r3, [pc, #292]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d0ee      	beq.n	8004e84 <HAL_RCC_OscConfig+0x334>
 8004ea6:	e014      	b.n	8004ed2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ea8:	f7fe fe14 	bl	8003ad4 <HAL_GetTick>
 8004eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eae:	e00a      	b.n	8004ec6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eb0:	f7fe fe10 	bl	8003ad4 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e0b5      	b.n	8005032 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ec6:	4b3e      	ldr	r3, [pc, #248]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1ee      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ed2:	7dfb      	ldrb	r3, [r7, #23]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d105      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ed8:	4b39      	ldr	r3, [pc, #228]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004edc:	4a38      	ldr	r2, [pc, #224]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004ede:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ee2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 80a1 	beq.w	8005030 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004eee:	4b34      	ldr	r3, [pc, #208]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f003 030c 	and.w	r3, r3, #12
 8004ef6:	2b08      	cmp	r3, #8
 8004ef8:	d05c      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d141      	bne.n	8004f86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f02:	4b31      	ldr	r3, [pc, #196]	; (8004fc8 <HAL_RCC_OscConfig+0x478>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f08:	f7fe fde4 	bl	8003ad4 <HAL_GetTick>
 8004f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f0e:	e008      	b.n	8004f22 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f10:	f7fe fde0 	bl	8003ad4 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e087      	b.n	8005032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f22:	4b27      	ldr	r3, [pc, #156]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1f0      	bne.n	8004f10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	69da      	ldr	r2, [r3, #28]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	431a      	orrs	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	019b      	lsls	r3, r3, #6
 8004f3e:	431a      	orrs	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f44:	085b      	lsrs	r3, r3, #1
 8004f46:	3b01      	subs	r3, #1
 8004f48:	041b      	lsls	r3, r3, #16
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f50:	061b      	lsls	r3, r3, #24
 8004f52:	491b      	ldr	r1, [pc, #108]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f58:	4b1b      	ldr	r3, [pc, #108]	; (8004fc8 <HAL_RCC_OscConfig+0x478>)
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f5e:	f7fe fdb9 	bl	8003ad4 <HAL_GetTick>
 8004f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f64:	e008      	b.n	8004f78 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f66:	f7fe fdb5 	bl	8003ad4 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d901      	bls.n	8004f78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e05c      	b.n	8005032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f78:	4b11      	ldr	r3, [pc, #68]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d0f0      	beq.n	8004f66 <HAL_RCC_OscConfig+0x416>
 8004f84:	e054      	b.n	8005030 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f86:	4b10      	ldr	r3, [pc, #64]	; (8004fc8 <HAL_RCC_OscConfig+0x478>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f8c:	f7fe fda2 	bl	8003ad4 <HAL_GetTick>
 8004f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f92:	e008      	b.n	8004fa6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f94:	f7fe fd9e 	bl	8003ad4 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e045      	b.n	8005032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fa6:	4b06      	ldr	r3, [pc, #24]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1f0      	bne.n	8004f94 <HAL_RCC_OscConfig+0x444>
 8004fb2:	e03d      	b.n	8005030 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d107      	bne.n	8004fcc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e038      	b.n	8005032 <HAL_RCC_OscConfig+0x4e2>
 8004fc0:	40023800 	.word	0x40023800
 8004fc4:	40007000 	.word	0x40007000
 8004fc8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004fcc:	4b1b      	ldr	r3, [pc, #108]	; (800503c <HAL_RCC_OscConfig+0x4ec>)
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d028      	beq.n	800502c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d121      	bne.n	800502c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d11a      	bne.n	800502c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005002:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005004:	4293      	cmp	r3, r2
 8005006:	d111      	bne.n	800502c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005012:	085b      	lsrs	r3, r3, #1
 8005014:	3b01      	subs	r3, #1
 8005016:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005018:	429a      	cmp	r2, r3
 800501a:	d107      	bne.n	800502c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005026:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005028:	429a      	cmp	r2, r3
 800502a:	d001      	beq.n	8005030 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e000      	b.n	8005032 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3718      	adds	r7, #24
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	40023800 	.word	0x40023800

08005040 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e0cc      	b.n	80051ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005054:	4b68      	ldr	r3, [pc, #416]	; (80051f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0307 	and.w	r3, r3, #7
 800505c:	683a      	ldr	r2, [r7, #0]
 800505e:	429a      	cmp	r2, r3
 8005060:	d90c      	bls.n	800507c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005062:	4b65      	ldr	r3, [pc, #404]	; (80051f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	b2d2      	uxtb	r2, r2
 8005068:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800506a:	4b63      	ldr	r3, [pc, #396]	; (80051f8 <HAL_RCC_ClockConfig+0x1b8>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0307 	and.w	r3, r3, #7
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	429a      	cmp	r2, r3
 8005076:	d001      	beq.n	800507c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e0b8      	b.n	80051ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0302 	and.w	r3, r3, #2
 8005084:	2b00      	cmp	r3, #0
 8005086:	d020      	beq.n	80050ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	2b00      	cmp	r3, #0
 8005092:	d005      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005094:	4b59      	ldr	r3, [pc, #356]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	4a58      	ldr	r2, [pc, #352]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 800509a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800509e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0308 	and.w	r3, r3, #8
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d005      	beq.n	80050b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050ac:	4b53      	ldr	r3, [pc, #332]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	4a52      	ldr	r2, [pc, #328]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 80050b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80050b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050b8:	4b50      	ldr	r3, [pc, #320]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	494d      	ldr	r1, [pc, #308]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d044      	beq.n	8005160 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d107      	bne.n	80050ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050de:	4b47      	ldr	r3, [pc, #284]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d119      	bne.n	800511e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e07f      	b.n	80051ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d003      	beq.n	80050fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050fa:	2b03      	cmp	r3, #3
 80050fc:	d107      	bne.n	800510e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050fe:	4b3f      	ldr	r3, [pc, #252]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d109      	bne.n	800511e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e06f      	b.n	80051ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800510e:	4b3b      	ldr	r3, [pc, #236]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e067      	b.n	80051ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800511e:	4b37      	ldr	r3, [pc, #220]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f023 0203 	bic.w	r2, r3, #3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	4934      	ldr	r1, [pc, #208]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 800512c:	4313      	orrs	r3, r2
 800512e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005130:	f7fe fcd0 	bl	8003ad4 <HAL_GetTick>
 8005134:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005136:	e00a      	b.n	800514e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005138:	f7fe fccc 	bl	8003ad4 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	f241 3288 	movw	r2, #5000	; 0x1388
 8005146:	4293      	cmp	r3, r2
 8005148:	d901      	bls.n	800514e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e04f      	b.n	80051ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800514e:	4b2b      	ldr	r3, [pc, #172]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f003 020c 	and.w	r2, r3, #12
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	429a      	cmp	r2, r3
 800515e:	d1eb      	bne.n	8005138 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005160:	4b25      	ldr	r3, [pc, #148]	; (80051f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0307 	and.w	r3, r3, #7
 8005168:	683a      	ldr	r2, [r7, #0]
 800516a:	429a      	cmp	r2, r3
 800516c:	d20c      	bcs.n	8005188 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800516e:	4b22      	ldr	r3, [pc, #136]	; (80051f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	b2d2      	uxtb	r2, r2
 8005174:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005176:	4b20      	ldr	r3, [pc, #128]	; (80051f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0307 	and.w	r3, r3, #7
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	429a      	cmp	r2, r3
 8005182:	d001      	beq.n	8005188 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e032      	b.n	80051ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0304 	and.w	r3, r3, #4
 8005190:	2b00      	cmp	r3, #0
 8005192:	d008      	beq.n	80051a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005194:	4b19      	ldr	r3, [pc, #100]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	4916      	ldr	r1, [pc, #88]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0308 	and.w	r3, r3, #8
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d009      	beq.n	80051c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051b2:	4b12      	ldr	r3, [pc, #72]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	00db      	lsls	r3, r3, #3
 80051c0:	490e      	ldr	r1, [pc, #56]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051c6:	f000 f821 	bl	800520c <HAL_RCC_GetSysClockFreq>
 80051ca:	4602      	mov	r2, r0
 80051cc:	4b0b      	ldr	r3, [pc, #44]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	091b      	lsrs	r3, r3, #4
 80051d2:	f003 030f 	and.w	r3, r3, #15
 80051d6:	490a      	ldr	r1, [pc, #40]	; (8005200 <HAL_RCC_ClockConfig+0x1c0>)
 80051d8:	5ccb      	ldrb	r3, [r1, r3]
 80051da:	fa22 f303 	lsr.w	r3, r2, r3
 80051de:	4a09      	ldr	r2, [pc, #36]	; (8005204 <HAL_RCC_ClockConfig+0x1c4>)
 80051e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80051e2:	4b09      	ldr	r3, [pc, #36]	; (8005208 <HAL_RCC_ClockConfig+0x1c8>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7fe fc30 	bl	8003a4c <HAL_InitTick>

  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	40023c00 	.word	0x40023c00
 80051fc:	40023800 	.word	0x40023800
 8005200:	08007d14 	.word	0x08007d14
 8005204:	20000010 	.word	0x20000010
 8005208:	20000014 	.word	0x20000014

0800520c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800520c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005210:	b094      	sub	sp, #80	; 0x50
 8005212:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005214:	2300      	movs	r3, #0
 8005216:	647b      	str	r3, [r7, #68]	; 0x44
 8005218:	2300      	movs	r3, #0
 800521a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800521c:	2300      	movs	r3, #0
 800521e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005220:	2300      	movs	r3, #0
 8005222:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005224:	4b79      	ldr	r3, [pc, #484]	; (800540c <HAL_RCC_GetSysClockFreq+0x200>)
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f003 030c 	and.w	r3, r3, #12
 800522c:	2b08      	cmp	r3, #8
 800522e:	d00d      	beq.n	800524c <HAL_RCC_GetSysClockFreq+0x40>
 8005230:	2b08      	cmp	r3, #8
 8005232:	f200 80e1 	bhi.w	80053f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005236:	2b00      	cmp	r3, #0
 8005238:	d002      	beq.n	8005240 <HAL_RCC_GetSysClockFreq+0x34>
 800523a:	2b04      	cmp	r3, #4
 800523c:	d003      	beq.n	8005246 <HAL_RCC_GetSysClockFreq+0x3a>
 800523e:	e0db      	b.n	80053f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005240:	4b73      	ldr	r3, [pc, #460]	; (8005410 <HAL_RCC_GetSysClockFreq+0x204>)
 8005242:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005244:	e0db      	b.n	80053fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005246:	4b73      	ldr	r3, [pc, #460]	; (8005414 <HAL_RCC_GetSysClockFreq+0x208>)
 8005248:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800524a:	e0d8      	b.n	80053fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800524c:	4b6f      	ldr	r3, [pc, #444]	; (800540c <HAL_RCC_GetSysClockFreq+0x200>)
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005254:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005256:	4b6d      	ldr	r3, [pc, #436]	; (800540c <HAL_RCC_GetSysClockFreq+0x200>)
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d063      	beq.n	800532a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005262:	4b6a      	ldr	r3, [pc, #424]	; (800540c <HAL_RCC_GetSysClockFreq+0x200>)
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	099b      	lsrs	r3, r3, #6
 8005268:	2200      	movs	r2, #0
 800526a:	63bb      	str	r3, [r7, #56]	; 0x38
 800526c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800526e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005274:	633b      	str	r3, [r7, #48]	; 0x30
 8005276:	2300      	movs	r3, #0
 8005278:	637b      	str	r3, [r7, #52]	; 0x34
 800527a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800527e:	4622      	mov	r2, r4
 8005280:	462b      	mov	r3, r5
 8005282:	f04f 0000 	mov.w	r0, #0
 8005286:	f04f 0100 	mov.w	r1, #0
 800528a:	0159      	lsls	r1, r3, #5
 800528c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005290:	0150      	lsls	r0, r2, #5
 8005292:	4602      	mov	r2, r0
 8005294:	460b      	mov	r3, r1
 8005296:	4621      	mov	r1, r4
 8005298:	1a51      	subs	r1, r2, r1
 800529a:	6139      	str	r1, [r7, #16]
 800529c:	4629      	mov	r1, r5
 800529e:	eb63 0301 	sbc.w	r3, r3, r1
 80052a2:	617b      	str	r3, [r7, #20]
 80052a4:	f04f 0200 	mov.w	r2, #0
 80052a8:	f04f 0300 	mov.w	r3, #0
 80052ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052b0:	4659      	mov	r1, fp
 80052b2:	018b      	lsls	r3, r1, #6
 80052b4:	4651      	mov	r1, sl
 80052b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80052ba:	4651      	mov	r1, sl
 80052bc:	018a      	lsls	r2, r1, #6
 80052be:	4651      	mov	r1, sl
 80052c0:	ebb2 0801 	subs.w	r8, r2, r1
 80052c4:	4659      	mov	r1, fp
 80052c6:	eb63 0901 	sbc.w	r9, r3, r1
 80052ca:	f04f 0200 	mov.w	r2, #0
 80052ce:	f04f 0300 	mov.w	r3, #0
 80052d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052de:	4690      	mov	r8, r2
 80052e0:	4699      	mov	r9, r3
 80052e2:	4623      	mov	r3, r4
 80052e4:	eb18 0303 	adds.w	r3, r8, r3
 80052e8:	60bb      	str	r3, [r7, #8]
 80052ea:	462b      	mov	r3, r5
 80052ec:	eb49 0303 	adc.w	r3, r9, r3
 80052f0:	60fb      	str	r3, [r7, #12]
 80052f2:	f04f 0200 	mov.w	r2, #0
 80052f6:	f04f 0300 	mov.w	r3, #0
 80052fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80052fe:	4629      	mov	r1, r5
 8005300:	024b      	lsls	r3, r1, #9
 8005302:	4621      	mov	r1, r4
 8005304:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005308:	4621      	mov	r1, r4
 800530a:	024a      	lsls	r2, r1, #9
 800530c:	4610      	mov	r0, r2
 800530e:	4619      	mov	r1, r3
 8005310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005312:	2200      	movs	r2, #0
 8005314:	62bb      	str	r3, [r7, #40]	; 0x28
 8005316:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005318:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800531c:	f7fa ff5c 	bl	80001d8 <__aeabi_uldivmod>
 8005320:	4602      	mov	r2, r0
 8005322:	460b      	mov	r3, r1
 8005324:	4613      	mov	r3, r2
 8005326:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005328:	e058      	b.n	80053dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800532a:	4b38      	ldr	r3, [pc, #224]	; (800540c <HAL_RCC_GetSysClockFreq+0x200>)
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	099b      	lsrs	r3, r3, #6
 8005330:	2200      	movs	r2, #0
 8005332:	4618      	mov	r0, r3
 8005334:	4611      	mov	r1, r2
 8005336:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800533a:	623b      	str	r3, [r7, #32]
 800533c:	2300      	movs	r3, #0
 800533e:	627b      	str	r3, [r7, #36]	; 0x24
 8005340:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005344:	4642      	mov	r2, r8
 8005346:	464b      	mov	r3, r9
 8005348:	f04f 0000 	mov.w	r0, #0
 800534c:	f04f 0100 	mov.w	r1, #0
 8005350:	0159      	lsls	r1, r3, #5
 8005352:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005356:	0150      	lsls	r0, r2, #5
 8005358:	4602      	mov	r2, r0
 800535a:	460b      	mov	r3, r1
 800535c:	4641      	mov	r1, r8
 800535e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005362:	4649      	mov	r1, r9
 8005364:	eb63 0b01 	sbc.w	fp, r3, r1
 8005368:	f04f 0200 	mov.w	r2, #0
 800536c:	f04f 0300 	mov.w	r3, #0
 8005370:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005374:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005378:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800537c:	ebb2 040a 	subs.w	r4, r2, sl
 8005380:	eb63 050b 	sbc.w	r5, r3, fp
 8005384:	f04f 0200 	mov.w	r2, #0
 8005388:	f04f 0300 	mov.w	r3, #0
 800538c:	00eb      	lsls	r3, r5, #3
 800538e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005392:	00e2      	lsls	r2, r4, #3
 8005394:	4614      	mov	r4, r2
 8005396:	461d      	mov	r5, r3
 8005398:	4643      	mov	r3, r8
 800539a:	18e3      	adds	r3, r4, r3
 800539c:	603b      	str	r3, [r7, #0]
 800539e:	464b      	mov	r3, r9
 80053a0:	eb45 0303 	adc.w	r3, r5, r3
 80053a4:	607b      	str	r3, [r7, #4]
 80053a6:	f04f 0200 	mov.w	r2, #0
 80053aa:	f04f 0300 	mov.w	r3, #0
 80053ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80053b2:	4629      	mov	r1, r5
 80053b4:	028b      	lsls	r3, r1, #10
 80053b6:	4621      	mov	r1, r4
 80053b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80053bc:	4621      	mov	r1, r4
 80053be:	028a      	lsls	r2, r1, #10
 80053c0:	4610      	mov	r0, r2
 80053c2:	4619      	mov	r1, r3
 80053c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053c6:	2200      	movs	r2, #0
 80053c8:	61bb      	str	r3, [r7, #24]
 80053ca:	61fa      	str	r2, [r7, #28]
 80053cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053d0:	f7fa ff02 	bl	80001d8 <__aeabi_uldivmod>
 80053d4:	4602      	mov	r2, r0
 80053d6:	460b      	mov	r3, r1
 80053d8:	4613      	mov	r3, r2
 80053da:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80053dc:	4b0b      	ldr	r3, [pc, #44]	; (800540c <HAL_RCC_GetSysClockFreq+0x200>)
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	0c1b      	lsrs	r3, r3, #16
 80053e2:	f003 0303 	and.w	r3, r3, #3
 80053e6:	3301      	adds	r3, #1
 80053e8:	005b      	lsls	r3, r3, #1
 80053ea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80053ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80053f6:	e002      	b.n	80053fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053f8:	4b05      	ldr	r3, [pc, #20]	; (8005410 <HAL_RCC_GetSysClockFreq+0x204>)
 80053fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80053fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005400:	4618      	mov	r0, r3
 8005402:	3750      	adds	r7, #80	; 0x50
 8005404:	46bd      	mov	sp, r7
 8005406:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800540a:	bf00      	nop
 800540c:	40023800 	.word	0x40023800
 8005410:	00f42400 	.word	0x00f42400
 8005414:	007a1200 	.word	0x007a1200

08005418 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005418:	b480      	push	{r7}
 800541a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800541c:	4b03      	ldr	r3, [pc, #12]	; (800542c <HAL_RCC_GetHCLKFreq+0x14>)
 800541e:	681b      	ldr	r3, [r3, #0]
}
 8005420:	4618      	mov	r0, r3
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	20000010 	.word	0x20000010

08005430 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005434:	f7ff fff0 	bl	8005418 <HAL_RCC_GetHCLKFreq>
 8005438:	4602      	mov	r2, r0
 800543a:	4b05      	ldr	r3, [pc, #20]	; (8005450 <HAL_RCC_GetPCLK1Freq+0x20>)
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	0a9b      	lsrs	r3, r3, #10
 8005440:	f003 0307 	and.w	r3, r3, #7
 8005444:	4903      	ldr	r1, [pc, #12]	; (8005454 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005446:	5ccb      	ldrb	r3, [r1, r3]
 8005448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800544c:	4618      	mov	r0, r3
 800544e:	bd80      	pop	{r7, pc}
 8005450:	40023800 	.word	0x40023800
 8005454:	08007d24 	.word	0x08007d24

08005458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800545c:	f7ff ffdc 	bl	8005418 <HAL_RCC_GetHCLKFreq>
 8005460:	4602      	mov	r2, r0
 8005462:	4b05      	ldr	r3, [pc, #20]	; (8005478 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	0b5b      	lsrs	r3, r3, #13
 8005468:	f003 0307 	and.w	r3, r3, #7
 800546c:	4903      	ldr	r1, [pc, #12]	; (800547c <HAL_RCC_GetPCLK2Freq+0x24>)
 800546e:	5ccb      	ldrb	r3, [r1, r3]
 8005470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005474:	4618      	mov	r0, r3
 8005476:	bd80      	pop	{r7, pc}
 8005478:	40023800 	.word	0x40023800
 800547c:	08007d24 	.word	0x08007d24

08005480 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e041      	b.n	8005516 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d106      	bne.n	80054ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7fe f87a 	bl	80035a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2202      	movs	r2, #2
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	3304      	adds	r3, #4
 80054bc:	4619      	mov	r1, r3
 80054be:	4610      	mov	r0, r2
 80054c0:	f000 fad8 	bl	8005a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b082      	sub	sp, #8
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d101      	bne.n	8005530 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e041      	b.n	80055b4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005536:	b2db      	uxtb	r3, r3
 8005538:	2b00      	cmp	r3, #0
 800553a:	d106      	bne.n	800554a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 f839 	bl	80055bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2202      	movs	r2, #2
 800554e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	3304      	adds	r3, #4
 800555a:	4619      	mov	r1, r3
 800555c:	4610      	mov	r0, r2
 800555e:	f000 fa89 	bl	8005a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2201      	movs	r2, #1
 8005576:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3708      	adds	r7, #8
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d109      	bne.n	80055f4 <HAL_TIM_PWM_Start+0x24>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	bf14      	ite	ne
 80055ec:	2301      	movne	r3, #1
 80055ee:	2300      	moveq	r3, #0
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	e022      	b.n	800563a <HAL_TIM_PWM_Start+0x6a>
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	2b04      	cmp	r3, #4
 80055f8:	d109      	bne.n	800560e <HAL_TIM_PWM_Start+0x3e>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b01      	cmp	r3, #1
 8005604:	bf14      	ite	ne
 8005606:	2301      	movne	r3, #1
 8005608:	2300      	moveq	r3, #0
 800560a:	b2db      	uxtb	r3, r3
 800560c:	e015      	b.n	800563a <HAL_TIM_PWM_Start+0x6a>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2b08      	cmp	r3, #8
 8005612:	d109      	bne.n	8005628 <HAL_TIM_PWM_Start+0x58>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b01      	cmp	r3, #1
 800561e:	bf14      	ite	ne
 8005620:	2301      	movne	r3, #1
 8005622:	2300      	moveq	r3, #0
 8005624:	b2db      	uxtb	r3, r3
 8005626:	e008      	b.n	800563a <HAL_TIM_PWM_Start+0x6a>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b01      	cmp	r3, #1
 8005632:	bf14      	ite	ne
 8005634:	2301      	movne	r3, #1
 8005636:	2300      	moveq	r3, #0
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d001      	beq.n	8005642 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e07c      	b.n	800573c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d104      	bne.n	8005652 <HAL_TIM_PWM_Start+0x82>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2202      	movs	r2, #2
 800564c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005650:	e013      	b.n	800567a <HAL_TIM_PWM_Start+0xaa>
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	2b04      	cmp	r3, #4
 8005656:	d104      	bne.n	8005662 <HAL_TIM_PWM_Start+0x92>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2202      	movs	r2, #2
 800565c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005660:	e00b      	b.n	800567a <HAL_TIM_PWM_Start+0xaa>
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	2b08      	cmp	r3, #8
 8005666:	d104      	bne.n	8005672 <HAL_TIM_PWM_Start+0xa2>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2202      	movs	r2, #2
 800566c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005670:	e003      	b.n	800567a <HAL_TIM_PWM_Start+0xaa>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2202      	movs	r2, #2
 8005676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2201      	movs	r2, #1
 8005680:	6839      	ldr	r1, [r7, #0]
 8005682:	4618      	mov	r0, r3
 8005684:	f000 fce0 	bl	8006048 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a2d      	ldr	r2, [pc, #180]	; (8005744 <HAL_TIM_PWM_Start+0x174>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d004      	beq.n	800569c <HAL_TIM_PWM_Start+0xcc>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a2c      	ldr	r2, [pc, #176]	; (8005748 <HAL_TIM_PWM_Start+0x178>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d101      	bne.n	80056a0 <HAL_TIM_PWM_Start+0xd0>
 800569c:	2301      	movs	r3, #1
 800569e:	e000      	b.n	80056a2 <HAL_TIM_PWM_Start+0xd2>
 80056a0:	2300      	movs	r3, #0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d007      	beq.n	80056b6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a22      	ldr	r2, [pc, #136]	; (8005744 <HAL_TIM_PWM_Start+0x174>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d022      	beq.n	8005706 <HAL_TIM_PWM_Start+0x136>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c8:	d01d      	beq.n	8005706 <HAL_TIM_PWM_Start+0x136>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a1f      	ldr	r2, [pc, #124]	; (800574c <HAL_TIM_PWM_Start+0x17c>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d018      	beq.n	8005706 <HAL_TIM_PWM_Start+0x136>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a1d      	ldr	r2, [pc, #116]	; (8005750 <HAL_TIM_PWM_Start+0x180>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d013      	beq.n	8005706 <HAL_TIM_PWM_Start+0x136>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a1c      	ldr	r2, [pc, #112]	; (8005754 <HAL_TIM_PWM_Start+0x184>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d00e      	beq.n	8005706 <HAL_TIM_PWM_Start+0x136>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a16      	ldr	r2, [pc, #88]	; (8005748 <HAL_TIM_PWM_Start+0x178>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d009      	beq.n	8005706 <HAL_TIM_PWM_Start+0x136>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a18      	ldr	r2, [pc, #96]	; (8005758 <HAL_TIM_PWM_Start+0x188>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d004      	beq.n	8005706 <HAL_TIM_PWM_Start+0x136>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a16      	ldr	r2, [pc, #88]	; (800575c <HAL_TIM_PWM_Start+0x18c>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d111      	bne.n	800572a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f003 0307 	and.w	r3, r3, #7
 8005710:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2b06      	cmp	r3, #6
 8005716:	d010      	beq.n	800573a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f042 0201 	orr.w	r2, r2, #1
 8005726:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005728:	e007      	b.n	800573a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f042 0201 	orr.w	r2, r2, #1
 8005738:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	40010000 	.word	0x40010000
 8005748:	40010400 	.word	0x40010400
 800574c:	40000400 	.word	0x40000400
 8005750:	40000800 	.word	0x40000800
 8005754:	40000c00 	.word	0x40000c00
 8005758:	40014000 	.word	0x40014000
 800575c:	40001800 	.word	0x40001800

08005760 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800576c:	2300      	movs	r3, #0
 800576e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005776:	2b01      	cmp	r3, #1
 8005778:	d101      	bne.n	800577e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800577a:	2302      	movs	r3, #2
 800577c:	e0ae      	b.n	80058dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b0c      	cmp	r3, #12
 800578a:	f200 809f 	bhi.w	80058cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800578e:	a201      	add	r2, pc, #4	; (adr r2, 8005794 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005794:	080057c9 	.word	0x080057c9
 8005798:	080058cd 	.word	0x080058cd
 800579c:	080058cd 	.word	0x080058cd
 80057a0:	080058cd 	.word	0x080058cd
 80057a4:	08005809 	.word	0x08005809
 80057a8:	080058cd 	.word	0x080058cd
 80057ac:	080058cd 	.word	0x080058cd
 80057b0:	080058cd 	.word	0x080058cd
 80057b4:	0800584b 	.word	0x0800584b
 80057b8:	080058cd 	.word	0x080058cd
 80057bc:	080058cd 	.word	0x080058cd
 80057c0:	080058cd 	.word	0x080058cd
 80057c4:	0800588b 	.word	0x0800588b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68b9      	ldr	r1, [r7, #8]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 f9f0 	bl	8005bb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	699a      	ldr	r2, [r3, #24]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f042 0208 	orr.w	r2, r2, #8
 80057e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	699a      	ldr	r2, [r3, #24]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f022 0204 	bic.w	r2, r2, #4
 80057f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6999      	ldr	r1, [r3, #24]
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	691a      	ldr	r2, [r3, #16]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	430a      	orrs	r2, r1
 8005804:	619a      	str	r2, [r3, #24]
      break;
 8005806:	e064      	b.n	80058d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68b9      	ldr	r1, [r7, #8]
 800580e:	4618      	mov	r0, r3
 8005810:	f000 fa40 	bl	8005c94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	699a      	ldr	r2, [r3, #24]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005822:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	699a      	ldr	r2, [r3, #24]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005832:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6999      	ldr	r1, [r3, #24]
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	021a      	lsls	r2, r3, #8
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	430a      	orrs	r2, r1
 8005846:	619a      	str	r2, [r3, #24]
      break;
 8005848:	e043      	b.n	80058d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68b9      	ldr	r1, [r7, #8]
 8005850:	4618      	mov	r0, r3
 8005852:	f000 fa95 	bl	8005d80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	69da      	ldr	r2, [r3, #28]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f042 0208 	orr.w	r2, r2, #8
 8005864:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	69da      	ldr	r2, [r3, #28]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f022 0204 	bic.w	r2, r2, #4
 8005874:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	69d9      	ldr	r1, [r3, #28]
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	691a      	ldr	r2, [r3, #16]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	61da      	str	r2, [r3, #28]
      break;
 8005888:	e023      	b.n	80058d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68b9      	ldr	r1, [r7, #8]
 8005890:	4618      	mov	r0, r3
 8005892:	f000 fae9 	bl	8005e68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	69da      	ldr	r2, [r3, #28]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	69da      	ldr	r2, [r3, #28]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	69d9      	ldr	r1, [r3, #28]
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	021a      	lsls	r2, r3, #8
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	430a      	orrs	r2, r1
 80058c8:	61da      	str	r2, [r3, #28]
      break;
 80058ca:	e002      	b.n	80058d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	75fb      	strb	r3, [r7, #23]
      break;
 80058d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058da:	7dfb      	ldrb	r3, [r7, #23]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3718      	adds	r7, #24
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058ee:	2300      	movs	r3, #0
 80058f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d101      	bne.n	8005900 <HAL_TIM_ConfigClockSource+0x1c>
 80058fc:	2302      	movs	r3, #2
 80058fe:	e0b4      	b.n	8005a6a <HAL_TIM_ConfigClockSource+0x186>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2202      	movs	r2, #2
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800591e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005926:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005938:	d03e      	beq.n	80059b8 <HAL_TIM_ConfigClockSource+0xd4>
 800593a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800593e:	f200 8087 	bhi.w	8005a50 <HAL_TIM_ConfigClockSource+0x16c>
 8005942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005946:	f000 8086 	beq.w	8005a56 <HAL_TIM_ConfigClockSource+0x172>
 800594a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800594e:	d87f      	bhi.n	8005a50 <HAL_TIM_ConfigClockSource+0x16c>
 8005950:	2b70      	cmp	r3, #112	; 0x70
 8005952:	d01a      	beq.n	800598a <HAL_TIM_ConfigClockSource+0xa6>
 8005954:	2b70      	cmp	r3, #112	; 0x70
 8005956:	d87b      	bhi.n	8005a50 <HAL_TIM_ConfigClockSource+0x16c>
 8005958:	2b60      	cmp	r3, #96	; 0x60
 800595a:	d050      	beq.n	80059fe <HAL_TIM_ConfigClockSource+0x11a>
 800595c:	2b60      	cmp	r3, #96	; 0x60
 800595e:	d877      	bhi.n	8005a50 <HAL_TIM_ConfigClockSource+0x16c>
 8005960:	2b50      	cmp	r3, #80	; 0x50
 8005962:	d03c      	beq.n	80059de <HAL_TIM_ConfigClockSource+0xfa>
 8005964:	2b50      	cmp	r3, #80	; 0x50
 8005966:	d873      	bhi.n	8005a50 <HAL_TIM_ConfigClockSource+0x16c>
 8005968:	2b40      	cmp	r3, #64	; 0x40
 800596a:	d058      	beq.n	8005a1e <HAL_TIM_ConfigClockSource+0x13a>
 800596c:	2b40      	cmp	r3, #64	; 0x40
 800596e:	d86f      	bhi.n	8005a50 <HAL_TIM_ConfigClockSource+0x16c>
 8005970:	2b30      	cmp	r3, #48	; 0x30
 8005972:	d064      	beq.n	8005a3e <HAL_TIM_ConfigClockSource+0x15a>
 8005974:	2b30      	cmp	r3, #48	; 0x30
 8005976:	d86b      	bhi.n	8005a50 <HAL_TIM_ConfigClockSource+0x16c>
 8005978:	2b20      	cmp	r3, #32
 800597a:	d060      	beq.n	8005a3e <HAL_TIM_ConfigClockSource+0x15a>
 800597c:	2b20      	cmp	r3, #32
 800597e:	d867      	bhi.n	8005a50 <HAL_TIM_ConfigClockSource+0x16c>
 8005980:	2b00      	cmp	r3, #0
 8005982:	d05c      	beq.n	8005a3e <HAL_TIM_ConfigClockSource+0x15a>
 8005984:	2b10      	cmp	r3, #16
 8005986:	d05a      	beq.n	8005a3e <HAL_TIM_ConfigClockSource+0x15a>
 8005988:	e062      	b.n	8005a50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6818      	ldr	r0, [r3, #0]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	6899      	ldr	r1, [r3, #8]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	685a      	ldr	r2, [r3, #4]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	f000 fb35 	bl	8006008 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	609a      	str	r2, [r3, #8]
      break;
 80059b6:	e04f      	b.n	8005a58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6818      	ldr	r0, [r3, #0]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	6899      	ldr	r1, [r3, #8]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	685a      	ldr	r2, [r3, #4]
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f000 fb1e 	bl	8006008 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689a      	ldr	r2, [r3, #8]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059da:	609a      	str	r2, [r3, #8]
      break;
 80059dc:	e03c      	b.n	8005a58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6818      	ldr	r0, [r3, #0]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	6859      	ldr	r1, [r3, #4]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	461a      	mov	r2, r3
 80059ec:	f000 fa92 	bl	8005f14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2150      	movs	r1, #80	; 0x50
 80059f6:	4618      	mov	r0, r3
 80059f8:	f000 faeb 	bl	8005fd2 <TIM_ITRx_SetConfig>
      break;
 80059fc:	e02c      	b.n	8005a58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6818      	ldr	r0, [r3, #0]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	6859      	ldr	r1, [r3, #4]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	f000 fab1 	bl	8005f72 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2160      	movs	r1, #96	; 0x60
 8005a16:	4618      	mov	r0, r3
 8005a18:	f000 fadb 	bl	8005fd2 <TIM_ITRx_SetConfig>
      break;
 8005a1c:	e01c      	b.n	8005a58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6818      	ldr	r0, [r3, #0]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	6859      	ldr	r1, [r3, #4]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	f000 fa72 	bl	8005f14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2140      	movs	r1, #64	; 0x40
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 facb 	bl	8005fd2 <TIM_ITRx_SetConfig>
      break;
 8005a3c:	e00c      	b.n	8005a58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4619      	mov	r1, r3
 8005a48:	4610      	mov	r0, r2
 8005a4a:	f000 fac2 	bl	8005fd2 <TIM_ITRx_SetConfig>
      break;
 8005a4e:	e003      	b.n	8005a58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	73fb      	strb	r3, [r7, #15]
      break;
 8005a54:	e000      	b.n	8005a58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
	...

08005a74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a40      	ldr	r2, [pc, #256]	; (8005b88 <TIM_Base_SetConfig+0x114>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d013      	beq.n	8005ab4 <TIM_Base_SetConfig+0x40>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a92:	d00f      	beq.n	8005ab4 <TIM_Base_SetConfig+0x40>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a3d      	ldr	r2, [pc, #244]	; (8005b8c <TIM_Base_SetConfig+0x118>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d00b      	beq.n	8005ab4 <TIM_Base_SetConfig+0x40>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a3c      	ldr	r2, [pc, #240]	; (8005b90 <TIM_Base_SetConfig+0x11c>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d007      	beq.n	8005ab4 <TIM_Base_SetConfig+0x40>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a3b      	ldr	r2, [pc, #236]	; (8005b94 <TIM_Base_SetConfig+0x120>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d003      	beq.n	8005ab4 <TIM_Base_SetConfig+0x40>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a3a      	ldr	r2, [pc, #232]	; (8005b98 <TIM_Base_SetConfig+0x124>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d108      	bne.n	8005ac6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a2f      	ldr	r2, [pc, #188]	; (8005b88 <TIM_Base_SetConfig+0x114>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d02b      	beq.n	8005b26 <TIM_Base_SetConfig+0xb2>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ad4:	d027      	beq.n	8005b26 <TIM_Base_SetConfig+0xb2>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a2c      	ldr	r2, [pc, #176]	; (8005b8c <TIM_Base_SetConfig+0x118>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d023      	beq.n	8005b26 <TIM_Base_SetConfig+0xb2>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a2b      	ldr	r2, [pc, #172]	; (8005b90 <TIM_Base_SetConfig+0x11c>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d01f      	beq.n	8005b26 <TIM_Base_SetConfig+0xb2>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a2a      	ldr	r2, [pc, #168]	; (8005b94 <TIM_Base_SetConfig+0x120>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d01b      	beq.n	8005b26 <TIM_Base_SetConfig+0xb2>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a29      	ldr	r2, [pc, #164]	; (8005b98 <TIM_Base_SetConfig+0x124>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d017      	beq.n	8005b26 <TIM_Base_SetConfig+0xb2>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a28      	ldr	r2, [pc, #160]	; (8005b9c <TIM_Base_SetConfig+0x128>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d013      	beq.n	8005b26 <TIM_Base_SetConfig+0xb2>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a27      	ldr	r2, [pc, #156]	; (8005ba0 <TIM_Base_SetConfig+0x12c>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d00f      	beq.n	8005b26 <TIM_Base_SetConfig+0xb2>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a26      	ldr	r2, [pc, #152]	; (8005ba4 <TIM_Base_SetConfig+0x130>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d00b      	beq.n	8005b26 <TIM_Base_SetConfig+0xb2>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a25      	ldr	r2, [pc, #148]	; (8005ba8 <TIM_Base_SetConfig+0x134>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d007      	beq.n	8005b26 <TIM_Base_SetConfig+0xb2>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a24      	ldr	r2, [pc, #144]	; (8005bac <TIM_Base_SetConfig+0x138>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d003      	beq.n	8005b26 <TIM_Base_SetConfig+0xb2>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a23      	ldr	r2, [pc, #140]	; (8005bb0 <TIM_Base_SetConfig+0x13c>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d108      	bne.n	8005b38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	689a      	ldr	r2, [r3, #8]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a0a      	ldr	r2, [pc, #40]	; (8005b88 <TIM_Base_SetConfig+0x114>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d003      	beq.n	8005b6c <TIM_Base_SetConfig+0xf8>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a0c      	ldr	r2, [pc, #48]	; (8005b98 <TIM_Base_SetConfig+0x124>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d103      	bne.n	8005b74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	691a      	ldr	r2, [r3, #16]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	615a      	str	r2, [r3, #20]
}
 8005b7a:	bf00      	nop
 8005b7c:	3714      	adds	r7, #20
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	40010000 	.word	0x40010000
 8005b8c:	40000400 	.word	0x40000400
 8005b90:	40000800 	.word	0x40000800
 8005b94:	40000c00 	.word	0x40000c00
 8005b98:	40010400 	.word	0x40010400
 8005b9c:	40014000 	.word	0x40014000
 8005ba0:	40014400 	.word	0x40014400
 8005ba4:	40014800 	.word	0x40014800
 8005ba8:	40001800 	.word	0x40001800
 8005bac:	40001c00 	.word	0x40001c00
 8005bb0:	40002000 	.word	0x40002000

08005bb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b087      	sub	sp, #28
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	f023 0201 	bic.w	r2, r3, #1
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f023 0303 	bic.w	r3, r3, #3
 8005bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	f023 0302 	bic.w	r3, r3, #2
 8005bfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a20      	ldr	r2, [pc, #128]	; (8005c8c <TIM_OC1_SetConfig+0xd8>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d003      	beq.n	8005c18 <TIM_OC1_SetConfig+0x64>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a1f      	ldr	r2, [pc, #124]	; (8005c90 <TIM_OC1_SetConfig+0xdc>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d10c      	bne.n	8005c32 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	f023 0308 	bic.w	r3, r3, #8
 8005c1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	f023 0304 	bic.w	r3, r3, #4
 8005c30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a15      	ldr	r2, [pc, #84]	; (8005c8c <TIM_OC1_SetConfig+0xd8>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d003      	beq.n	8005c42 <TIM_OC1_SetConfig+0x8e>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a14      	ldr	r2, [pc, #80]	; (8005c90 <TIM_OC1_SetConfig+0xdc>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d111      	bne.n	8005c66 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	621a      	str	r2, [r3, #32]
}
 8005c80:	bf00      	nop
 8005c82:	371c      	adds	r7, #28
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr
 8005c8c:	40010000 	.word	0x40010000
 8005c90:	40010400 	.word	0x40010400

08005c94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b087      	sub	sp, #28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	f023 0210 	bic.w	r2, r3, #16
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	021b      	lsls	r3, r3, #8
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	f023 0320 	bic.w	r3, r3, #32
 8005cde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	011b      	lsls	r3, r3, #4
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a22      	ldr	r2, [pc, #136]	; (8005d78 <TIM_OC2_SetConfig+0xe4>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d003      	beq.n	8005cfc <TIM_OC2_SetConfig+0x68>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a21      	ldr	r2, [pc, #132]	; (8005d7c <TIM_OC2_SetConfig+0xe8>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d10d      	bne.n	8005d18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	011b      	lsls	r3, r3, #4
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a17      	ldr	r2, [pc, #92]	; (8005d78 <TIM_OC2_SetConfig+0xe4>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d003      	beq.n	8005d28 <TIM_OC2_SetConfig+0x94>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a16      	ldr	r2, [pc, #88]	; (8005d7c <TIM_OC2_SetConfig+0xe8>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d113      	bne.n	8005d50 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	695b      	ldr	r3, [r3, #20]
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	621a      	str	r2, [r3, #32]
}
 8005d6a:	bf00      	nop
 8005d6c:	371c      	adds	r7, #28
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	40010000 	.word	0x40010000
 8005d7c:	40010400 	.word	0x40010400

08005d80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b087      	sub	sp, #28
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f023 0303 	bic.w	r3, r3, #3
 8005db6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005dc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	021b      	lsls	r3, r3, #8
 8005dd0:	697a      	ldr	r2, [r7, #20]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a21      	ldr	r2, [pc, #132]	; (8005e60 <TIM_OC3_SetConfig+0xe0>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d003      	beq.n	8005de6 <TIM_OC3_SetConfig+0x66>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a20      	ldr	r2, [pc, #128]	; (8005e64 <TIM_OC3_SetConfig+0xe4>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d10d      	bne.n	8005e02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005dec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	021b      	lsls	r3, r3, #8
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a16      	ldr	r2, [pc, #88]	; (8005e60 <TIM_OC3_SetConfig+0xe0>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d003      	beq.n	8005e12 <TIM_OC3_SetConfig+0x92>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a15      	ldr	r2, [pc, #84]	; (8005e64 <TIM_OC3_SetConfig+0xe4>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d113      	bne.n	8005e3a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	011b      	lsls	r3, r3, #4
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	011b      	lsls	r3, r3, #4
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	685a      	ldr	r2, [r3, #4]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	621a      	str	r2, [r3, #32]
}
 8005e54:	bf00      	nop
 8005e56:	371c      	adds	r7, #28
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr
 8005e60:	40010000 	.word	0x40010000
 8005e64:	40010400 	.word	0x40010400

08005e68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b087      	sub	sp, #28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	021b      	lsls	r3, r3, #8
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005eb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	031b      	lsls	r3, r3, #12
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a12      	ldr	r2, [pc, #72]	; (8005f0c <TIM_OC4_SetConfig+0xa4>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d003      	beq.n	8005ed0 <TIM_OC4_SetConfig+0x68>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a11      	ldr	r2, [pc, #68]	; (8005f10 <TIM_OC4_SetConfig+0xa8>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d109      	bne.n	8005ee4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ed6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	019b      	lsls	r3, r3, #6
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	685a      	ldr	r2, [r3, #4]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	621a      	str	r2, [r3, #32]
}
 8005efe:	bf00      	nop
 8005f00:	371c      	adds	r7, #28
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	40010000 	.word	0x40010000
 8005f10:	40010400 	.word	0x40010400

08005f14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b087      	sub	sp, #28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6a1b      	ldr	r3, [r3, #32]
 8005f24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	f023 0201 	bic.w	r2, r3, #1
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	011b      	lsls	r3, r3, #4
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f023 030a 	bic.w	r3, r3, #10
 8005f50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	621a      	str	r2, [r3, #32]
}
 8005f66:	bf00      	nop
 8005f68:	371c      	adds	r7, #28
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b087      	sub	sp, #28
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	60f8      	str	r0, [r7, #12]
 8005f7a:	60b9      	str	r1, [r7, #8]
 8005f7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	f023 0210 	bic.w	r2, r3, #16
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6a1b      	ldr	r3, [r3, #32]
 8005f94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	031b      	lsls	r3, r3, #12
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	011b      	lsls	r3, r3, #4
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	621a      	str	r2, [r3, #32]
}
 8005fc6:	bf00      	nop
 8005fc8:	371c      	adds	r7, #28
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b085      	sub	sp, #20
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
 8005fda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	f043 0307 	orr.w	r3, r3, #7
 8005ff4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	609a      	str	r2, [r3, #8]
}
 8005ffc:	bf00      	nop
 8005ffe:	3714      	adds	r7, #20
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006008:	b480      	push	{r7}
 800600a:	b087      	sub	sp, #28
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006022:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	021a      	lsls	r2, r3, #8
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	431a      	orrs	r2, r3
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	4313      	orrs	r3, r2
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	4313      	orrs	r3, r2
 8006034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	609a      	str	r2, [r3, #8]
}
 800603c:	bf00      	nop
 800603e:	371c      	adds	r7, #28
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006048:	b480      	push	{r7}
 800604a:	b087      	sub	sp, #28
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f003 031f 	and.w	r3, r3, #31
 800605a:	2201      	movs	r2, #1
 800605c:	fa02 f303 	lsl.w	r3, r2, r3
 8006060:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6a1a      	ldr	r2, [r3, #32]
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	43db      	mvns	r3, r3
 800606a:	401a      	ands	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6a1a      	ldr	r2, [r3, #32]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	f003 031f 	and.w	r3, r3, #31
 800607a:	6879      	ldr	r1, [r7, #4]
 800607c:	fa01 f303 	lsl.w	r3, r1, r3
 8006080:	431a      	orrs	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	621a      	str	r2, [r3, #32]
}
 8006086:	bf00      	nop
 8006088:	371c      	adds	r7, #28
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
	...

08006094 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d101      	bne.n	80060ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060a8:	2302      	movs	r3, #2
 80060aa:	e05a      	b.n	8006162 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2202      	movs	r2, #2
 80060b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	4313      	orrs	r3, r2
 80060dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a21      	ldr	r2, [pc, #132]	; (8006170 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d022      	beq.n	8006136 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060f8:	d01d      	beq.n	8006136 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a1d      	ldr	r2, [pc, #116]	; (8006174 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d018      	beq.n	8006136 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a1b      	ldr	r2, [pc, #108]	; (8006178 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d013      	beq.n	8006136 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a1a      	ldr	r2, [pc, #104]	; (800617c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d00e      	beq.n	8006136 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a18      	ldr	r2, [pc, #96]	; (8006180 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d009      	beq.n	8006136 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a17      	ldr	r2, [pc, #92]	; (8006184 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d004      	beq.n	8006136 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a15      	ldr	r2, [pc, #84]	; (8006188 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d10c      	bne.n	8006150 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800613c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	4313      	orrs	r3, r2
 8006146:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3714      	adds	r7, #20
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	40010000 	.word	0x40010000
 8006174:	40000400 	.word	0x40000400
 8006178:	40000800 	.word	0x40000800
 800617c:	40000c00 	.word	0x40000c00
 8006180:	40010400 	.word	0x40010400
 8006184:	40014000 	.word	0x40014000
 8006188:	40001800 	.word	0x40001800

0800618c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006196:	2300      	movs	r3, #0
 8006198:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d101      	bne.n	80061a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80061a4:	2302      	movs	r3, #2
 80061a6:	e03d      	b.n	8006224 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	695b      	ldr	r3, [r3, #20]
 8006200:	4313      	orrs	r3, r2
 8006202:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	4313      	orrs	r3, r2
 8006210:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3714      	adds	r7, #20
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d101      	bne.n	8006242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e03f      	b.n	80062c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006248:	b2db      	uxtb	r3, r3
 800624a:	2b00      	cmp	r3, #0
 800624c:	d106      	bne.n	800625c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f7fd fa30 	bl	80036bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2224      	movs	r2, #36	; 0x24
 8006260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68da      	ldr	r2, [r3, #12]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006272:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 ff43 	bl	8007100 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	691a      	ldr	r2, [r3, #16]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006288:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	695a      	ldr	r2, [r3, #20]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006298:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68da      	ldr	r2, [r3, #12]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2220      	movs	r2, #32
 80062b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2220      	movs	r2, #32
 80062bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3708      	adds	r7, #8
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
	...

080062cc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b08c      	sub	sp, #48	; 0x30
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	4613      	mov	r3, r2
 80062d8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b20      	cmp	r3, #32
 80062e4:	d165      	bne.n	80063b2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d002      	beq.n	80062f2 <HAL_UART_Transmit_DMA+0x26>
 80062ec:	88fb      	ldrh	r3, [r7, #6]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e05e      	b.n	80063b4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d101      	bne.n	8006304 <HAL_UART_Transmit_DMA+0x38>
 8006300:	2302      	movs	r3, #2
 8006302:	e057      	b.n	80063b4 <HAL_UART_Transmit_DMA+0xe8>
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	88fa      	ldrh	r2, [r7, #6]
 8006316:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	88fa      	ldrh	r2, [r7, #6]
 800631c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2221      	movs	r2, #33	; 0x21
 8006328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006330:	4a22      	ldr	r2, [pc, #136]	; (80063bc <HAL_UART_Transmit_DMA+0xf0>)
 8006332:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006338:	4a21      	ldr	r2, [pc, #132]	; (80063c0 <HAL_UART_Transmit_DMA+0xf4>)
 800633a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006340:	4a20      	ldr	r2, [pc, #128]	; (80063c4 <HAL_UART_Transmit_DMA+0xf8>)
 8006342:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006348:	2200      	movs	r2, #0
 800634a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800634c:	f107 0308 	add.w	r3, r7, #8
 8006350:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006358:	6819      	ldr	r1, [r3, #0]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	3304      	adds	r3, #4
 8006360:	461a      	mov	r2, r3
 8006362:	88fb      	ldrh	r3, [r7, #6]
 8006364:	f7fd fda6 	bl	8003eb4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006370:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	3314      	adds	r3, #20
 8006380:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	e853 3f00 	ldrex	r3, [r3]
 8006388:	617b      	str	r3, [r7, #20]
   return(result);
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006390:	62bb      	str	r3, [r7, #40]	; 0x28
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	3314      	adds	r3, #20
 8006398:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800639a:	627a      	str	r2, [r7, #36]	; 0x24
 800639c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639e:	6a39      	ldr	r1, [r7, #32]
 80063a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063a2:	e841 2300 	strex	r3, r2, [r1]
 80063a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1e5      	bne.n	800637a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80063ae:	2300      	movs	r3, #0
 80063b0:	e000      	b.n	80063b4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80063b2:	2302      	movs	r3, #2
  }
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3730      	adds	r7, #48	; 0x30
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	08006999 	.word	0x08006999
 80063c0:	08006a33 	.word	0x08006a33
 80063c4:	08006bab 	.word	0x08006bab

080063c8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	4613      	mov	r3, r2
 80063d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2b20      	cmp	r3, #32
 80063e0:	d11d      	bne.n	800641e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d002      	beq.n	80063ee <HAL_UART_Receive_DMA+0x26>
 80063e8:	88fb      	ldrh	r3, [r7, #6]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d101      	bne.n	80063f2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e016      	b.n	8006420 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d101      	bne.n	8006400 <HAL_UART_Receive_DMA+0x38>
 80063fc:	2302      	movs	r3, #2
 80063fe:	e00f      	b.n	8006420 <HAL_UART_Receive_DMA+0x58>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800640e:	88fb      	ldrh	r3, [r7, #6]
 8006410:	461a      	mov	r2, r3
 8006412:	68b9      	ldr	r1, [r7, #8]
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f000 fc13 	bl	8006c40 <UART_Start_Receive_DMA>
 800641a:	4603      	mov	r3, r0
 800641c:	e000      	b.n	8006420 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800641e:	2302      	movs	r3, #2
  }
}
 8006420:	4618      	mov	r0, r3
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b0ba      	sub	sp, #232	; 0xe8
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	695b      	ldr	r3, [r3, #20]
 800644a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800644e:	2300      	movs	r3, #0
 8006450:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006454:	2300      	movs	r3, #0
 8006456:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800645a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800645e:	f003 030f 	and.w	r3, r3, #15
 8006462:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006466:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10f      	bne.n	800648e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800646e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006472:	f003 0320 	and.w	r3, r3, #32
 8006476:	2b00      	cmp	r3, #0
 8006478:	d009      	beq.n	800648e <HAL_UART_IRQHandler+0x66>
 800647a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800647e:	f003 0320 	and.w	r3, r3, #32
 8006482:	2b00      	cmp	r3, #0
 8006484:	d003      	beq.n	800648e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 fd7f 	bl	8006f8a <UART_Receive_IT>
      return;
 800648c:	e256      	b.n	800693c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800648e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006492:	2b00      	cmp	r3, #0
 8006494:	f000 80de 	beq.w	8006654 <HAL_UART_IRQHandler+0x22c>
 8006498:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800649c:	f003 0301 	and.w	r3, r3, #1
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d106      	bne.n	80064b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80064a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f000 80d1 	beq.w	8006654 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80064b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00b      	beq.n	80064d6 <HAL_UART_IRQHandler+0xae>
 80064be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d005      	beq.n	80064d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ce:	f043 0201 	orr.w	r2, r3, #1
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064da:	f003 0304 	and.w	r3, r3, #4
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00b      	beq.n	80064fa <HAL_UART_IRQHandler+0xd2>
 80064e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d005      	beq.n	80064fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f2:	f043 0202 	orr.w	r2, r3, #2
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064fe:	f003 0302 	and.w	r3, r3, #2
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00b      	beq.n	800651e <HAL_UART_IRQHandler+0xf6>
 8006506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	2b00      	cmp	r3, #0
 8006510:	d005      	beq.n	800651e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006516:	f043 0204 	orr.w	r2, r3, #4
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800651e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006522:	f003 0308 	and.w	r3, r3, #8
 8006526:	2b00      	cmp	r3, #0
 8006528:	d011      	beq.n	800654e <HAL_UART_IRQHandler+0x126>
 800652a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800652e:	f003 0320 	and.w	r3, r3, #32
 8006532:	2b00      	cmp	r3, #0
 8006534:	d105      	bne.n	8006542 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800653a:	f003 0301 	and.w	r3, r3, #1
 800653e:	2b00      	cmp	r3, #0
 8006540:	d005      	beq.n	800654e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006546:	f043 0208 	orr.w	r2, r3, #8
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006552:	2b00      	cmp	r3, #0
 8006554:	f000 81ed 	beq.w	8006932 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800655c:	f003 0320 	and.w	r3, r3, #32
 8006560:	2b00      	cmp	r3, #0
 8006562:	d008      	beq.n	8006576 <HAL_UART_IRQHandler+0x14e>
 8006564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006568:	f003 0320 	and.w	r3, r3, #32
 800656c:	2b00      	cmp	r3, #0
 800656e:	d002      	beq.n	8006576 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 fd0a 	bl	8006f8a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	695b      	ldr	r3, [r3, #20]
 800657c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006580:	2b40      	cmp	r3, #64	; 0x40
 8006582:	bf0c      	ite	eq
 8006584:	2301      	moveq	r3, #1
 8006586:	2300      	movne	r3, #0
 8006588:	b2db      	uxtb	r3, r3
 800658a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006592:	f003 0308 	and.w	r3, r3, #8
 8006596:	2b00      	cmp	r3, #0
 8006598:	d103      	bne.n	80065a2 <HAL_UART_IRQHandler+0x17a>
 800659a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d04f      	beq.n	8006642 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 fc12 	bl	8006dcc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b2:	2b40      	cmp	r3, #64	; 0x40
 80065b4:	d141      	bne.n	800663a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	3314      	adds	r3, #20
 80065bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065c4:	e853 3f00 	ldrex	r3, [r3]
 80065c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80065cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	3314      	adds	r3, #20
 80065de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80065e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80065e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80065ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80065f2:	e841 2300 	strex	r3, r2, [r1]
 80065f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80065fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1d9      	bne.n	80065b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006606:	2b00      	cmp	r3, #0
 8006608:	d013      	beq.n	8006632 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660e:	4a7d      	ldr	r2, [pc, #500]	; (8006804 <HAL_UART_IRQHandler+0x3dc>)
 8006610:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006616:	4618      	mov	r0, r3
 8006618:	f7fd fd14 	bl	8004044 <HAL_DMA_Abort_IT>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d016      	beq.n	8006650 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800662c:	4610      	mov	r0, r2
 800662e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006630:	e00e      	b.n	8006650 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 f99a 	bl	800696c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006638:	e00a      	b.n	8006650 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f996 	bl	800696c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006640:	e006      	b.n	8006650 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 f992 	bl	800696c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800664e:	e170      	b.n	8006932 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006650:	bf00      	nop
    return;
 8006652:	e16e      	b.n	8006932 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006658:	2b01      	cmp	r3, #1
 800665a:	f040 814a 	bne.w	80068f2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800665e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006662:	f003 0310 	and.w	r3, r3, #16
 8006666:	2b00      	cmp	r3, #0
 8006668:	f000 8143 	beq.w	80068f2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800666c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006670:	f003 0310 	and.w	r3, r3, #16
 8006674:	2b00      	cmp	r3, #0
 8006676:	f000 813c 	beq.w	80068f2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800667a:	2300      	movs	r3, #0
 800667c:	60bb      	str	r3, [r7, #8]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	60bb      	str	r3, [r7, #8]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	60bb      	str	r3, [r7, #8]
 800668e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800669a:	2b40      	cmp	r3, #64	; 0x40
 800669c:	f040 80b4 	bne.w	8006808 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80066ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f000 8140 	beq.w	8006936 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80066ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80066be:	429a      	cmp	r2, r3
 80066c0:	f080 8139 	bcs.w	8006936 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80066ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d0:	69db      	ldr	r3, [r3, #28]
 80066d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066d6:	f000 8088 	beq.w	80067ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	330c      	adds	r3, #12
 80066e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80066e8:	e853 3f00 	ldrex	r3, [r3]
 80066ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80066f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	330c      	adds	r3, #12
 8006702:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006706:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800670a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006712:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006716:	e841 2300 	strex	r3, r2, [r1]
 800671a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800671e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1d9      	bne.n	80066da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	3314      	adds	r3, #20
 800672c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006730:	e853 3f00 	ldrex	r3, [r3]
 8006734:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006736:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006738:	f023 0301 	bic.w	r3, r3, #1
 800673c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	3314      	adds	r3, #20
 8006746:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800674a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800674e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006750:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006752:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006756:	e841 2300 	strex	r3, r2, [r1]
 800675a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800675c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1e1      	bne.n	8006726 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	3314      	adds	r3, #20
 8006768:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800676c:	e853 3f00 	ldrex	r3, [r3]
 8006770:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006772:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006774:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006778:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	3314      	adds	r3, #20
 8006782:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006786:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006788:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800678c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800678e:	e841 2300 	strex	r3, r2, [r1]
 8006792:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006794:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1e3      	bne.n	8006762 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2220      	movs	r2, #32
 800679e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	330c      	adds	r3, #12
 80067ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067b2:	e853 3f00 	ldrex	r3, [r3]
 80067b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80067b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067ba:	f023 0310 	bic.w	r3, r3, #16
 80067be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	330c      	adds	r3, #12
 80067c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80067cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80067ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80067d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80067d4:	e841 2300 	strex	r3, r2, [r1]
 80067d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80067da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1e3      	bne.n	80067a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e4:	4618      	mov	r0, r3
 80067e6:	f7fd fbbd 	bl	8003f64 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	4619      	mov	r1, r3
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f8c0 	bl	8006980 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006800:	e099      	b.n	8006936 <HAL_UART_IRQHandler+0x50e>
 8006802:	bf00      	nop
 8006804:	08006e93 	.word	0x08006e93
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006810:	b29b      	uxth	r3, r3
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800681c:	b29b      	uxth	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	f000 808b 	beq.w	800693a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006824:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006828:	2b00      	cmp	r3, #0
 800682a:	f000 8086 	beq.w	800693a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	330c      	adds	r3, #12
 8006834:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006838:	e853 3f00 	ldrex	r3, [r3]
 800683c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800683e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006840:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006844:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	330c      	adds	r3, #12
 800684e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006852:	647a      	str	r2, [r7, #68]	; 0x44
 8006854:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006856:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006858:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800685a:	e841 2300 	strex	r3, r2, [r1]
 800685e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1e3      	bne.n	800682e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	3314      	adds	r3, #20
 800686c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006870:	e853 3f00 	ldrex	r3, [r3]
 8006874:	623b      	str	r3, [r7, #32]
   return(result);
 8006876:	6a3b      	ldr	r3, [r7, #32]
 8006878:	f023 0301 	bic.w	r3, r3, #1
 800687c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	3314      	adds	r3, #20
 8006886:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800688a:	633a      	str	r2, [r7, #48]	; 0x30
 800688c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006892:	e841 2300 	strex	r3, r2, [r1]
 8006896:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1e3      	bne.n	8006866 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2220      	movs	r2, #32
 80068a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	330c      	adds	r3, #12
 80068b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	e853 3f00 	ldrex	r3, [r3]
 80068ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f023 0310 	bic.w	r3, r3, #16
 80068c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	330c      	adds	r3, #12
 80068cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80068d0:	61fa      	str	r2, [r7, #28]
 80068d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d4:	69b9      	ldr	r1, [r7, #24]
 80068d6:	69fa      	ldr	r2, [r7, #28]
 80068d8:	e841 2300 	strex	r3, r2, [r1]
 80068dc:	617b      	str	r3, [r7, #20]
   return(result);
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d1e3      	bne.n	80068ac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068e8:	4619      	mov	r1, r3
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 f848 	bl	8006980 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80068f0:	e023      	b.n	800693a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80068f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d009      	beq.n	8006912 <HAL_UART_IRQHandler+0x4ea>
 80068fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006906:	2b00      	cmp	r3, #0
 8006908:	d003      	beq.n	8006912 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 fad5 	bl	8006eba <UART_Transmit_IT>
    return;
 8006910:	e014      	b.n	800693c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00e      	beq.n	800693c <HAL_UART_IRQHandler+0x514>
 800691e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006926:	2b00      	cmp	r3, #0
 8006928:	d008      	beq.n	800693c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 fb15 	bl	8006f5a <UART_EndTransmit_IT>
    return;
 8006930:	e004      	b.n	800693c <HAL_UART_IRQHandler+0x514>
    return;
 8006932:	bf00      	nop
 8006934:	e002      	b.n	800693c <HAL_UART_IRQHandler+0x514>
      return;
 8006936:	bf00      	nop
 8006938:	e000      	b.n	800693c <HAL_UART_IRQHandler+0x514>
      return;
 800693a:	bf00      	nop
  }
}
 800693c:	37e8      	adds	r7, #232	; 0xe8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop

08006944 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800694c:	bf00      	nop
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	460b      	mov	r3, r1
 800698a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800698c:	bf00      	nop
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b090      	sub	sp, #64	; 0x40
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d137      	bne.n	8006a24 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80069b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069b6:	2200      	movs	r2, #0
 80069b8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80069ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	3314      	adds	r3, #20
 80069c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c4:	e853 3f00 	ldrex	r3, [r3]
 80069c8:	623b      	str	r3, [r7, #32]
   return(result);
 80069ca:	6a3b      	ldr	r3, [r7, #32]
 80069cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80069d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	3314      	adds	r3, #20
 80069d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069da:	633a      	str	r2, [r7, #48]	; 0x30
 80069dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069e2:	e841 2300 	strex	r3, r2, [r1]
 80069e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1e5      	bne.n	80069ba <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	330c      	adds	r3, #12
 80069f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	e853 3f00 	ldrex	r3, [r3]
 80069fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a04:	637b      	str	r3, [r7, #52]	; 0x34
 8006a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	330c      	adds	r3, #12
 8006a0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a0e:	61fa      	str	r2, [r7, #28]
 8006a10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a12:	69b9      	ldr	r1, [r7, #24]
 8006a14:	69fa      	ldr	r2, [r7, #28]
 8006a16:	e841 2300 	strex	r3, r2, [r1]
 8006a1a:	617b      	str	r3, [r7, #20]
   return(result);
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1e5      	bne.n	80069ee <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a22:	e002      	b.n	8006a2a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006a24:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006a26:	f7f9 feb9 	bl	800079c <HAL_UART_TxCpltCallback>
}
 8006a2a:	bf00      	nop
 8006a2c:	3740      	adds	r7, #64	; 0x40
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b084      	sub	sp, #16
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f7ff ff7f 	bl	8006944 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a46:	bf00      	nop
 8006a48:	3710      	adds	r7, #16
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b09c      	sub	sp, #112	; 0x70
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d172      	bne.n	8006b50 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	330c      	adds	r3, #12
 8006a76:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a7a:	e853 3f00 	ldrex	r3, [r3]
 8006a7e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a86:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	330c      	adds	r3, #12
 8006a8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a90:	65ba      	str	r2, [r7, #88]	; 0x58
 8006a92:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a98:	e841 2300 	strex	r3, r2, [r1]
 8006a9c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d1e5      	bne.n	8006a70 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	3314      	adds	r3, #20
 8006aaa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aae:	e853 3f00 	ldrex	r3, [r3]
 8006ab2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab6:	f023 0301 	bic.w	r3, r3, #1
 8006aba:	667b      	str	r3, [r7, #100]	; 0x64
 8006abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	3314      	adds	r3, #20
 8006ac2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006ac4:	647a      	str	r2, [r7, #68]	; 0x44
 8006ac6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006aca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006acc:	e841 2300 	strex	r3, r2, [r1]
 8006ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1e5      	bne.n	8006aa4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	3314      	adds	r3, #20
 8006ade:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae2:	e853 3f00 	ldrex	r3, [r3]
 8006ae6:	623b      	str	r3, [r7, #32]
   return(result);
 8006ae8:	6a3b      	ldr	r3, [r7, #32]
 8006aea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aee:	663b      	str	r3, [r7, #96]	; 0x60
 8006af0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	3314      	adds	r3, #20
 8006af6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006af8:	633a      	str	r2, [r7, #48]	; 0x30
 8006afa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006afe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b00:	e841 2300 	strex	r3, r2, [r1]
 8006b04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1e5      	bne.n	8006ad8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b0e:	2220      	movs	r2, #32
 8006b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d119      	bne.n	8006b50 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	330c      	adds	r3, #12
 8006b22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	e853 3f00 	ldrex	r3, [r3]
 8006b2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f023 0310 	bic.w	r3, r3, #16
 8006b32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	330c      	adds	r3, #12
 8006b3a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b3c:	61fa      	str	r2, [r7, #28]
 8006b3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b40:	69b9      	ldr	r1, [r7, #24]
 8006b42:	69fa      	ldr	r2, [r7, #28]
 8006b44:	e841 2300 	strex	r3, r2, [r1]
 8006b48:	617b      	str	r3, [r7, #20]
   return(result);
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d1e5      	bne.n	8006b1c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d106      	bne.n	8006b66 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b5a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006b60:	f7ff ff0e 	bl	8006980 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b64:	e002      	b.n	8006b6c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006b66:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006b68:	f7f9 fe34 	bl	80007d4 <HAL_UART_RxCpltCallback>
}
 8006b6c:	bf00      	nop
 8006b6e:	3770      	adds	r7, #112	; 0x70
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b80:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d108      	bne.n	8006b9c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b8e:	085b      	lsrs	r3, r3, #1
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	4619      	mov	r1, r3
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f7ff fef3 	bl	8006980 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b9a:	e002      	b.n	8006ba2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f7ff fedb 	bl	8006958 <HAL_UART_RxHalfCpltCallback>
}
 8006ba2:	bf00      	nop
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b084      	sub	sp, #16
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bba:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bc6:	2b80      	cmp	r3, #128	; 0x80
 8006bc8:	bf0c      	ite	eq
 8006bca:	2301      	moveq	r3, #1
 8006bcc:	2300      	movne	r3, #0
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	2b21      	cmp	r3, #33	; 0x21
 8006bdc:	d108      	bne.n	8006bf0 <UART_DMAError+0x46>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d005      	beq.n	8006bf0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	2200      	movs	r2, #0
 8006be8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006bea:	68b8      	ldr	r0, [r7, #8]
 8006bec:	f000 f8c6 	bl	8006d7c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bfa:	2b40      	cmp	r3, #64	; 0x40
 8006bfc:	bf0c      	ite	eq
 8006bfe:	2301      	moveq	r3, #1
 8006c00:	2300      	movne	r3, #0
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	2b22      	cmp	r3, #34	; 0x22
 8006c10:	d108      	bne.n	8006c24 <UART_DMAError+0x7a>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d005      	beq.n	8006c24 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006c1e:	68b8      	ldr	r0, [r7, #8]
 8006c20:	f000 f8d4 	bl	8006dcc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c28:	f043 0210 	orr.w	r2, r3, #16
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c30:	68b8      	ldr	r0, [r7, #8]
 8006c32:	f7ff fe9b 	bl	800696c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c36:	bf00      	nop
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
	...

08006c40 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b098      	sub	sp, #96	; 0x60
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006c4e:	68ba      	ldr	r2, [r7, #8]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	88fa      	ldrh	r2, [r7, #6]
 8006c58:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2222      	movs	r2, #34	; 0x22
 8006c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6c:	4a40      	ldr	r2, [pc, #256]	; (8006d70 <UART_Start_Receive_DMA+0x130>)
 8006c6e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c74:	4a3f      	ldr	r2, [pc, #252]	; (8006d74 <UART_Start_Receive_DMA+0x134>)
 8006c76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7c:	4a3e      	ldr	r2, [pc, #248]	; (8006d78 <UART_Start_Receive_DMA+0x138>)
 8006c7e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c84:	2200      	movs	r2, #0
 8006c86:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006c88:	f107 0308 	add.w	r3, r7, #8
 8006c8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	3304      	adds	r3, #4
 8006c98:	4619      	mov	r1, r3
 8006c9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	88fb      	ldrh	r3, [r7, #6]
 8006ca0:	f7fd f908 	bl	8003eb4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	613b      	str	r3, [r7, #16]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	613b      	str	r3, [r7, #16]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	613b      	str	r3, [r7, #16]
 8006cb8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d019      	beq.n	8006cfe <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	330c      	adds	r3, #12
 8006cd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cd4:	e853 3f00 	ldrex	r3, [r3]
 8006cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ce0:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	330c      	adds	r3, #12
 8006ce8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006cea:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006cec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cee:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006cf0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006cf2:	e841 2300 	strex	r3, r2, [r1]
 8006cf6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006cf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1e5      	bne.n	8006cca <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	3314      	adds	r3, #20
 8006d04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d08:	e853 3f00 	ldrex	r3, [r3]
 8006d0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d10:	f043 0301 	orr.w	r3, r3, #1
 8006d14:	657b      	str	r3, [r7, #84]	; 0x54
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	3314      	adds	r3, #20
 8006d1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006d1e:	63ba      	str	r2, [r7, #56]	; 0x38
 8006d20:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d22:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006d24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d26:	e841 2300 	strex	r3, r2, [r1]
 8006d2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1e5      	bne.n	8006cfe <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	3314      	adds	r3, #20
 8006d38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	e853 3f00 	ldrex	r3, [r3]
 8006d40:	617b      	str	r3, [r7, #20]
   return(result);
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d48:	653b      	str	r3, [r7, #80]	; 0x50
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	3314      	adds	r3, #20
 8006d50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d52:	627a      	str	r2, [r7, #36]	; 0x24
 8006d54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d56:	6a39      	ldr	r1, [r7, #32]
 8006d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d5a:	e841 2300 	strex	r3, r2, [r1]
 8006d5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d1e5      	bne.n	8006d32 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3760      	adds	r7, #96	; 0x60
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	08006a4f 	.word	0x08006a4f
 8006d74:	08006b75 	.word	0x08006b75
 8006d78:	08006bab 	.word	0x08006bab

08006d7c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b089      	sub	sp, #36	; 0x24
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	330c      	adds	r3, #12
 8006d8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	e853 3f00 	ldrex	r3, [r3]
 8006d92:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006d9a:	61fb      	str	r3, [r7, #28]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	330c      	adds	r3, #12
 8006da2:	69fa      	ldr	r2, [r7, #28]
 8006da4:	61ba      	str	r2, [r7, #24]
 8006da6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da8:	6979      	ldr	r1, [r7, #20]
 8006daa:	69ba      	ldr	r2, [r7, #24]
 8006dac:	e841 2300 	strex	r3, r2, [r1]
 8006db0:	613b      	str	r3, [r7, #16]
   return(result);
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d1e5      	bne.n	8006d84 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2220      	movs	r2, #32
 8006dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006dc0:	bf00      	nop
 8006dc2:	3724      	adds	r7, #36	; 0x24
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b095      	sub	sp, #84	; 0x54
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	330c      	adds	r3, #12
 8006dda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dde:	e853 3f00 	ldrex	r3, [r3]
 8006de2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	330c      	adds	r3, #12
 8006df2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006df4:	643a      	str	r2, [r7, #64]	; 0x40
 8006df6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006dfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006dfc:	e841 2300 	strex	r3, r2, [r1]
 8006e00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1e5      	bne.n	8006dd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	3314      	adds	r3, #20
 8006e0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e10:	6a3b      	ldr	r3, [r7, #32]
 8006e12:	e853 3f00 	ldrex	r3, [r3]
 8006e16:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	f023 0301 	bic.w	r3, r3, #1
 8006e1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	3314      	adds	r3, #20
 8006e26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e30:	e841 2300 	strex	r3, r2, [r1]
 8006e34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1e5      	bne.n	8006e08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d119      	bne.n	8006e78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	330c      	adds	r3, #12
 8006e4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	e853 3f00 	ldrex	r3, [r3]
 8006e52:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	f023 0310 	bic.w	r3, r3, #16
 8006e5a:	647b      	str	r3, [r7, #68]	; 0x44
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	330c      	adds	r3, #12
 8006e62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e64:	61ba      	str	r2, [r7, #24]
 8006e66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e68:	6979      	ldr	r1, [r7, #20]
 8006e6a:	69ba      	ldr	r2, [r7, #24]
 8006e6c:	e841 2300 	strex	r3, r2, [r1]
 8006e70:	613b      	str	r3, [r7, #16]
   return(result);
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1e5      	bne.n	8006e44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2220      	movs	r2, #32
 8006e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006e86:	bf00      	nop
 8006e88:	3754      	adds	r7, #84	; 0x54
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr

08006e92 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b084      	sub	sp, #16
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	f7ff fd5d 	bl	800696c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006eb2:	bf00      	nop
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006eba:	b480      	push	{r7}
 8006ebc:	b085      	sub	sp, #20
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b21      	cmp	r3, #33	; 0x21
 8006ecc:	d13e      	bne.n	8006f4c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ed6:	d114      	bne.n	8006f02 <UART_Transmit_IT+0x48>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d110      	bne.n	8006f02 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6a1b      	ldr	r3, [r3, #32]
 8006ee4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	881b      	ldrh	r3, [r3, #0]
 8006eea:	461a      	mov	r2, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ef4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	1c9a      	adds	r2, r3, #2
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	621a      	str	r2, [r3, #32]
 8006f00:	e008      	b.n	8006f14 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	1c59      	adds	r1, r3, #1
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	6211      	str	r1, [r2, #32]
 8006f0c:	781a      	ldrb	r2, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	4619      	mov	r1, r3
 8006f22:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d10f      	bne.n	8006f48 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68da      	ldr	r2, [r3, #12]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f36:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68da      	ldr	r2, [r3, #12]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f46:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	e000      	b.n	8006f4e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f4c:	2302      	movs	r3, #2
  }
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3714      	adds	r7, #20
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr

08006f5a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b082      	sub	sp, #8
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68da      	ldr	r2, [r3, #12]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f70:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2220      	movs	r2, #32
 8006f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f7f9 fc0e 	bl	800079c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3708      	adds	r7, #8
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b08c      	sub	sp, #48	; 0x30
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2b22      	cmp	r3, #34	; 0x22
 8006f9c:	f040 80ab 	bne.w	80070f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fa8:	d117      	bne.n	8006fda <UART_Receive_IT+0x50>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d113      	bne.n	8006fda <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fcc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd2:	1c9a      	adds	r2, r3, #2
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	629a      	str	r2, [r3, #40]	; 0x28
 8006fd8:	e026      	b.n	8007028 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fde:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fec:	d007      	beq.n	8006ffe <UART_Receive_IT+0x74>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10a      	bne.n	800700c <UART_Receive_IT+0x82>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d106      	bne.n	800700c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	b2da      	uxtb	r2, r3
 8007006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007008:	701a      	strb	r2, [r3, #0]
 800700a:	e008      	b.n	800701e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	b2db      	uxtb	r3, r3
 8007014:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007018:	b2da      	uxtb	r2, r3
 800701a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007022:	1c5a      	adds	r2, r3, #1
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800702c:	b29b      	uxth	r3, r3
 800702e:	3b01      	subs	r3, #1
 8007030:	b29b      	uxth	r3, r3
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	4619      	mov	r1, r3
 8007036:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007038:	2b00      	cmp	r3, #0
 800703a:	d15a      	bne.n	80070f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68da      	ldr	r2, [r3, #12]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f022 0220 	bic.w	r2, r2, #32
 800704a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68da      	ldr	r2, [r3, #12]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800705a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	695a      	ldr	r2, [r3, #20]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f022 0201 	bic.w	r2, r2, #1
 800706a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2220      	movs	r2, #32
 8007070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007078:	2b01      	cmp	r3, #1
 800707a:	d135      	bne.n	80070e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	330c      	adds	r3, #12
 8007088:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	e853 3f00 	ldrex	r3, [r3]
 8007090:	613b      	str	r3, [r7, #16]
   return(result);
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	f023 0310 	bic.w	r3, r3, #16
 8007098:	627b      	str	r3, [r7, #36]	; 0x24
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	330c      	adds	r3, #12
 80070a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070a2:	623a      	str	r2, [r7, #32]
 80070a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a6:	69f9      	ldr	r1, [r7, #28]
 80070a8:	6a3a      	ldr	r2, [r7, #32]
 80070aa:	e841 2300 	strex	r3, r2, [r1]
 80070ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1e5      	bne.n	8007082 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0310 	and.w	r3, r3, #16
 80070c0:	2b10      	cmp	r3, #16
 80070c2:	d10a      	bne.n	80070da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070c4:	2300      	movs	r3, #0
 80070c6:	60fb      	str	r3, [r7, #12]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	60fb      	str	r3, [r7, #12]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	60fb      	str	r3, [r7, #12]
 80070d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070de:	4619      	mov	r1, r3
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f7ff fc4d 	bl	8006980 <HAL_UARTEx_RxEventCallback>
 80070e6:	e002      	b.n	80070ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f7f9 fb73 	bl	80007d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80070ee:	2300      	movs	r3, #0
 80070f0:	e002      	b.n	80070f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80070f2:	2300      	movs	r3, #0
 80070f4:	e000      	b.n	80070f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80070f6:	2302      	movs	r3, #2
  }
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3730      	adds	r7, #48	; 0x30
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007104:	b0c0      	sub	sp, #256	; 0x100
 8007106:	af00      	add	r7, sp, #0
 8007108:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800710c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800711c:	68d9      	ldr	r1, [r3, #12]
 800711e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	ea40 0301 	orr.w	r3, r0, r1
 8007128:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800712a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800712e:	689a      	ldr	r2, [r3, #8]
 8007130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	431a      	orrs	r2, r3
 8007138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800713c:	695b      	ldr	r3, [r3, #20]
 800713e:	431a      	orrs	r2, r3
 8007140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007144:	69db      	ldr	r3, [r3, #28]
 8007146:	4313      	orrs	r3, r2
 8007148:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800714c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007158:	f021 010c 	bic.w	r1, r1, #12
 800715c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007166:	430b      	orrs	r3, r1
 8007168:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800716a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800717a:	6999      	ldr	r1, [r3, #24]
 800717c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	ea40 0301 	orr.w	r3, r0, r1
 8007186:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	4b8f      	ldr	r3, [pc, #572]	; (80073cc <UART_SetConfig+0x2cc>)
 8007190:	429a      	cmp	r2, r3
 8007192:	d005      	beq.n	80071a0 <UART_SetConfig+0xa0>
 8007194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	4b8d      	ldr	r3, [pc, #564]	; (80073d0 <UART_SetConfig+0x2d0>)
 800719c:	429a      	cmp	r2, r3
 800719e:	d104      	bne.n	80071aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80071a0:	f7fe f95a 	bl	8005458 <HAL_RCC_GetPCLK2Freq>
 80071a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80071a8:	e003      	b.n	80071b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071aa:	f7fe f941 	bl	8005430 <HAL_RCC_GetPCLK1Freq>
 80071ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071b6:	69db      	ldr	r3, [r3, #28]
 80071b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071bc:	f040 810c 	bne.w	80073d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071c4:	2200      	movs	r2, #0
 80071c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80071ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80071ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80071d2:	4622      	mov	r2, r4
 80071d4:	462b      	mov	r3, r5
 80071d6:	1891      	adds	r1, r2, r2
 80071d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80071da:	415b      	adcs	r3, r3
 80071dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80071e2:	4621      	mov	r1, r4
 80071e4:	eb12 0801 	adds.w	r8, r2, r1
 80071e8:	4629      	mov	r1, r5
 80071ea:	eb43 0901 	adc.w	r9, r3, r1
 80071ee:	f04f 0200 	mov.w	r2, #0
 80071f2:	f04f 0300 	mov.w	r3, #0
 80071f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007202:	4690      	mov	r8, r2
 8007204:	4699      	mov	r9, r3
 8007206:	4623      	mov	r3, r4
 8007208:	eb18 0303 	adds.w	r3, r8, r3
 800720c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007210:	462b      	mov	r3, r5
 8007212:	eb49 0303 	adc.w	r3, r9, r3
 8007216:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800721a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007226:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800722a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800722e:	460b      	mov	r3, r1
 8007230:	18db      	adds	r3, r3, r3
 8007232:	653b      	str	r3, [r7, #80]	; 0x50
 8007234:	4613      	mov	r3, r2
 8007236:	eb42 0303 	adc.w	r3, r2, r3
 800723a:	657b      	str	r3, [r7, #84]	; 0x54
 800723c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007240:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007244:	f7f8 ffc8 	bl	80001d8 <__aeabi_uldivmod>
 8007248:	4602      	mov	r2, r0
 800724a:	460b      	mov	r3, r1
 800724c:	4b61      	ldr	r3, [pc, #388]	; (80073d4 <UART_SetConfig+0x2d4>)
 800724e:	fba3 2302 	umull	r2, r3, r3, r2
 8007252:	095b      	lsrs	r3, r3, #5
 8007254:	011c      	lsls	r4, r3, #4
 8007256:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800725a:	2200      	movs	r2, #0
 800725c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007260:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007264:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007268:	4642      	mov	r2, r8
 800726a:	464b      	mov	r3, r9
 800726c:	1891      	adds	r1, r2, r2
 800726e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007270:	415b      	adcs	r3, r3
 8007272:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007274:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007278:	4641      	mov	r1, r8
 800727a:	eb12 0a01 	adds.w	sl, r2, r1
 800727e:	4649      	mov	r1, r9
 8007280:	eb43 0b01 	adc.w	fp, r3, r1
 8007284:	f04f 0200 	mov.w	r2, #0
 8007288:	f04f 0300 	mov.w	r3, #0
 800728c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007290:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007294:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007298:	4692      	mov	sl, r2
 800729a:	469b      	mov	fp, r3
 800729c:	4643      	mov	r3, r8
 800729e:	eb1a 0303 	adds.w	r3, sl, r3
 80072a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80072a6:	464b      	mov	r3, r9
 80072a8:	eb4b 0303 	adc.w	r3, fp, r3
 80072ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80072b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80072c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80072c4:	460b      	mov	r3, r1
 80072c6:	18db      	adds	r3, r3, r3
 80072c8:	643b      	str	r3, [r7, #64]	; 0x40
 80072ca:	4613      	mov	r3, r2
 80072cc:	eb42 0303 	adc.w	r3, r2, r3
 80072d0:	647b      	str	r3, [r7, #68]	; 0x44
 80072d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80072d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80072da:	f7f8 ff7d 	bl	80001d8 <__aeabi_uldivmod>
 80072de:	4602      	mov	r2, r0
 80072e0:	460b      	mov	r3, r1
 80072e2:	4611      	mov	r1, r2
 80072e4:	4b3b      	ldr	r3, [pc, #236]	; (80073d4 <UART_SetConfig+0x2d4>)
 80072e6:	fba3 2301 	umull	r2, r3, r3, r1
 80072ea:	095b      	lsrs	r3, r3, #5
 80072ec:	2264      	movs	r2, #100	; 0x64
 80072ee:	fb02 f303 	mul.w	r3, r2, r3
 80072f2:	1acb      	subs	r3, r1, r3
 80072f4:	00db      	lsls	r3, r3, #3
 80072f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80072fa:	4b36      	ldr	r3, [pc, #216]	; (80073d4 <UART_SetConfig+0x2d4>)
 80072fc:	fba3 2302 	umull	r2, r3, r3, r2
 8007300:	095b      	lsrs	r3, r3, #5
 8007302:	005b      	lsls	r3, r3, #1
 8007304:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007308:	441c      	add	r4, r3
 800730a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800730e:	2200      	movs	r2, #0
 8007310:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007314:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007318:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800731c:	4642      	mov	r2, r8
 800731e:	464b      	mov	r3, r9
 8007320:	1891      	adds	r1, r2, r2
 8007322:	63b9      	str	r1, [r7, #56]	; 0x38
 8007324:	415b      	adcs	r3, r3
 8007326:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007328:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800732c:	4641      	mov	r1, r8
 800732e:	1851      	adds	r1, r2, r1
 8007330:	6339      	str	r1, [r7, #48]	; 0x30
 8007332:	4649      	mov	r1, r9
 8007334:	414b      	adcs	r3, r1
 8007336:	637b      	str	r3, [r7, #52]	; 0x34
 8007338:	f04f 0200 	mov.w	r2, #0
 800733c:	f04f 0300 	mov.w	r3, #0
 8007340:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007344:	4659      	mov	r1, fp
 8007346:	00cb      	lsls	r3, r1, #3
 8007348:	4651      	mov	r1, sl
 800734a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800734e:	4651      	mov	r1, sl
 8007350:	00ca      	lsls	r2, r1, #3
 8007352:	4610      	mov	r0, r2
 8007354:	4619      	mov	r1, r3
 8007356:	4603      	mov	r3, r0
 8007358:	4642      	mov	r2, r8
 800735a:	189b      	adds	r3, r3, r2
 800735c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007360:	464b      	mov	r3, r9
 8007362:	460a      	mov	r2, r1
 8007364:	eb42 0303 	adc.w	r3, r2, r3
 8007368:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800736c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007378:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800737c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007380:	460b      	mov	r3, r1
 8007382:	18db      	adds	r3, r3, r3
 8007384:	62bb      	str	r3, [r7, #40]	; 0x28
 8007386:	4613      	mov	r3, r2
 8007388:	eb42 0303 	adc.w	r3, r2, r3
 800738c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800738e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007392:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007396:	f7f8 ff1f 	bl	80001d8 <__aeabi_uldivmod>
 800739a:	4602      	mov	r2, r0
 800739c:	460b      	mov	r3, r1
 800739e:	4b0d      	ldr	r3, [pc, #52]	; (80073d4 <UART_SetConfig+0x2d4>)
 80073a0:	fba3 1302 	umull	r1, r3, r3, r2
 80073a4:	095b      	lsrs	r3, r3, #5
 80073a6:	2164      	movs	r1, #100	; 0x64
 80073a8:	fb01 f303 	mul.w	r3, r1, r3
 80073ac:	1ad3      	subs	r3, r2, r3
 80073ae:	00db      	lsls	r3, r3, #3
 80073b0:	3332      	adds	r3, #50	; 0x32
 80073b2:	4a08      	ldr	r2, [pc, #32]	; (80073d4 <UART_SetConfig+0x2d4>)
 80073b4:	fba2 2303 	umull	r2, r3, r2, r3
 80073b8:	095b      	lsrs	r3, r3, #5
 80073ba:	f003 0207 	and.w	r2, r3, #7
 80073be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4422      	add	r2, r4
 80073c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80073c8:	e106      	b.n	80075d8 <UART_SetConfig+0x4d8>
 80073ca:	bf00      	nop
 80073cc:	40011000 	.word	0x40011000
 80073d0:	40011400 	.word	0x40011400
 80073d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80073d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073dc:	2200      	movs	r2, #0
 80073de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80073e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80073e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80073ea:	4642      	mov	r2, r8
 80073ec:	464b      	mov	r3, r9
 80073ee:	1891      	adds	r1, r2, r2
 80073f0:	6239      	str	r1, [r7, #32]
 80073f2:	415b      	adcs	r3, r3
 80073f4:	627b      	str	r3, [r7, #36]	; 0x24
 80073f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80073fa:	4641      	mov	r1, r8
 80073fc:	1854      	adds	r4, r2, r1
 80073fe:	4649      	mov	r1, r9
 8007400:	eb43 0501 	adc.w	r5, r3, r1
 8007404:	f04f 0200 	mov.w	r2, #0
 8007408:	f04f 0300 	mov.w	r3, #0
 800740c:	00eb      	lsls	r3, r5, #3
 800740e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007412:	00e2      	lsls	r2, r4, #3
 8007414:	4614      	mov	r4, r2
 8007416:	461d      	mov	r5, r3
 8007418:	4643      	mov	r3, r8
 800741a:	18e3      	adds	r3, r4, r3
 800741c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007420:	464b      	mov	r3, r9
 8007422:	eb45 0303 	adc.w	r3, r5, r3
 8007426:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800742a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007436:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800743a:	f04f 0200 	mov.w	r2, #0
 800743e:	f04f 0300 	mov.w	r3, #0
 8007442:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007446:	4629      	mov	r1, r5
 8007448:	008b      	lsls	r3, r1, #2
 800744a:	4621      	mov	r1, r4
 800744c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007450:	4621      	mov	r1, r4
 8007452:	008a      	lsls	r2, r1, #2
 8007454:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007458:	f7f8 febe 	bl	80001d8 <__aeabi_uldivmod>
 800745c:	4602      	mov	r2, r0
 800745e:	460b      	mov	r3, r1
 8007460:	4b60      	ldr	r3, [pc, #384]	; (80075e4 <UART_SetConfig+0x4e4>)
 8007462:	fba3 2302 	umull	r2, r3, r3, r2
 8007466:	095b      	lsrs	r3, r3, #5
 8007468:	011c      	lsls	r4, r3, #4
 800746a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800746e:	2200      	movs	r2, #0
 8007470:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007474:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007478:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800747c:	4642      	mov	r2, r8
 800747e:	464b      	mov	r3, r9
 8007480:	1891      	adds	r1, r2, r2
 8007482:	61b9      	str	r1, [r7, #24]
 8007484:	415b      	adcs	r3, r3
 8007486:	61fb      	str	r3, [r7, #28]
 8007488:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800748c:	4641      	mov	r1, r8
 800748e:	1851      	adds	r1, r2, r1
 8007490:	6139      	str	r1, [r7, #16]
 8007492:	4649      	mov	r1, r9
 8007494:	414b      	adcs	r3, r1
 8007496:	617b      	str	r3, [r7, #20]
 8007498:	f04f 0200 	mov.w	r2, #0
 800749c:	f04f 0300 	mov.w	r3, #0
 80074a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074a4:	4659      	mov	r1, fp
 80074a6:	00cb      	lsls	r3, r1, #3
 80074a8:	4651      	mov	r1, sl
 80074aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074ae:	4651      	mov	r1, sl
 80074b0:	00ca      	lsls	r2, r1, #3
 80074b2:	4610      	mov	r0, r2
 80074b4:	4619      	mov	r1, r3
 80074b6:	4603      	mov	r3, r0
 80074b8:	4642      	mov	r2, r8
 80074ba:	189b      	adds	r3, r3, r2
 80074bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80074c0:	464b      	mov	r3, r9
 80074c2:	460a      	mov	r2, r1
 80074c4:	eb42 0303 	adc.w	r3, r2, r3
 80074c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80074cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80074d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80074d8:	f04f 0200 	mov.w	r2, #0
 80074dc:	f04f 0300 	mov.w	r3, #0
 80074e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80074e4:	4649      	mov	r1, r9
 80074e6:	008b      	lsls	r3, r1, #2
 80074e8:	4641      	mov	r1, r8
 80074ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074ee:	4641      	mov	r1, r8
 80074f0:	008a      	lsls	r2, r1, #2
 80074f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80074f6:	f7f8 fe6f 	bl	80001d8 <__aeabi_uldivmod>
 80074fa:	4602      	mov	r2, r0
 80074fc:	460b      	mov	r3, r1
 80074fe:	4611      	mov	r1, r2
 8007500:	4b38      	ldr	r3, [pc, #224]	; (80075e4 <UART_SetConfig+0x4e4>)
 8007502:	fba3 2301 	umull	r2, r3, r3, r1
 8007506:	095b      	lsrs	r3, r3, #5
 8007508:	2264      	movs	r2, #100	; 0x64
 800750a:	fb02 f303 	mul.w	r3, r2, r3
 800750e:	1acb      	subs	r3, r1, r3
 8007510:	011b      	lsls	r3, r3, #4
 8007512:	3332      	adds	r3, #50	; 0x32
 8007514:	4a33      	ldr	r2, [pc, #204]	; (80075e4 <UART_SetConfig+0x4e4>)
 8007516:	fba2 2303 	umull	r2, r3, r2, r3
 800751a:	095b      	lsrs	r3, r3, #5
 800751c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007520:	441c      	add	r4, r3
 8007522:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007526:	2200      	movs	r2, #0
 8007528:	673b      	str	r3, [r7, #112]	; 0x70
 800752a:	677a      	str	r2, [r7, #116]	; 0x74
 800752c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007530:	4642      	mov	r2, r8
 8007532:	464b      	mov	r3, r9
 8007534:	1891      	adds	r1, r2, r2
 8007536:	60b9      	str	r1, [r7, #8]
 8007538:	415b      	adcs	r3, r3
 800753a:	60fb      	str	r3, [r7, #12]
 800753c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007540:	4641      	mov	r1, r8
 8007542:	1851      	adds	r1, r2, r1
 8007544:	6039      	str	r1, [r7, #0]
 8007546:	4649      	mov	r1, r9
 8007548:	414b      	adcs	r3, r1
 800754a:	607b      	str	r3, [r7, #4]
 800754c:	f04f 0200 	mov.w	r2, #0
 8007550:	f04f 0300 	mov.w	r3, #0
 8007554:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007558:	4659      	mov	r1, fp
 800755a:	00cb      	lsls	r3, r1, #3
 800755c:	4651      	mov	r1, sl
 800755e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007562:	4651      	mov	r1, sl
 8007564:	00ca      	lsls	r2, r1, #3
 8007566:	4610      	mov	r0, r2
 8007568:	4619      	mov	r1, r3
 800756a:	4603      	mov	r3, r0
 800756c:	4642      	mov	r2, r8
 800756e:	189b      	adds	r3, r3, r2
 8007570:	66bb      	str	r3, [r7, #104]	; 0x68
 8007572:	464b      	mov	r3, r9
 8007574:	460a      	mov	r2, r1
 8007576:	eb42 0303 	adc.w	r3, r2, r3
 800757a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800757c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	663b      	str	r3, [r7, #96]	; 0x60
 8007586:	667a      	str	r2, [r7, #100]	; 0x64
 8007588:	f04f 0200 	mov.w	r2, #0
 800758c:	f04f 0300 	mov.w	r3, #0
 8007590:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007594:	4649      	mov	r1, r9
 8007596:	008b      	lsls	r3, r1, #2
 8007598:	4641      	mov	r1, r8
 800759a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800759e:	4641      	mov	r1, r8
 80075a0:	008a      	lsls	r2, r1, #2
 80075a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80075a6:	f7f8 fe17 	bl	80001d8 <__aeabi_uldivmod>
 80075aa:	4602      	mov	r2, r0
 80075ac:	460b      	mov	r3, r1
 80075ae:	4b0d      	ldr	r3, [pc, #52]	; (80075e4 <UART_SetConfig+0x4e4>)
 80075b0:	fba3 1302 	umull	r1, r3, r3, r2
 80075b4:	095b      	lsrs	r3, r3, #5
 80075b6:	2164      	movs	r1, #100	; 0x64
 80075b8:	fb01 f303 	mul.w	r3, r1, r3
 80075bc:	1ad3      	subs	r3, r2, r3
 80075be:	011b      	lsls	r3, r3, #4
 80075c0:	3332      	adds	r3, #50	; 0x32
 80075c2:	4a08      	ldr	r2, [pc, #32]	; (80075e4 <UART_SetConfig+0x4e4>)
 80075c4:	fba2 2303 	umull	r2, r3, r2, r3
 80075c8:	095b      	lsrs	r3, r3, #5
 80075ca:	f003 020f 	and.w	r2, r3, #15
 80075ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4422      	add	r2, r4
 80075d6:	609a      	str	r2, [r3, #8]
}
 80075d8:	bf00      	nop
 80075da:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80075de:	46bd      	mov	sp, r7
 80075e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075e4:	51eb851f 	.word	0x51eb851f

080075e8 <malloc>:
 80075e8:	4b02      	ldr	r3, [pc, #8]	; (80075f4 <malloc+0xc>)
 80075ea:	4601      	mov	r1, r0
 80075ec:	6818      	ldr	r0, [r3, #0]
 80075ee:	f000 b823 	b.w	8007638 <_malloc_r>
 80075f2:	bf00      	nop
 80075f4:	20000068 	.word	0x20000068

080075f8 <sbrk_aligned>:
 80075f8:	b570      	push	{r4, r5, r6, lr}
 80075fa:	4e0e      	ldr	r6, [pc, #56]	; (8007634 <sbrk_aligned+0x3c>)
 80075fc:	460c      	mov	r4, r1
 80075fe:	6831      	ldr	r1, [r6, #0]
 8007600:	4605      	mov	r5, r0
 8007602:	b911      	cbnz	r1, 800760a <sbrk_aligned+0x12>
 8007604:	f000 f8e4 	bl	80077d0 <_sbrk_r>
 8007608:	6030      	str	r0, [r6, #0]
 800760a:	4621      	mov	r1, r4
 800760c:	4628      	mov	r0, r5
 800760e:	f000 f8df 	bl	80077d0 <_sbrk_r>
 8007612:	1c43      	adds	r3, r0, #1
 8007614:	d00a      	beq.n	800762c <sbrk_aligned+0x34>
 8007616:	1cc4      	adds	r4, r0, #3
 8007618:	f024 0403 	bic.w	r4, r4, #3
 800761c:	42a0      	cmp	r0, r4
 800761e:	d007      	beq.n	8007630 <sbrk_aligned+0x38>
 8007620:	1a21      	subs	r1, r4, r0
 8007622:	4628      	mov	r0, r5
 8007624:	f000 f8d4 	bl	80077d0 <_sbrk_r>
 8007628:	3001      	adds	r0, #1
 800762a:	d101      	bne.n	8007630 <sbrk_aligned+0x38>
 800762c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007630:	4620      	mov	r0, r4
 8007632:	bd70      	pop	{r4, r5, r6, pc}
 8007634:	20000cd8 	.word	0x20000cd8

08007638 <_malloc_r>:
 8007638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800763c:	1ccd      	adds	r5, r1, #3
 800763e:	f025 0503 	bic.w	r5, r5, #3
 8007642:	3508      	adds	r5, #8
 8007644:	2d0c      	cmp	r5, #12
 8007646:	bf38      	it	cc
 8007648:	250c      	movcc	r5, #12
 800764a:	2d00      	cmp	r5, #0
 800764c:	4607      	mov	r7, r0
 800764e:	db01      	blt.n	8007654 <_malloc_r+0x1c>
 8007650:	42a9      	cmp	r1, r5
 8007652:	d905      	bls.n	8007660 <_malloc_r+0x28>
 8007654:	230c      	movs	r3, #12
 8007656:	603b      	str	r3, [r7, #0]
 8007658:	2600      	movs	r6, #0
 800765a:	4630      	mov	r0, r6
 800765c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007660:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007734 <_malloc_r+0xfc>
 8007664:	f000 f868 	bl	8007738 <__malloc_lock>
 8007668:	f8d8 3000 	ldr.w	r3, [r8]
 800766c:	461c      	mov	r4, r3
 800766e:	bb5c      	cbnz	r4, 80076c8 <_malloc_r+0x90>
 8007670:	4629      	mov	r1, r5
 8007672:	4638      	mov	r0, r7
 8007674:	f7ff ffc0 	bl	80075f8 <sbrk_aligned>
 8007678:	1c43      	adds	r3, r0, #1
 800767a:	4604      	mov	r4, r0
 800767c:	d155      	bne.n	800772a <_malloc_r+0xf2>
 800767e:	f8d8 4000 	ldr.w	r4, [r8]
 8007682:	4626      	mov	r6, r4
 8007684:	2e00      	cmp	r6, #0
 8007686:	d145      	bne.n	8007714 <_malloc_r+0xdc>
 8007688:	2c00      	cmp	r4, #0
 800768a:	d048      	beq.n	800771e <_malloc_r+0xe6>
 800768c:	6823      	ldr	r3, [r4, #0]
 800768e:	4631      	mov	r1, r6
 8007690:	4638      	mov	r0, r7
 8007692:	eb04 0903 	add.w	r9, r4, r3
 8007696:	f000 f89b 	bl	80077d0 <_sbrk_r>
 800769a:	4581      	cmp	r9, r0
 800769c:	d13f      	bne.n	800771e <_malloc_r+0xe6>
 800769e:	6821      	ldr	r1, [r4, #0]
 80076a0:	1a6d      	subs	r5, r5, r1
 80076a2:	4629      	mov	r1, r5
 80076a4:	4638      	mov	r0, r7
 80076a6:	f7ff ffa7 	bl	80075f8 <sbrk_aligned>
 80076aa:	3001      	adds	r0, #1
 80076ac:	d037      	beq.n	800771e <_malloc_r+0xe6>
 80076ae:	6823      	ldr	r3, [r4, #0]
 80076b0:	442b      	add	r3, r5
 80076b2:	6023      	str	r3, [r4, #0]
 80076b4:	f8d8 3000 	ldr.w	r3, [r8]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d038      	beq.n	800772e <_malloc_r+0xf6>
 80076bc:	685a      	ldr	r2, [r3, #4]
 80076be:	42a2      	cmp	r2, r4
 80076c0:	d12b      	bne.n	800771a <_malloc_r+0xe2>
 80076c2:	2200      	movs	r2, #0
 80076c4:	605a      	str	r2, [r3, #4]
 80076c6:	e00f      	b.n	80076e8 <_malloc_r+0xb0>
 80076c8:	6822      	ldr	r2, [r4, #0]
 80076ca:	1b52      	subs	r2, r2, r5
 80076cc:	d41f      	bmi.n	800770e <_malloc_r+0xd6>
 80076ce:	2a0b      	cmp	r2, #11
 80076d0:	d917      	bls.n	8007702 <_malloc_r+0xca>
 80076d2:	1961      	adds	r1, r4, r5
 80076d4:	42a3      	cmp	r3, r4
 80076d6:	6025      	str	r5, [r4, #0]
 80076d8:	bf18      	it	ne
 80076da:	6059      	strne	r1, [r3, #4]
 80076dc:	6863      	ldr	r3, [r4, #4]
 80076de:	bf08      	it	eq
 80076e0:	f8c8 1000 	streq.w	r1, [r8]
 80076e4:	5162      	str	r2, [r4, r5]
 80076e6:	604b      	str	r3, [r1, #4]
 80076e8:	4638      	mov	r0, r7
 80076ea:	f104 060b 	add.w	r6, r4, #11
 80076ee:	f000 f829 	bl	8007744 <__malloc_unlock>
 80076f2:	f026 0607 	bic.w	r6, r6, #7
 80076f6:	1d23      	adds	r3, r4, #4
 80076f8:	1af2      	subs	r2, r6, r3
 80076fa:	d0ae      	beq.n	800765a <_malloc_r+0x22>
 80076fc:	1b9b      	subs	r3, r3, r6
 80076fe:	50a3      	str	r3, [r4, r2]
 8007700:	e7ab      	b.n	800765a <_malloc_r+0x22>
 8007702:	42a3      	cmp	r3, r4
 8007704:	6862      	ldr	r2, [r4, #4]
 8007706:	d1dd      	bne.n	80076c4 <_malloc_r+0x8c>
 8007708:	f8c8 2000 	str.w	r2, [r8]
 800770c:	e7ec      	b.n	80076e8 <_malloc_r+0xb0>
 800770e:	4623      	mov	r3, r4
 8007710:	6864      	ldr	r4, [r4, #4]
 8007712:	e7ac      	b.n	800766e <_malloc_r+0x36>
 8007714:	4634      	mov	r4, r6
 8007716:	6876      	ldr	r6, [r6, #4]
 8007718:	e7b4      	b.n	8007684 <_malloc_r+0x4c>
 800771a:	4613      	mov	r3, r2
 800771c:	e7cc      	b.n	80076b8 <_malloc_r+0x80>
 800771e:	230c      	movs	r3, #12
 8007720:	603b      	str	r3, [r7, #0]
 8007722:	4638      	mov	r0, r7
 8007724:	f000 f80e 	bl	8007744 <__malloc_unlock>
 8007728:	e797      	b.n	800765a <_malloc_r+0x22>
 800772a:	6025      	str	r5, [r4, #0]
 800772c:	e7dc      	b.n	80076e8 <_malloc_r+0xb0>
 800772e:	605b      	str	r3, [r3, #4]
 8007730:	deff      	udf	#255	; 0xff
 8007732:	bf00      	nop
 8007734:	20000cd4 	.word	0x20000cd4

08007738 <__malloc_lock>:
 8007738:	4801      	ldr	r0, [pc, #4]	; (8007740 <__malloc_lock+0x8>)
 800773a:	f000 b883 	b.w	8007844 <__retarget_lock_acquire_recursive>
 800773e:	bf00      	nop
 8007740:	20000e18 	.word	0x20000e18

08007744 <__malloc_unlock>:
 8007744:	4801      	ldr	r0, [pc, #4]	; (800774c <__malloc_unlock+0x8>)
 8007746:	f000 b87e 	b.w	8007846 <__retarget_lock_release_recursive>
 800774a:	bf00      	nop
 800774c:	20000e18 	.word	0x20000e18

08007750 <realloc>:
 8007750:	4b02      	ldr	r3, [pc, #8]	; (800775c <realloc+0xc>)
 8007752:	460a      	mov	r2, r1
 8007754:	4601      	mov	r1, r0
 8007756:	6818      	ldr	r0, [r3, #0]
 8007758:	f000 b802 	b.w	8007760 <_realloc_r>
 800775c:	20000068 	.word	0x20000068

08007760 <_realloc_r>:
 8007760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007764:	4680      	mov	r8, r0
 8007766:	4614      	mov	r4, r2
 8007768:	460e      	mov	r6, r1
 800776a:	b921      	cbnz	r1, 8007776 <_realloc_r+0x16>
 800776c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007770:	4611      	mov	r1, r2
 8007772:	f7ff bf61 	b.w	8007638 <_malloc_r>
 8007776:	b92a      	cbnz	r2, 8007784 <_realloc_r+0x24>
 8007778:	f000 f874 	bl	8007864 <_free_r>
 800777c:	4625      	mov	r5, r4
 800777e:	4628      	mov	r0, r5
 8007780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007784:	f000 f8ba 	bl	80078fc <_malloc_usable_size_r>
 8007788:	4284      	cmp	r4, r0
 800778a:	4607      	mov	r7, r0
 800778c:	d802      	bhi.n	8007794 <_realloc_r+0x34>
 800778e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007792:	d812      	bhi.n	80077ba <_realloc_r+0x5a>
 8007794:	4621      	mov	r1, r4
 8007796:	4640      	mov	r0, r8
 8007798:	f7ff ff4e 	bl	8007638 <_malloc_r>
 800779c:	4605      	mov	r5, r0
 800779e:	2800      	cmp	r0, #0
 80077a0:	d0ed      	beq.n	800777e <_realloc_r+0x1e>
 80077a2:	42bc      	cmp	r4, r7
 80077a4:	4622      	mov	r2, r4
 80077a6:	4631      	mov	r1, r6
 80077a8:	bf28      	it	cs
 80077aa:	463a      	movcs	r2, r7
 80077ac:	f000 f84c 	bl	8007848 <memcpy>
 80077b0:	4631      	mov	r1, r6
 80077b2:	4640      	mov	r0, r8
 80077b4:	f000 f856 	bl	8007864 <_free_r>
 80077b8:	e7e1      	b.n	800777e <_realloc_r+0x1e>
 80077ba:	4635      	mov	r5, r6
 80077bc:	e7df      	b.n	800777e <_realloc_r+0x1e>

080077be <memset>:
 80077be:	4402      	add	r2, r0
 80077c0:	4603      	mov	r3, r0
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d100      	bne.n	80077c8 <memset+0xa>
 80077c6:	4770      	bx	lr
 80077c8:	f803 1b01 	strb.w	r1, [r3], #1
 80077cc:	e7f9      	b.n	80077c2 <memset+0x4>
	...

080077d0 <_sbrk_r>:
 80077d0:	b538      	push	{r3, r4, r5, lr}
 80077d2:	4d06      	ldr	r5, [pc, #24]	; (80077ec <_sbrk_r+0x1c>)
 80077d4:	2300      	movs	r3, #0
 80077d6:	4604      	mov	r4, r0
 80077d8:	4608      	mov	r0, r1
 80077da:	602b      	str	r3, [r5, #0]
 80077dc:	f7fc f876 	bl	80038cc <_sbrk>
 80077e0:	1c43      	adds	r3, r0, #1
 80077e2:	d102      	bne.n	80077ea <_sbrk_r+0x1a>
 80077e4:	682b      	ldr	r3, [r5, #0]
 80077e6:	b103      	cbz	r3, 80077ea <_sbrk_r+0x1a>
 80077e8:	6023      	str	r3, [r4, #0]
 80077ea:	bd38      	pop	{r3, r4, r5, pc}
 80077ec:	20000e14 	.word	0x20000e14

080077f0 <__errno>:
 80077f0:	4b01      	ldr	r3, [pc, #4]	; (80077f8 <__errno+0x8>)
 80077f2:	6818      	ldr	r0, [r3, #0]
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	20000068 	.word	0x20000068

080077fc <__libc_init_array>:
 80077fc:	b570      	push	{r4, r5, r6, lr}
 80077fe:	4d0d      	ldr	r5, [pc, #52]	; (8007834 <__libc_init_array+0x38>)
 8007800:	4c0d      	ldr	r4, [pc, #52]	; (8007838 <__libc_init_array+0x3c>)
 8007802:	1b64      	subs	r4, r4, r5
 8007804:	10a4      	asrs	r4, r4, #2
 8007806:	2600      	movs	r6, #0
 8007808:	42a6      	cmp	r6, r4
 800780a:	d109      	bne.n	8007820 <__libc_init_array+0x24>
 800780c:	4d0b      	ldr	r5, [pc, #44]	; (800783c <__libc_init_array+0x40>)
 800780e:	4c0c      	ldr	r4, [pc, #48]	; (8007840 <__libc_init_array+0x44>)
 8007810:	f000 f87c 	bl	800790c <_init>
 8007814:	1b64      	subs	r4, r4, r5
 8007816:	10a4      	asrs	r4, r4, #2
 8007818:	2600      	movs	r6, #0
 800781a:	42a6      	cmp	r6, r4
 800781c:	d105      	bne.n	800782a <__libc_init_array+0x2e>
 800781e:	bd70      	pop	{r4, r5, r6, pc}
 8007820:	f855 3b04 	ldr.w	r3, [r5], #4
 8007824:	4798      	blx	r3
 8007826:	3601      	adds	r6, #1
 8007828:	e7ee      	b.n	8007808 <__libc_init_array+0xc>
 800782a:	f855 3b04 	ldr.w	r3, [r5], #4
 800782e:	4798      	blx	r3
 8007830:	3601      	adds	r6, #1
 8007832:	e7f2      	b.n	800781a <__libc_init_array+0x1e>
 8007834:	08007d3c 	.word	0x08007d3c
 8007838:	08007d3c 	.word	0x08007d3c
 800783c:	08007d3c 	.word	0x08007d3c
 8007840:	08007d48 	.word	0x08007d48

08007844 <__retarget_lock_acquire_recursive>:
 8007844:	4770      	bx	lr

08007846 <__retarget_lock_release_recursive>:
 8007846:	4770      	bx	lr

08007848 <memcpy>:
 8007848:	440a      	add	r2, r1
 800784a:	4291      	cmp	r1, r2
 800784c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007850:	d100      	bne.n	8007854 <memcpy+0xc>
 8007852:	4770      	bx	lr
 8007854:	b510      	push	{r4, lr}
 8007856:	f811 4b01 	ldrb.w	r4, [r1], #1
 800785a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800785e:	4291      	cmp	r1, r2
 8007860:	d1f9      	bne.n	8007856 <memcpy+0xe>
 8007862:	bd10      	pop	{r4, pc}

08007864 <_free_r>:
 8007864:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007866:	2900      	cmp	r1, #0
 8007868:	d044      	beq.n	80078f4 <_free_r+0x90>
 800786a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800786e:	9001      	str	r0, [sp, #4]
 8007870:	2b00      	cmp	r3, #0
 8007872:	f1a1 0404 	sub.w	r4, r1, #4
 8007876:	bfb8      	it	lt
 8007878:	18e4      	addlt	r4, r4, r3
 800787a:	f7ff ff5d 	bl	8007738 <__malloc_lock>
 800787e:	4a1e      	ldr	r2, [pc, #120]	; (80078f8 <_free_r+0x94>)
 8007880:	9801      	ldr	r0, [sp, #4]
 8007882:	6813      	ldr	r3, [r2, #0]
 8007884:	b933      	cbnz	r3, 8007894 <_free_r+0x30>
 8007886:	6063      	str	r3, [r4, #4]
 8007888:	6014      	str	r4, [r2, #0]
 800788a:	b003      	add	sp, #12
 800788c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007890:	f7ff bf58 	b.w	8007744 <__malloc_unlock>
 8007894:	42a3      	cmp	r3, r4
 8007896:	d908      	bls.n	80078aa <_free_r+0x46>
 8007898:	6825      	ldr	r5, [r4, #0]
 800789a:	1961      	adds	r1, r4, r5
 800789c:	428b      	cmp	r3, r1
 800789e:	bf01      	itttt	eq
 80078a0:	6819      	ldreq	r1, [r3, #0]
 80078a2:	685b      	ldreq	r3, [r3, #4]
 80078a4:	1949      	addeq	r1, r1, r5
 80078a6:	6021      	streq	r1, [r4, #0]
 80078a8:	e7ed      	b.n	8007886 <_free_r+0x22>
 80078aa:	461a      	mov	r2, r3
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	b10b      	cbz	r3, 80078b4 <_free_r+0x50>
 80078b0:	42a3      	cmp	r3, r4
 80078b2:	d9fa      	bls.n	80078aa <_free_r+0x46>
 80078b4:	6811      	ldr	r1, [r2, #0]
 80078b6:	1855      	adds	r5, r2, r1
 80078b8:	42a5      	cmp	r5, r4
 80078ba:	d10b      	bne.n	80078d4 <_free_r+0x70>
 80078bc:	6824      	ldr	r4, [r4, #0]
 80078be:	4421      	add	r1, r4
 80078c0:	1854      	adds	r4, r2, r1
 80078c2:	42a3      	cmp	r3, r4
 80078c4:	6011      	str	r1, [r2, #0]
 80078c6:	d1e0      	bne.n	800788a <_free_r+0x26>
 80078c8:	681c      	ldr	r4, [r3, #0]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	6053      	str	r3, [r2, #4]
 80078ce:	440c      	add	r4, r1
 80078d0:	6014      	str	r4, [r2, #0]
 80078d2:	e7da      	b.n	800788a <_free_r+0x26>
 80078d4:	d902      	bls.n	80078dc <_free_r+0x78>
 80078d6:	230c      	movs	r3, #12
 80078d8:	6003      	str	r3, [r0, #0]
 80078da:	e7d6      	b.n	800788a <_free_r+0x26>
 80078dc:	6825      	ldr	r5, [r4, #0]
 80078de:	1961      	adds	r1, r4, r5
 80078e0:	428b      	cmp	r3, r1
 80078e2:	bf04      	itt	eq
 80078e4:	6819      	ldreq	r1, [r3, #0]
 80078e6:	685b      	ldreq	r3, [r3, #4]
 80078e8:	6063      	str	r3, [r4, #4]
 80078ea:	bf04      	itt	eq
 80078ec:	1949      	addeq	r1, r1, r5
 80078ee:	6021      	streq	r1, [r4, #0]
 80078f0:	6054      	str	r4, [r2, #4]
 80078f2:	e7ca      	b.n	800788a <_free_r+0x26>
 80078f4:	b003      	add	sp, #12
 80078f6:	bd30      	pop	{r4, r5, pc}
 80078f8:	20000cd4 	.word	0x20000cd4

080078fc <_malloc_usable_size_r>:
 80078fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007900:	1f18      	subs	r0, r3, #4
 8007902:	2b00      	cmp	r3, #0
 8007904:	bfbc      	itt	lt
 8007906:	580b      	ldrlt	r3, [r1, r0]
 8007908:	18c0      	addlt	r0, r0, r3
 800790a:	4770      	bx	lr

0800790c <_init>:
 800790c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800790e:	bf00      	nop
 8007910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007912:	bc08      	pop	{r3}
 8007914:	469e      	mov	lr, r3
 8007916:	4770      	bx	lr

08007918 <_fini>:
 8007918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800791a:	bf00      	nop
 800791c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800791e:	bc08      	pop	{r3}
 8007920:	469e      	mov	lr, r3
 8007922:	4770      	bx	lr
