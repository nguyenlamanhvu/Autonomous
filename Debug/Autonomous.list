
Autonomous.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005188  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005310  08005310  00015310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005398  08005398  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005398  08005398  00015398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053a0  080053a0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053a0  080053a0  000153a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053a4  080053a4  000153a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080053a8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          0000029c  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000314  20000314  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   000075cd  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001514  00000000  00000000  000276b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000720  00000000  00000000  00028bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000576  00000000  00000000  000292f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002022e  00000000  00000000  00029866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000982f  00000000  00000000  00049a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c301f  00000000  00000000  000532c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002358  00000000  00000000  001162e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  0011863c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080052f8 	.word	0x080052f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	080052f8 	.word	0x080052f8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b970 	b.w	8000e38 <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9e08      	ldr	r6, [sp, #32]
 8000b76:	460d      	mov	r5, r1
 8000b78:	4604      	mov	r4, r0
 8000b7a:	460f      	mov	r7, r1
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d14a      	bne.n	8000c16 <__udivmoddi4+0xa6>
 8000b80:	428a      	cmp	r2, r1
 8000b82:	4694      	mov	ip, r2
 8000b84:	d965      	bls.n	8000c52 <__udivmoddi4+0xe2>
 8000b86:	fab2 f382 	clz	r3, r2
 8000b8a:	b143      	cbz	r3, 8000b9e <__udivmoddi4+0x2e>
 8000b8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b90:	f1c3 0220 	rsb	r2, r3, #32
 8000b94:	409f      	lsls	r7, r3
 8000b96:	fa20 f202 	lsr.w	r2, r0, r2
 8000b9a:	4317      	orrs	r7, r2
 8000b9c:	409c      	lsls	r4, r3
 8000b9e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ba2:	fa1f f58c 	uxth.w	r5, ip
 8000ba6:	fbb7 f1fe 	udiv	r1, r7, lr
 8000baa:	0c22      	lsrs	r2, r4, #16
 8000bac:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bb0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bb4:	fb01 f005 	mul.w	r0, r1, r5
 8000bb8:	4290      	cmp	r0, r2
 8000bba:	d90a      	bls.n	8000bd2 <__udivmoddi4+0x62>
 8000bbc:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bc4:	f080 811c 	bcs.w	8000e00 <__udivmoddi4+0x290>
 8000bc8:	4290      	cmp	r0, r2
 8000bca:	f240 8119 	bls.w	8000e00 <__udivmoddi4+0x290>
 8000bce:	3902      	subs	r1, #2
 8000bd0:	4462      	add	r2, ip
 8000bd2:	1a12      	subs	r2, r2, r0
 8000bd4:	b2a4      	uxth	r4, r4
 8000bd6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bda:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bde:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000be2:	fb00 f505 	mul.w	r5, r0, r5
 8000be6:	42a5      	cmp	r5, r4
 8000be8:	d90a      	bls.n	8000c00 <__udivmoddi4+0x90>
 8000bea:	eb1c 0404 	adds.w	r4, ip, r4
 8000bee:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bf2:	f080 8107 	bcs.w	8000e04 <__udivmoddi4+0x294>
 8000bf6:	42a5      	cmp	r5, r4
 8000bf8:	f240 8104 	bls.w	8000e04 <__udivmoddi4+0x294>
 8000bfc:	4464      	add	r4, ip
 8000bfe:	3802      	subs	r0, #2
 8000c00:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c04:	1b64      	subs	r4, r4, r5
 8000c06:	2100      	movs	r1, #0
 8000c08:	b11e      	cbz	r6, 8000c12 <__udivmoddi4+0xa2>
 8000c0a:	40dc      	lsrs	r4, r3
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	e9c6 4300 	strd	r4, r3, [r6]
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d908      	bls.n	8000c2c <__udivmoddi4+0xbc>
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	f000 80ed 	beq.w	8000dfa <__udivmoddi4+0x28a>
 8000c20:	2100      	movs	r1, #0
 8000c22:	e9c6 0500 	strd	r0, r5, [r6]
 8000c26:	4608      	mov	r0, r1
 8000c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2c:	fab3 f183 	clz	r1, r3
 8000c30:	2900      	cmp	r1, #0
 8000c32:	d149      	bne.n	8000cc8 <__udivmoddi4+0x158>
 8000c34:	42ab      	cmp	r3, r5
 8000c36:	d302      	bcc.n	8000c3e <__udivmoddi4+0xce>
 8000c38:	4282      	cmp	r2, r0
 8000c3a:	f200 80f8 	bhi.w	8000e2e <__udivmoddi4+0x2be>
 8000c3e:	1a84      	subs	r4, r0, r2
 8000c40:	eb65 0203 	sbc.w	r2, r5, r3
 8000c44:	2001      	movs	r0, #1
 8000c46:	4617      	mov	r7, r2
 8000c48:	2e00      	cmp	r6, #0
 8000c4a:	d0e2      	beq.n	8000c12 <__udivmoddi4+0xa2>
 8000c4c:	e9c6 4700 	strd	r4, r7, [r6]
 8000c50:	e7df      	b.n	8000c12 <__udivmoddi4+0xa2>
 8000c52:	b902      	cbnz	r2, 8000c56 <__udivmoddi4+0xe6>
 8000c54:	deff      	udf	#255	; 0xff
 8000c56:	fab2 f382 	clz	r3, r2
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f040 8090 	bne.w	8000d80 <__udivmoddi4+0x210>
 8000c60:	1a8a      	subs	r2, r1, r2
 8000c62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c66:	fa1f fe8c 	uxth.w	lr, ip
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c70:	fb07 2015 	mls	r0, r7, r5, r2
 8000c74:	0c22      	lsrs	r2, r4, #16
 8000c76:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c7a:	fb0e f005 	mul.w	r0, lr, r5
 8000c7e:	4290      	cmp	r0, r2
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x124>
 8000c82:	eb1c 0202 	adds.w	r2, ip, r2
 8000c86:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x122>
 8000c8c:	4290      	cmp	r0, r2
 8000c8e:	f200 80cb 	bhi.w	8000e28 <__udivmoddi4+0x2b8>
 8000c92:	4645      	mov	r5, r8
 8000c94:	1a12      	subs	r2, r2, r0
 8000c96:	b2a4      	uxth	r4, r4
 8000c98:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c9c:	fb07 2210 	mls	r2, r7, r0, r2
 8000ca0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ca4:	fb0e fe00 	mul.w	lr, lr, r0
 8000ca8:	45a6      	cmp	lr, r4
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x14e>
 8000cac:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cb4:	d202      	bcs.n	8000cbc <__udivmoddi4+0x14c>
 8000cb6:	45a6      	cmp	lr, r4
 8000cb8:	f200 80bb 	bhi.w	8000e32 <__udivmoddi4+0x2c2>
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	eba4 040e 	sub.w	r4, r4, lr
 8000cc2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cc6:	e79f      	b.n	8000c08 <__udivmoddi4+0x98>
 8000cc8:	f1c1 0720 	rsb	r7, r1, #32
 8000ccc:	408b      	lsls	r3, r1
 8000cce:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cd2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cd6:	fa05 f401 	lsl.w	r4, r5, r1
 8000cda:	fa20 f307 	lsr.w	r3, r0, r7
 8000cde:	40fd      	lsrs	r5, r7
 8000ce0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ce4:	4323      	orrs	r3, r4
 8000ce6:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cea:	fa1f fe8c 	uxth.w	lr, ip
 8000cee:	fb09 5518 	mls	r5, r9, r8, r5
 8000cf2:	0c1c      	lsrs	r4, r3, #16
 8000cf4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cf8:	fb08 f50e 	mul.w	r5, r8, lr
 8000cfc:	42a5      	cmp	r5, r4
 8000cfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000d02:	fa00 f001 	lsl.w	r0, r0, r1
 8000d06:	d90b      	bls.n	8000d20 <__udivmoddi4+0x1b0>
 8000d08:	eb1c 0404 	adds.w	r4, ip, r4
 8000d0c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d10:	f080 8088 	bcs.w	8000e24 <__udivmoddi4+0x2b4>
 8000d14:	42a5      	cmp	r5, r4
 8000d16:	f240 8085 	bls.w	8000e24 <__udivmoddi4+0x2b4>
 8000d1a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d1e:	4464      	add	r4, ip
 8000d20:	1b64      	subs	r4, r4, r5
 8000d22:	b29d      	uxth	r5, r3
 8000d24:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d28:	fb09 4413 	mls	r4, r9, r3, r4
 8000d2c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d30:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d34:	45a6      	cmp	lr, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x1da>
 8000d38:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d40:	d26c      	bcs.n	8000e1c <__udivmoddi4+0x2ac>
 8000d42:	45a6      	cmp	lr, r4
 8000d44:	d96a      	bls.n	8000e1c <__udivmoddi4+0x2ac>
 8000d46:	3b02      	subs	r3, #2
 8000d48:	4464      	add	r4, ip
 8000d4a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d4e:	fba3 9502 	umull	r9, r5, r3, r2
 8000d52:	eba4 040e 	sub.w	r4, r4, lr
 8000d56:	42ac      	cmp	r4, r5
 8000d58:	46c8      	mov	r8, r9
 8000d5a:	46ae      	mov	lr, r5
 8000d5c:	d356      	bcc.n	8000e0c <__udivmoddi4+0x29c>
 8000d5e:	d053      	beq.n	8000e08 <__udivmoddi4+0x298>
 8000d60:	b156      	cbz	r6, 8000d78 <__udivmoddi4+0x208>
 8000d62:	ebb0 0208 	subs.w	r2, r0, r8
 8000d66:	eb64 040e 	sbc.w	r4, r4, lr
 8000d6a:	fa04 f707 	lsl.w	r7, r4, r7
 8000d6e:	40ca      	lsrs	r2, r1
 8000d70:	40cc      	lsrs	r4, r1
 8000d72:	4317      	orrs	r7, r2
 8000d74:	e9c6 7400 	strd	r7, r4, [r6]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d80:	f1c3 0120 	rsb	r1, r3, #32
 8000d84:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d88:	fa20 f201 	lsr.w	r2, r0, r1
 8000d8c:	fa25 f101 	lsr.w	r1, r5, r1
 8000d90:	409d      	lsls	r5, r3
 8000d92:	432a      	orrs	r2, r5
 8000d94:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d98:	fa1f fe8c 	uxth.w	lr, ip
 8000d9c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da0:	fb07 1510 	mls	r5, r7, r0, r1
 8000da4:	0c11      	lsrs	r1, r2, #16
 8000da6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000daa:	fb00 f50e 	mul.w	r5, r0, lr
 8000dae:	428d      	cmp	r5, r1
 8000db0:	fa04 f403 	lsl.w	r4, r4, r3
 8000db4:	d908      	bls.n	8000dc8 <__udivmoddi4+0x258>
 8000db6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dba:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dbe:	d22f      	bcs.n	8000e20 <__udivmoddi4+0x2b0>
 8000dc0:	428d      	cmp	r5, r1
 8000dc2:	d92d      	bls.n	8000e20 <__udivmoddi4+0x2b0>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	4461      	add	r1, ip
 8000dc8:	1b49      	subs	r1, r1, r5
 8000dca:	b292      	uxth	r2, r2
 8000dcc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dd0:	fb07 1115 	mls	r1, r7, r5, r1
 8000dd4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dd8:	fb05 f10e 	mul.w	r1, r5, lr
 8000ddc:	4291      	cmp	r1, r2
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x282>
 8000de0:	eb1c 0202 	adds.w	r2, ip, r2
 8000de4:	f105 38ff 	add.w	r8, r5, #4294967295
 8000de8:	d216      	bcs.n	8000e18 <__udivmoddi4+0x2a8>
 8000dea:	4291      	cmp	r1, r2
 8000dec:	d914      	bls.n	8000e18 <__udivmoddi4+0x2a8>
 8000dee:	3d02      	subs	r5, #2
 8000df0:	4462      	add	r2, ip
 8000df2:	1a52      	subs	r2, r2, r1
 8000df4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000df8:	e738      	b.n	8000c6c <__udivmoddi4+0xfc>
 8000dfa:	4631      	mov	r1, r6
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	e708      	b.n	8000c12 <__udivmoddi4+0xa2>
 8000e00:	4639      	mov	r1, r7
 8000e02:	e6e6      	b.n	8000bd2 <__udivmoddi4+0x62>
 8000e04:	4610      	mov	r0, r2
 8000e06:	e6fb      	b.n	8000c00 <__udivmoddi4+0x90>
 8000e08:	4548      	cmp	r0, r9
 8000e0a:	d2a9      	bcs.n	8000d60 <__udivmoddi4+0x1f0>
 8000e0c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e10:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e14:	3b01      	subs	r3, #1
 8000e16:	e7a3      	b.n	8000d60 <__udivmoddi4+0x1f0>
 8000e18:	4645      	mov	r5, r8
 8000e1a:	e7ea      	b.n	8000df2 <__udivmoddi4+0x282>
 8000e1c:	462b      	mov	r3, r5
 8000e1e:	e794      	b.n	8000d4a <__udivmoddi4+0x1da>
 8000e20:	4640      	mov	r0, r8
 8000e22:	e7d1      	b.n	8000dc8 <__udivmoddi4+0x258>
 8000e24:	46d0      	mov	r8, sl
 8000e26:	e77b      	b.n	8000d20 <__udivmoddi4+0x1b0>
 8000e28:	3d02      	subs	r5, #2
 8000e2a:	4462      	add	r2, ip
 8000e2c:	e732      	b.n	8000c94 <__udivmoddi4+0x124>
 8000e2e:	4608      	mov	r0, r1
 8000e30:	e70a      	b.n	8000c48 <__udivmoddi4+0xd8>
 8000e32:	4464      	add	r4, ip
 8000e34:	3802      	subs	r0, #2
 8000e36:	e742      	b.n	8000cbe <__udivmoddi4+0x14e>

08000e38 <__aeabi_idiv0>:
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <MPU9250_Writebyte>:

uint8_t Mscale = MFS_16BITS; // Choose either 14-bit or 16-bit magnetometer resolution
uint8_t Mmode = 0x02;

void MPU9250_Writebyte(uint8_t device_addr,uint8_t reg_addr, uint8_t val)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af04      	add	r7, sp, #16
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
 8000e46:	460b      	mov	r3, r1
 8000e48:	71bb      	strb	r3, [r7, #6]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, device_addr, reg_addr, I2C_MEMADD_SIZE_8BIT, &val, 1, 1);
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	b299      	uxth	r1, r3
 8000e52:	79bb      	ldrb	r3, [r7, #6]
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	2301      	movs	r3, #1
 8000e58:	9302      	str	r3, [sp, #8]
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	9301      	str	r3, [sp, #4]
 8000e5e:	1d7b      	adds	r3, r7, #5
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	2301      	movs	r3, #1
 8000e64:	4803      	ldr	r0, [pc, #12]	; (8000e74 <MPU9250_Writebyte+0x38>)
 8000e66:	f001 fe0f 	bl	8002a88 <HAL_I2C_Mem_Write>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	200000f0 	.word	0x200000f0

08000e78 <MPU9250_Readbyte>:
{
	HAL_I2C_Mem_Write(&hi2c1, device_addr, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 1);
}

void MPU9250_Readbyte(uint8_t device_addr,uint8_t reg_addr, uint8_t* data)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af04      	add	r7, sp, #16
 8000e7e:	4603      	mov	r3, r0
 8000e80:	603a      	str	r2, [r7, #0]
 8000e82:	71fb      	strb	r3, [r7, #7]
 8000e84:	460b      	mov	r3, r1
 8000e86:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c1, device_addr, reg_addr, I2C_MEMADD_SIZE_8BIT, data, 1, 1);
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	b299      	uxth	r1, r3
 8000e8c:	79bb      	ldrb	r3, [r7, #6]
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	2301      	movs	r3, #1
 8000e92:	9302      	str	r3, [sp, #8]
 8000e94:	2301      	movs	r3, #1
 8000e96:	9301      	str	r3, [sp, #4]
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	9300      	str	r3, [sp, #0]
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	4803      	ldr	r0, [pc, #12]	; (8000eac <MPU9250_Readbyte+0x34>)
 8000ea0:	f001 feec 	bl	8002c7c <HAL_I2C_Mem_Read>
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	200000f0 	.word	0x200000f0

08000eb0 <MPU9250_Readbytes>:

void MPU9250_Readbytes(uint8_t device_addr,uint8_t reg_addr, uint8_t len, uint8_t* data)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af04      	add	r7, sp, #16
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	4603      	mov	r3, r0
 8000eba:	71fb      	strb	r3, [r7, #7]
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	71bb      	strb	r3, [r7, #6]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(&hi2c1, device_addr, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 1);
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	b299      	uxth	r1, r3
 8000ec8:	79bb      	ldrb	r3, [r7, #6]
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	797b      	ldrb	r3, [r7, #5]
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	9002      	str	r0, [sp, #8]
 8000ed4:	9301      	str	r3, [sp, #4]
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	2301      	movs	r3, #1
 8000edc:	4803      	ldr	r0, [pc, #12]	; (8000eec <MPU9250_Readbytes+0x3c>)
 8000ede:	f001 fecd 	bl	8002c7c <HAL_I2C_Mem_Read>
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200000f0 	.word	0x200000f0

08000ef0 <MPU9250_Initialization>:

void MPU9250_Initialization(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
	x2_old = 0;
 8000ef6:	4b8a      	ldr	r3, [pc, #552]	; (8001120 <MPU9250_Initialization+0x230>)
 8000ef8:	f04f 0200 	mov.w	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
	y2_old = 0;
 8000efe:	4b89      	ldr	r3, [pc, #548]	; (8001124 <MPU9250_Initialization+0x234>)
 8000f00:	f04f 0200 	mov.w	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
	z2_old = 0;
 8000f06:	4b88      	ldr	r3, [pc, #544]	; (8001128 <MPU9250_Initialization+0x238>)
 8000f08:	f04f 0200 	mov.w	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]

	HAL_Delay(50);
 8000f0e:	2032      	movs	r0, #50	; 0x32
 8000f10:	f001 f9d0 	bl	80022b4 <HAL_Delay>
	uint8_t who_am_i = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	717b      	strb	r3, [r7, #5]
	uint8_t who_am_i_AK8963 = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	713b      	strb	r3, [r7, #4]

	MPU9250_Readbyte(MPU9250_ADDR, MPU9250_WHO_AM_I, &who_am_i);
 8000f1c:	1d7b      	adds	r3, r7, #5
 8000f1e:	461a      	mov	r2, r3
 8000f20:	2175      	movs	r1, #117	; 0x75
 8000f22:	20d0      	movs	r0, #208	; 0xd0
 8000f24:	f7ff ffa8 	bl	8000e78 <MPU9250_Readbyte>
	if(who_am_i == 0x71)		//default value is 0x71
 8000f28:	797b      	ldrb	r3, [r7, #5]
 8000f2a:	2b71      	cmp	r3, #113	; 0x71
 8000f2c:	d14b      	bne.n	8000fc6 <MPU9250_Initialization+0xd6>
	{
		status = 1;			// who_am_i correct
 8000f2e:	4b7f      	ldr	r3, [pc, #508]	; (800112c <MPU9250_Initialization+0x23c>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	801a      	strh	r2, [r3, #0]
		}
	}

	//Reset the whole module before initialization
	//Reset the internal registers and restores the default settings.  Write a 1 to set the reset, the bit will auto clear.
	MPU9250_Writebyte(MPU9250_ADDR, MPU9250_PWR_MGMT_1, 0x1<<7);
 8000f34:	2280      	movs	r2, #128	; 0x80
 8000f36:	216b      	movs	r1, #107	; 0x6b
 8000f38:	20d0      	movs	r0, #208	; 0xd0
 8000f3a:	f7ff ff7f 	bl	8000e3c <MPU9250_Writebyte>
	HAL_Delay(100);
 8000f3e:	2064      	movs	r0, #100	; 0x64
 8000f40:	f001 f9b8 	bl	80022b4 <HAL_Delay>

	//Power Management setting
	/* Default is sleep mode
	 * necessary to wake up MPU6050*/
	MPU9250_Writebyte(MPU9250_ADDR, MPU9250_PWR_MGMT_1, 0x00);
 8000f44:	2200      	movs	r2, #0
 8000f46:	216b      	movs	r1, #107	; 0x6b
 8000f48:	20d0      	movs	r0, #208	; 0xd0
 8000f4a:	f7ff ff77 	bl	8000e3c <MPU9250_Writebyte>
	HAL_Delay(50);
 8000f4e:	2032      	movs	r0, #50	; 0x32
 8000f50:	f001 f9b0 	bl	80022b4 <HAL_Delay>

	//Sample rate divider
	/*Sample Rate = GYRO output rate / (1 + SMPRT_DIV) */
	//	MPU9250_Writebyte(MPU9250_SMPLRT_DIV, 0x00); // ACC output rate is 1kHz, GYRO output rate is 8kHz (Normal mode)
	MPU9250_Writebyte(MPU9250_ADDR, MPU9250_SMPLRT_DIV, 39); // Sample Rate = 200Hz		//**********************
 8000f54:	2227      	movs	r2, #39	; 0x27
 8000f56:	2119      	movs	r1, #25
 8000f58:	20d0      	movs	r0, #208	; 0xd0
 8000f5a:	f7ff ff6f 	bl	8000e3c <MPU9250_Writebyte>
	HAL_Delay(50);
 8000f5e:	2032      	movs	r0, #50	; 0x32
 8000f60:	f001 f9a8 	bl	80022b4 <HAL_Delay>

	//FSYNC and DLPF setting
	//fchoice[1:0]=2'b11 ; fchoice_b[1:0]=2'b00
	/*DLPF is set to 0*/
	MPU9250_Writebyte(MPU9250_ADDR, MPU9250_CONFIG, 0x00);								//**********************
 8000f64:	2200      	movs	r2, #0
 8000f66:	211a      	movs	r1, #26
 8000f68:	20d0      	movs	r0, #208	; 0xd0
 8000f6a:	f7ff ff67 	bl	8000e3c <MPU9250_Writebyte>
	HAL_Delay(50);
 8000f6e:	2032      	movs	r0, #50	; 0x32
 8000f70:	f001 f9a0 	bl	80022b4 <HAL_Delay>
	/*FS_SEL  Full Scale Range
	  0    	+-250 degree/s
	  1		+-500 degree/s
	  2		+-1000 degree/s
	  3		+-2000 degree/s	*/
	uint8_t FS_SCALE_GYRO = 0x03;
 8000f74:	2303      	movs	r3, #3
 8000f76:	71fb      	strb	r3, [r7, #7]
	MPU9250_Writebyte(MPU9250_ADDR, MPU9250_GYRO_CONFIG, FS_SCALE_GYRO<<3);
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	461a      	mov	r2, r3
 8000f80:	211b      	movs	r1, #27
 8000f82:	20d0      	movs	r0, #208	; 0xd0
 8000f84:	f7ff ff5a 	bl	8000e3c <MPU9250_Writebyte>
	HAL_Delay(50);
 8000f88:	2032      	movs	r0, #50	; 0x32
 8000f8a:	f001 f993 	bl	80022b4 <HAL_Delay>
	/*FS_SEL  Full Scale Range
	  0    	+-2g
	  1		+-4g
	  2		+-8g
	  3		+-16g	*/
	uint8_t FS_SCALE_ACC = 0x0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	71bb      	strb	r3, [r7, #6]
	MPU9250_Writebyte(MPU9250_ADDR, MPU9250_ACCEL_CONFIG, FS_SCALE_ACC<<3);
 8000f92:	79bb      	ldrb	r3, [r7, #6]
 8000f94:	00db      	lsls	r3, r3, #3
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	461a      	mov	r2, r3
 8000f9a:	211c      	movs	r1, #28
 8000f9c:	20d0      	movs	r0, #208	; 0xd0
 8000f9e:	f7ff ff4d 	bl	8000e3c <MPU9250_Writebyte>
	HAL_Delay(50);
 8000fa2:	2032      	movs	r0, #50	; 0x32
 8000fa4:	f001 f986 	bl	80022b4 <HAL_Delay>

	//enable Mag bypass
	MPU9250_Writebyte(MPU9250_ADDR, MPU9250_INT_PIN_CFG, 0x02);
 8000fa8:	2202      	movs	r2, #2
 8000faa:	2137      	movs	r1, #55	; 0x37
 8000fac:	20d0      	movs	r0, #208	; 0xd0
 8000fae:	f7ff ff45 	bl	8000e3c <MPU9250_Writebyte>
	/* Magnetometer Device Connection Check */
	MPU9250_Readbyte(AK8963_ADDRESS, AK8963_WHO_AM_I, &who_am_i_AK8963);
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	2018      	movs	r0, #24
 8000fba:	f7ff ff5d 	bl	8000e78 <MPU9250_Readbyte>
	if(who_am_i_AK8963 == 0x48)		//default value is 0x48
 8000fbe:	793b      	ldrb	r3, [r7, #4]
 8000fc0:	2b48      	cmp	r3, #72	; 0x48
 8000fc2:	d10b      	bne.n	8000fdc <MPU9250_Initialization+0xec>
 8000fc4:	e006      	b.n	8000fd4 <MPU9250_Initialization+0xe4>
		status = 0;			// who_am_i incorrect
 8000fc6:	4b59      	ldr	r3, [pc, #356]	; (800112c <MPU9250_Initialization+0x23c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	801a      	strh	r2, [r3, #0]
			HAL_Delay(100);
 8000fcc:	2064      	movs	r0, #100	; 0x64
 8000fce:	f001 f971 	bl	80022b4 <HAL_Delay>
 8000fd2:	e7fb      	b.n	8000fcc <MPU9250_Initialization+0xdc>
	{
		status_mag = 1;			// who_am_i_AK8963 correct
 8000fd4:	4b56      	ldr	r3, [pc, #344]	; (8001130 <MPU9250_Initialization+0x240>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	701a      	strb	r2, [r3, #0]
 8000fda:	e006      	b.n	8000fea <MPU9250_Initialization+0xfa>
	}
	else
	{
		status_mag = 0;			// who_am_i_AK8963 incorrect
 8000fdc:	4b54      	ldr	r3, [pc, #336]	; (8001130 <MPU9250_Initialization+0x240>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	701a      	strb	r2, [r3, #0]
		while(1)
		{
			HAL_Delay(100);
 8000fe2:	2064      	movs	r0, #100	; 0x64
 8000fe4:	f001 f966 	bl	80022b4 <HAL_Delay>
 8000fe8:	e7fb      	b.n	8000fe2 <MPU9250_Initialization+0xf2>
		}
	}
	/* Magnetometer Power Down */
	MPU9250_Writebyte(AK8963_ADDRESS, AK8963_CNTL, 0x00);
 8000fea:	2200      	movs	r2, #0
 8000fec:	210a      	movs	r1, #10
 8000fee:	2018      	movs	r0, #24
 8000ff0:	f7ff ff24 	bl	8000e3c <MPU9250_Writebyte>
	HAL_Delay(50);
 8000ff4:	2032      	movs	r0, #50	; 0x32
 8000ff6:	f001 f95d 	bl	80022b4 <HAL_Delay>
	//Enter Fuse ROM access mode
	MPU9250_Writebyte(AK8963_ADDRESS, AK8963_CNTL, 0x0F);
 8000ffa:	220f      	movs	r2, #15
 8000ffc:	210a      	movs	r1, #10
 8000ffe:	2018      	movs	r0, #24
 8001000:	f7ff ff1c 	bl	8000e3c <MPU9250_Writebyte>
	HAL_Delay(50);
 8001004:	2032      	movs	r0, #50	; 0x32
 8001006:	f001 f955 	bl	80022b4 <HAL_Delay>
	uint8_t raw_data[3];
	// Read the x-, y-, and z-axis calibration values
	MPU9250_Readbytes(AK8963_ADDRESS, AK8963_ASAX, 3, &raw_data[0]);
 800100a:	463b      	mov	r3, r7
 800100c:	2203      	movs	r2, #3
 800100e:	2110      	movs	r1, #16
 8001010:	2018      	movs	r0, #24
 8001012:	f7ff ff4d 	bl	8000eb0 <MPU9250_Readbytes>
	mag_bias_factory[0] = (float)(raw_data[0] - 128) / 256. + 1.;  // Return x-axis sensitivity adjustment values, etc.
 8001016:	783b      	ldrb	r3, [r7, #0]
 8001018:	3b80      	subs	r3, #128	; 0x80
 800101a:	ee07 3a90 	vmov	s15, r3
 800101e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001022:	ee17 0a90 	vmov	r0, s15
 8001026:	f7ff fa33 	bl	8000490 <__aeabi_f2d>
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	4b41      	ldr	r3, [pc, #260]	; (8001134 <MPU9250_Initialization+0x244>)
 8001030:	f7ff fbb0 	bl	8000794 <__aeabi_ddiv>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4610      	mov	r0, r2
 800103a:	4619      	mov	r1, r3
 800103c:	f04f 0200 	mov.w	r2, #0
 8001040:	4b3d      	ldr	r3, [pc, #244]	; (8001138 <MPU9250_Initialization+0x248>)
 8001042:	f7ff f8c7 	bl	80001d4 <__adddf3>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	4610      	mov	r0, r2
 800104c:	4619      	mov	r1, r3
 800104e:	f7ff fd27 	bl	8000aa0 <__aeabi_d2f>
 8001052:	4603      	mov	r3, r0
 8001054:	4a39      	ldr	r2, [pc, #228]	; (800113c <MPU9250_Initialization+0x24c>)
 8001056:	6013      	str	r3, [r2, #0]
	mag_bias_factory[1] = (float)(raw_data[1] - 128) / 256. + 1.;
 8001058:	787b      	ldrb	r3, [r7, #1]
 800105a:	3b80      	subs	r3, #128	; 0x80
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001064:	ee17 0a90 	vmov	r0, s15
 8001068:	f7ff fa12 	bl	8000490 <__aeabi_f2d>
 800106c:	f04f 0200 	mov.w	r2, #0
 8001070:	4b30      	ldr	r3, [pc, #192]	; (8001134 <MPU9250_Initialization+0x244>)
 8001072:	f7ff fb8f 	bl	8000794 <__aeabi_ddiv>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	4610      	mov	r0, r2
 800107c:	4619      	mov	r1, r3
 800107e:	f04f 0200 	mov.w	r2, #0
 8001082:	4b2d      	ldr	r3, [pc, #180]	; (8001138 <MPU9250_Initialization+0x248>)
 8001084:	f7ff f8a6 	bl	80001d4 <__adddf3>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4610      	mov	r0, r2
 800108e:	4619      	mov	r1, r3
 8001090:	f7ff fd06 	bl	8000aa0 <__aeabi_d2f>
 8001094:	4603      	mov	r3, r0
 8001096:	4a29      	ldr	r2, [pc, #164]	; (800113c <MPU9250_Initialization+0x24c>)
 8001098:	6053      	str	r3, [r2, #4]
	mag_bias_factory[2] = (float)(raw_data[2] - 128) / 256. + 1.;
 800109a:	78bb      	ldrb	r3, [r7, #2]
 800109c:	3b80      	subs	r3, #128	; 0x80
 800109e:	ee07 3a90 	vmov	s15, r3
 80010a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010a6:	ee17 0a90 	vmov	r0, s15
 80010aa:	f7ff f9f1 	bl	8000490 <__aeabi_f2d>
 80010ae:	f04f 0200 	mov.w	r2, #0
 80010b2:	4b20      	ldr	r3, [pc, #128]	; (8001134 <MPU9250_Initialization+0x244>)
 80010b4:	f7ff fb6e 	bl	8000794 <__aeabi_ddiv>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4610      	mov	r0, r2
 80010be:	4619      	mov	r1, r3
 80010c0:	f04f 0200 	mov.w	r2, #0
 80010c4:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <MPU9250_Initialization+0x248>)
 80010c6:	f7ff f885 	bl	80001d4 <__adddf3>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	4610      	mov	r0, r2
 80010d0:	4619      	mov	r1, r3
 80010d2:	f7ff fce5 	bl	8000aa0 <__aeabi_d2f>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4a18      	ldr	r2, [pc, #96]	; (800113c <MPU9250_Initialization+0x24c>)
 80010da:	6093      	str	r3, [r2, #8]
	HAL_Delay(50);
 80010dc:	2032      	movs	r0, #50	; 0x32
 80010de:	f001 f8e9 	bl	80022b4 <HAL_Delay>
	//Power down magnetometer
	MPU9250_Writebyte(AK8963_ADDRESS, AK8963_CNTL, 0x00);
 80010e2:	2200      	movs	r2, #0
 80010e4:	210a      	movs	r1, #10
 80010e6:	2018      	movs	r0, #24
 80010e8:	f7ff fea8 	bl	8000e3c <MPU9250_Writebyte>
	HAL_Delay(50);
 80010ec:	2032      	movs	r0, #50	; 0x32
 80010ee:	f001 f8e1 	bl	80022b4 <HAL_Delay>
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition MAG_MODE (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	// Set magnetometer data resolution and sample ODR
	MPU9250_Writebyte(AK8963_ADDRESS, AK8963_CNTL, Mscale << 4 | 0x02);
 80010f2:	4b13      	ldr	r3, [pc, #76]	; (8001140 <MPU9250_Initialization+0x250>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	011b      	lsls	r3, r3, #4
 80010f8:	b25b      	sxtb	r3, r3
 80010fa:	f043 0302 	orr.w	r3, r3, #2
 80010fe:	b25b      	sxtb	r3, r3
 8001100:	b2db      	uxtb	r3, r3
 8001102:	461a      	mov	r2, r3
 8001104:	210a      	movs	r1, #10
 8001106:	2018      	movs	r0, #24
 8001108:	f7ff fe98 	bl	8000e3c <MPU9250_Writebyte>

	MPU9250_Get_LSB_Sensitivity(FS_SCALE_GYRO, FS_SCALE_ACC);
 800110c:	79ba      	ldrb	r2, [r7, #6]
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	4611      	mov	r1, r2
 8001112:	4618      	mov	r0, r3
 8001114:	f000 f89c 	bl	8001250 <MPU9250_Get_LSB_Sensitivity>
//	//Interrupt enable setting
//	uint8_t DATA_RDY_EN = 0x1; // 1 - enable, 0 - disable
//	MPU9250_Writebyte(MPU9250_INT_ENABLE, DATA_RDY_EN);
//	HAL_Delay(50);

}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	200000cc 	.word	0x200000cc
 8001124:	200000d0 	.word	0x200000d0
 8001128:	200000d4 	.word	0x200000d4
 800112c:	20000144 	.word	0x20000144
 8001130:	20000146 	.word	0x20000146
 8001134:	40700000 	.word	0x40700000
 8001138:	3ff00000 	.word	0x3ff00000
 800113c:	2000009c 	.word	0x2000009c
 8001140:	20000000 	.word	0x20000000

08001144 <MPU9250_Get9AxisRawData>:

/*Get Raw Data from sensor*/
void MPU9250_Get9AxisRawData(Struct_MPU9250* pMPU9250)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	uint8_t data[14];
	MPU9250_Readbytes(MPU9250_ADDR, MPU9250_ACCEL_XOUT_H, 14, data);
 800114c:	f107 0310 	add.w	r3, r7, #16
 8001150:	220e      	movs	r2, #14
 8001152:	213b      	movs	r1, #59	; 0x3b
 8001154:	20d0      	movs	r0, #208	; 0xd0
 8001156:	f7ff feab 	bl	8000eb0 <MPU9250_Readbytes>

	pMPU9250->acc_x_raw = (data[0] << 8) | data[1];
 800115a:	7c3b      	ldrb	r3, [r7, #16]
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	b21a      	sxth	r2, r3
 8001160:	7c7b      	ldrb	r3, [r7, #17]
 8001162:	b21b      	sxth	r3, r3
 8001164:	4313      	orrs	r3, r2
 8001166:	b21a      	sxth	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	801a      	strh	r2, [r3, #0]
	pMPU9250->acc_y_raw = (data[2] << 8) | data[3];
 800116c:	7cbb      	ldrb	r3, [r7, #18]
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	b21a      	sxth	r2, r3
 8001172:	7cfb      	ldrb	r3, [r7, #19]
 8001174:	b21b      	sxth	r3, r3
 8001176:	4313      	orrs	r3, r2
 8001178:	b21a      	sxth	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	805a      	strh	r2, [r3, #2]
	pMPU9250->acc_z_raw = (data[4] << 8) | data[5];
 800117e:	7d3b      	ldrb	r3, [r7, #20]
 8001180:	021b      	lsls	r3, r3, #8
 8001182:	b21a      	sxth	r2, r3
 8001184:	7d7b      	ldrb	r3, [r7, #21]
 8001186:	b21b      	sxth	r3, r3
 8001188:	4313      	orrs	r3, r2
 800118a:	b21a      	sxth	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	809a      	strh	r2, [r3, #4]

	pMPU9250->temperature_raw = (data[6] << 8) | data[7];
 8001190:	7dbb      	ldrb	r3, [r7, #22]
 8001192:	021b      	lsls	r3, r3, #8
 8001194:	b21a      	sxth	r2, r3
 8001196:	7dfb      	ldrb	r3, [r7, #23]
 8001198:	b21b      	sxth	r3, r3
 800119a:	4313      	orrs	r3, r2
 800119c:	b21a      	sxth	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	80da      	strh	r2, [r3, #6]

	pMPU9250->gyro_x_raw = ((data[8] << 8) | data[9]);
 80011a2:	7e3b      	ldrb	r3, [r7, #24]
 80011a4:	021b      	lsls	r3, r3, #8
 80011a6:	b21a      	sxth	r2, r3
 80011a8:	7e7b      	ldrb	r3, [r7, #25]
 80011aa:	b21b      	sxth	r3, r3
 80011ac:	4313      	orrs	r3, r2
 80011ae:	b21a      	sxth	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	811a      	strh	r2, [r3, #8]
	pMPU9250->gyro_y_raw = ((data[10] << 8) | data[11]);
 80011b4:	7ebb      	ldrb	r3, [r7, #26]
 80011b6:	021b      	lsls	r3, r3, #8
 80011b8:	b21a      	sxth	r2, r3
 80011ba:	7efb      	ldrb	r3, [r7, #27]
 80011bc:	b21b      	sxth	r3, r3
 80011be:	4313      	orrs	r3, r2
 80011c0:	b21a      	sxth	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	815a      	strh	r2, [r3, #10]
	pMPU9250->gyro_z_raw = ((data[12] << 8) | data[13]);
 80011c6:	7f3b      	ldrb	r3, [r7, #28]
 80011c8:	021b      	lsls	r3, r3, #8
 80011ca:	b21a      	sxth	r2, r3
 80011cc:	7f7b      	ldrb	r3, [r7, #29]
 80011ce:	b21b      	sxth	r3, r3
 80011d0:	4313      	orrs	r3, r2
 80011d2:	b21a      	sxth	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	819a      	strh	r2, [r3, #12]

	uint8_t readData = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	73fb      	strb	r3, [r7, #15]
	MPU9250_Readbyte(AK8963_ADDRESS, AK8963_ST1, &readData);
 80011dc:	f107 030f 	add.w	r3, r7, #15
 80011e0:	461a      	mov	r2, r3
 80011e2:	2102      	movs	r1, #2
 80011e4:	2018      	movs	r0, #24
 80011e6:	f7ff fe47 	bl	8000e78 <MPU9250_Readbyte>
	if (readData & 0x01) {                                                    // wait for magnetometer data ready bit to be set
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d028      	beq.n	8001246 <MPU9250_Get9AxisRawData+0x102>
		uint8_t raw_data[7];                                             // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
		MPU9250_Readbytes(AK8963_ADDRESS, AK8963_XOUT_L, 7, &raw_data[0]);      // Read the six raw data and ST2 registers sequentially into data array
 80011f4:	f107 0308 	add.w	r3, r7, #8
 80011f8:	2207      	movs	r2, #7
 80011fa:	2103      	movs	r1, #3
 80011fc:	2018      	movs	r0, #24
 80011fe:	f7ff fe57 	bl	8000eb0 <MPU9250_Readbytes>

		uint8_t c = raw_data[6];                                         // End data read by reading ST2 register
 8001202:	7bbb      	ldrb	r3, [r7, #14]
 8001204:	77fb      	strb	r3, [r7, #31]
		if (!(c & 0x08)) {                                               // Check if magnetic sensor overflow set, if not then report data
 8001206:	7ffb      	ldrb	r3, [r7, #31]
 8001208:	f003 0308 	and.w	r3, r3, #8
 800120c:	2b00      	cmp	r3, #0
 800120e:	d11a      	bne.n	8001246 <MPU9250_Get9AxisRawData+0x102>
			pMPU9250->mag_x_raw = ((int16_t)raw_data[1] << 8) | raw_data[0];  // Turn the MSB and LSB into a signed 16-bit value
 8001210:	7a7b      	ldrb	r3, [r7, #9]
 8001212:	021b      	lsls	r3, r3, #8
 8001214:	b21a      	sxth	r2, r3
 8001216:	7a3b      	ldrb	r3, [r7, #8]
 8001218:	b21b      	sxth	r3, r3
 800121a:	4313      	orrs	r3, r2
 800121c:	b21a      	sxth	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	81da      	strh	r2, [r3, #14]
			pMPU9250->mag_y_raw = ((int16_t)raw_data[3] << 8) | raw_data[2];  // Data stored as little Endian
 8001222:	7afb      	ldrb	r3, [r7, #11]
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	b21a      	sxth	r2, r3
 8001228:	7abb      	ldrb	r3, [r7, #10]
 800122a:	b21b      	sxth	r3, r3
 800122c:	4313      	orrs	r3, r2
 800122e:	b21a      	sxth	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	821a      	strh	r2, [r3, #16]
			pMPU9250->mag_z_raw = ((int16_t)raw_data[5] << 8) | raw_data[4];
 8001234:	7b7b      	ldrb	r3, [r7, #13]
 8001236:	021b      	lsls	r3, r3, #8
 8001238:	b21a      	sxth	r2, r3
 800123a:	7b3b      	ldrb	r3, [r7, #12]
 800123c:	b21b      	sxth	r3, r3
 800123e:	4313      	orrs	r3, r2
 8001240:	b21a      	sxth	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	825a      	strh	r2, [r3, #18]
		}
	}
}
 8001246:	bf00      	nop
 8001248:	3720      	adds	r7, #32
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <MPU9250_Get_LSB_Sensitivity>:

void MPU9250_Get_LSB_Sensitivity(uint8_t FS_SCALE_GYRO, uint8_t FS_SCALE_ACC)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	460a      	mov	r2, r1
 800125a:	71fb      	strb	r3, [r7, #7]
 800125c:	4613      	mov	r3, r2
 800125e:	71bb      	strb	r3, [r7, #6]
	switch(FS_SCALE_GYRO)
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	2b03      	cmp	r3, #3
 8001264:	d81a      	bhi.n	800129c <MPU9250_Get_LSB_Sensitivity+0x4c>
 8001266:	a201      	add	r2, pc, #4	; (adr r2, 800126c <MPU9250_Get_LSB_Sensitivity+0x1c>)
 8001268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800126c:	0800127d 	.word	0x0800127d
 8001270:	08001285 	.word	0x08001285
 8001274:	0800128d 	.word	0x0800128d
 8001278:	08001295 	.word	0x08001295
	{
	case 0:
		LSB_Sensitivity_GYRO = 131.f;
 800127c:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <MPU9250_Get_LSB_Sensitivity+0x9c>)
 800127e:	4a1c      	ldr	r2, [pc, #112]	; (80012f0 <MPU9250_Get_LSB_Sensitivity+0xa0>)
 8001280:	601a      	str	r2, [r3, #0]
		break;
 8001282:	e00b      	b.n	800129c <MPU9250_Get_LSB_Sensitivity+0x4c>
	case 1:
		LSB_Sensitivity_GYRO = 65.5f;
 8001284:	4b19      	ldr	r3, [pc, #100]	; (80012ec <MPU9250_Get_LSB_Sensitivity+0x9c>)
 8001286:	4a1b      	ldr	r2, [pc, #108]	; (80012f4 <MPU9250_Get_LSB_Sensitivity+0xa4>)
 8001288:	601a      	str	r2, [r3, #0]
		break;
 800128a:	e007      	b.n	800129c <MPU9250_Get_LSB_Sensitivity+0x4c>
	case 2:
		LSB_Sensitivity_GYRO = 32.8f;
 800128c:	4b17      	ldr	r3, [pc, #92]	; (80012ec <MPU9250_Get_LSB_Sensitivity+0x9c>)
 800128e:	4a1a      	ldr	r2, [pc, #104]	; (80012f8 <MPU9250_Get_LSB_Sensitivity+0xa8>)
 8001290:	601a      	str	r2, [r3, #0]
		break;
 8001292:	e003      	b.n	800129c <MPU9250_Get_LSB_Sensitivity+0x4c>
	case 3:
		LSB_Sensitivity_GYRO = 16.4f;
 8001294:	4b15      	ldr	r3, [pc, #84]	; (80012ec <MPU9250_Get_LSB_Sensitivity+0x9c>)
 8001296:	4a19      	ldr	r2, [pc, #100]	; (80012fc <MPU9250_Get_LSB_Sensitivity+0xac>)
 8001298:	601a      	str	r2, [r3, #0]
		break;
 800129a:	bf00      	nop
	}
	switch(FS_SCALE_ACC)
 800129c:	79bb      	ldrb	r3, [r7, #6]
 800129e:	2b03      	cmp	r3, #3
 80012a0:	d81e      	bhi.n	80012e0 <MPU9250_Get_LSB_Sensitivity+0x90>
 80012a2:	a201      	add	r2, pc, #4	; (adr r2, 80012a8 <MPU9250_Get_LSB_Sensitivity+0x58>)
 80012a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a8:	080012b9 	.word	0x080012b9
 80012ac:	080012c3 	.word	0x080012c3
 80012b0:	080012cd 	.word	0x080012cd
 80012b4:	080012d7 	.word	0x080012d7
	{
	case 0:
		LSB_Sensitivity_ACC = 16384.f;
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <MPU9250_Get_LSB_Sensitivity+0xb0>)
 80012ba:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80012be:	601a      	str	r2, [r3, #0]
		break;
 80012c0:	e00e      	b.n	80012e0 <MPU9250_Get_LSB_Sensitivity+0x90>
	case 1:
		LSB_Sensitivity_ACC = 8192.f;
 80012c2:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <MPU9250_Get_LSB_Sensitivity+0xb0>)
 80012c4:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80012c8:	601a      	str	r2, [r3, #0]
		break;
 80012ca:	e009      	b.n	80012e0 <MPU9250_Get_LSB_Sensitivity+0x90>
	case 2:
		LSB_Sensitivity_ACC = 4096.f;
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <MPU9250_Get_LSB_Sensitivity+0xb0>)
 80012ce:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 80012d2:	601a      	str	r2, [r3, #0]
		break;
 80012d4:	e004      	b.n	80012e0 <MPU9250_Get_LSB_Sensitivity+0x90>
	case 3:
		LSB_Sensitivity_ACC = 2048.f;
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <MPU9250_Get_LSB_Sensitivity+0xb0>)
 80012d8:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 80012dc:	601a      	str	r2, [r3, #0]
		break;
 80012de:	bf00      	nop
	}
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	20000098 	.word	0x20000098
 80012f0:	43030000 	.word	0x43030000
 80012f4:	42830000 	.word	0x42830000
 80012f8:	42033333 	.word	0x42033333
 80012fc:	41833333 	.word	0x41833333
 8001300:	20000094 	.word	0x20000094

08001304 <MPU_readProcessedData>:

/// @brief Calculate the real world sensor values
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_readProcessedData(Struct_MPU9250 *pMPU9250)
{
 8001304:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
    // Get raw values from the IMU
	MPU9250_Get9AxisRawData(pMPU9250);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff ff18 	bl	8001144 <MPU9250_Get9AxisRawData>

    // Convert accelerometer values to g's
    pMPU9250->acc_x = pMPU9250->acc_x_raw / LSB_Sensitivity_ACC;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f9b3 3000 	ldrsh.w	r3, [r3]
 800131a:	ee07 3a90 	vmov	s15, r3
 800131e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001322:	4bcc      	ldr	r3, [pc, #816]	; (8001654 <MPU_readProcessedData+0x350>)
 8001324:	ed93 7a00 	vldr	s14, [r3]
 8001328:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	edc3 7a05 	vstr	s15, [r3, #20]
    pMPU9250->acc_y = pMPU9250->acc_y_raw / LSB_Sensitivity_ACC;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001338:	ee07 3a90 	vmov	s15, r3
 800133c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001340:	4bc4      	ldr	r3, [pc, #784]	; (8001654 <MPU_readProcessedData+0x350>)
 8001342:	ed93 7a00 	vldr	s14, [r3]
 8001346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	edc3 7a06 	vstr	s15, [r3, #24]
    pMPU9250->acc_z = pMPU9250->acc_z_raw / LSB_Sensitivity_ACC;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001356:	ee07 3a90 	vmov	s15, r3
 800135a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800135e:	4bbd      	ldr	r3, [pc, #756]	; (8001654 <MPU_readProcessedData+0x350>)
 8001360:	ed93 7a00 	vldr	s14, [r3]
 8001364:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	edc3 7a07 	vstr	s15, [r3, #28]
    // Low pass filter of accelerometer
    x2_Low = ((alpha2 * pMPU9250->acc_x) + (1.0 - alpha2) * x2_old);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	edd3 7a05 	vldr	s15, [r3, #20]
 8001374:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 8001658 <MPU_readProcessedData+0x354>
 8001378:	ee67 7a87 	vmul.f32	s15, s15, s14
 800137c:	ee17 0a90 	vmov	r0, s15
 8001380:	f7ff f886 	bl	8000490 <__aeabi_f2d>
 8001384:	4604      	mov	r4, r0
 8001386:	460d      	mov	r5, r1
 8001388:	4bb4      	ldr	r3, [pc, #720]	; (800165c <MPU_readProcessedData+0x358>)
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff f880 	bl	8000490 <__aeabi_f2d>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	f04f 0000 	mov.w	r0, #0
 8001398:	49b1      	ldr	r1, [pc, #708]	; (8001660 <MPU_readProcessedData+0x35c>)
 800139a:	f7fe ff19 	bl	80001d0 <__aeabi_dsub>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4690      	mov	r8, r2
 80013a4:	4699      	mov	r9, r3
 80013a6:	4baf      	ldr	r3, [pc, #700]	; (8001664 <MPU_readProcessedData+0x360>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff f870 	bl	8000490 <__aeabi_f2d>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4640      	mov	r0, r8
 80013b6:	4649      	mov	r1, r9
 80013b8:	f7ff f8c2 	bl	8000540 <__aeabi_dmul>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4620      	mov	r0, r4
 80013c2:	4629      	mov	r1, r5
 80013c4:	f7fe ff06 	bl	80001d4 <__adddf3>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4610      	mov	r0, r2
 80013ce:	4619      	mov	r1, r3
 80013d0:	f7ff fb66 	bl	8000aa0 <__aeabi_d2f>
 80013d4:	4603      	mov	r3, r0
 80013d6:	4aa4      	ldr	r2, [pc, #656]	; (8001668 <MPU_readProcessedData+0x364>)
 80013d8:	6013      	str	r3, [r2, #0]
	y2_Low = ((alpha2 * pMPU9250->acc_y) + (1.0 - alpha2) * y2_old);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	edd3 7a06 	vldr	s15, [r3, #24]
 80013e0:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8001658 <MPU_readProcessedData+0x354>
 80013e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013e8:	ee17 0a90 	vmov	r0, s15
 80013ec:	f7ff f850 	bl	8000490 <__aeabi_f2d>
 80013f0:	4604      	mov	r4, r0
 80013f2:	460d      	mov	r5, r1
 80013f4:	4b99      	ldr	r3, [pc, #612]	; (800165c <MPU_readProcessedData+0x358>)
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff f84a 	bl	8000490 <__aeabi_f2d>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	f04f 0000 	mov.w	r0, #0
 8001404:	4996      	ldr	r1, [pc, #600]	; (8001660 <MPU_readProcessedData+0x35c>)
 8001406:	f7fe fee3 	bl	80001d0 <__aeabi_dsub>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4690      	mov	r8, r2
 8001410:	4699      	mov	r9, r3
 8001412:	4b96      	ldr	r3, [pc, #600]	; (800166c <MPU_readProcessedData+0x368>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff f83a 	bl	8000490 <__aeabi_f2d>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4640      	mov	r0, r8
 8001422:	4649      	mov	r1, r9
 8001424:	f7ff f88c 	bl	8000540 <__aeabi_dmul>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4620      	mov	r0, r4
 800142e:	4629      	mov	r1, r5
 8001430:	f7fe fed0 	bl	80001d4 <__adddf3>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4610      	mov	r0, r2
 800143a:	4619      	mov	r1, r3
 800143c:	f7ff fb30 	bl	8000aa0 <__aeabi_d2f>
 8001440:	4603      	mov	r3, r0
 8001442:	4a8b      	ldr	r2, [pc, #556]	; (8001670 <MPU_readProcessedData+0x36c>)
 8001444:	6013      	str	r3, [r2, #0]
	z2_Low = ((alpha2 * pMPU9250->acc_z) + (1.0 - alpha2) * z2_old);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	edd3 7a07 	vldr	s15, [r3, #28]
 800144c:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8001658 <MPU_readProcessedData+0x354>
 8001450:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001454:	ee17 0a90 	vmov	r0, s15
 8001458:	f7ff f81a 	bl	8000490 <__aeabi_f2d>
 800145c:	4604      	mov	r4, r0
 800145e:	460d      	mov	r5, r1
 8001460:	4b7e      	ldr	r3, [pc, #504]	; (800165c <MPU_readProcessedData+0x358>)
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff f814 	bl	8000490 <__aeabi_f2d>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	f04f 0000 	mov.w	r0, #0
 8001470:	497b      	ldr	r1, [pc, #492]	; (8001660 <MPU_readProcessedData+0x35c>)
 8001472:	f7fe fead 	bl	80001d0 <__aeabi_dsub>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	4690      	mov	r8, r2
 800147c:	4699      	mov	r9, r3
 800147e:	4b7d      	ldr	r3, [pc, #500]	; (8001674 <MPU_readProcessedData+0x370>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff f804 	bl	8000490 <__aeabi_f2d>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4640      	mov	r0, r8
 800148e:	4649      	mov	r1, r9
 8001490:	f7ff f856 	bl	8000540 <__aeabi_dmul>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4620      	mov	r0, r4
 800149a:	4629      	mov	r1, r5
 800149c:	f7fe fe9a 	bl	80001d4 <__adddf3>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4610      	mov	r0, r2
 80014a6:	4619      	mov	r1, r3
 80014a8:	f7ff fafa 	bl	8000aa0 <__aeabi_d2f>
 80014ac:	4603      	mov	r3, r0
 80014ae:	4a72      	ldr	r2, [pc, #456]	; (8001678 <MPU_readProcessedData+0x374>)
 80014b0:	6013      	str	r3, [r2, #0]

	x2_old = x2_Low;
 80014b2:	4b6d      	ldr	r3, [pc, #436]	; (8001668 <MPU_readProcessedData+0x364>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a6b      	ldr	r2, [pc, #428]	; (8001664 <MPU_readProcessedData+0x360>)
 80014b8:	6013      	str	r3, [r2, #0]
	y2_old = y2_Low;
 80014ba:	4b6d      	ldr	r3, [pc, #436]	; (8001670 <MPU_readProcessedData+0x36c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a6b      	ldr	r2, [pc, #428]	; (800166c <MPU_readProcessedData+0x368>)
 80014c0:	6013      	str	r3, [r2, #0]
	z2_old = z2_Low;
 80014c2:	4b6d      	ldr	r3, [pc, #436]	; (8001678 <MPU_readProcessedData+0x374>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a6b      	ldr	r2, [pc, #428]	; (8001674 <MPU_readProcessedData+0x370>)
 80014c8:	6013      	str	r3, [r2, #0]

	pMPU9250->Filt_accx = x2_Low;
 80014ca:	4b67      	ldr	r3, [pc, #412]	; (8001668 <MPU_readProcessedData+0x364>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	631a      	str	r2, [r3, #48]	; 0x30
	pMPU9250->Filt_accy = y2_Low;
 80014d2:	4b67      	ldr	r3, [pc, #412]	; (8001670 <MPU_readProcessedData+0x36c>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	635a      	str	r2, [r3, #52]	; 0x34
	pMPU9250->Filt_accz = z2_Low;
 80014da:	4b67      	ldr	r3, [pc, #412]	; (8001678 <MPU_readProcessedData+0x374>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	639a      	str	r2, [r3, #56]	; 0x38

    // Compensate for gyro offset
    pMPU9250->gyro_x = pMPU9250->gyro_x_raw - pMPU9250->cal_gyx;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80014e8:	ee07 3a90 	vmov	s15, r3
 80014ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80014f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    pMPU9250->gyro_y = pMPU9250->gyro_y_raw - pMPU9250->cal_gyy;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001506:	ee07 3a90 	vmov	s15, r3
 800150a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001514:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    pMPU9250->gyro_z = pMPU9250->gyro_z_raw - pMPU9250->cal_gyz;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001524:	ee07 3a90 	vmov	s15, r3
 8001528:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001532:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    // Convert gyro values to deg/s
    pMPU9250->gyro_x /= LSB_Sensitivity_GYRO;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001542:	4b4e      	ldr	r3, [pc, #312]	; (800167c <MPU_readProcessedData+0x378>)
 8001544:	ed93 7a00 	vldr	s14, [r3]
 8001548:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    pMPU9250->gyro_y /= LSB_Sensitivity_GYRO;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001558:	4b48      	ldr	r3, [pc, #288]	; (800167c <MPU_readProcessedData+0x378>)
 800155a:	ed93 7a00 	vldr	s14, [r3]
 800155e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    pMPU9250->gyro_z /= LSB_Sensitivity_GYRO;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800156e:	4b43      	ldr	r3, [pc, #268]	; (800167c <MPU_readProcessedData+0x378>)
 8001570:	ed93 7a00 	vldr	s14, [r3]
 8001574:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    // Low pass filter of accelerometer
    xg2_Low = ((alpha2 * pMPU9250->gyro_x) + (1.0 - alpha2) * xg2_old);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001584:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001658 <MPU_readProcessedData+0x354>
 8001588:	ee67 7a87 	vmul.f32	s15, s15, s14
 800158c:	ee17 0a90 	vmov	r0, s15
 8001590:	f7fe ff7e 	bl	8000490 <__aeabi_f2d>
 8001594:	4604      	mov	r4, r0
 8001596:	460d      	mov	r5, r1
 8001598:	4b30      	ldr	r3, [pc, #192]	; (800165c <MPU_readProcessedData+0x358>)
 800159a:	4618      	mov	r0, r3
 800159c:	f7fe ff78 	bl	8000490 <__aeabi_f2d>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	f04f 0000 	mov.w	r0, #0
 80015a8:	492d      	ldr	r1, [pc, #180]	; (8001660 <MPU_readProcessedData+0x35c>)
 80015aa:	f7fe fe11 	bl	80001d0 <__aeabi_dsub>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4690      	mov	r8, r2
 80015b4:	4699      	mov	r9, r3
 80015b6:	4b32      	ldr	r3, [pc, #200]	; (8001680 <MPU_readProcessedData+0x37c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7fe ff68 	bl	8000490 <__aeabi_f2d>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4640      	mov	r0, r8
 80015c6:	4649      	mov	r1, r9
 80015c8:	f7fe ffba 	bl	8000540 <__aeabi_dmul>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	4620      	mov	r0, r4
 80015d2:	4629      	mov	r1, r5
 80015d4:	f7fe fdfe 	bl	80001d4 <__adddf3>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	f7ff fa5e 	bl	8000aa0 <__aeabi_d2f>
 80015e4:	4603      	mov	r3, r0
 80015e6:	4a27      	ldr	r2, [pc, #156]	; (8001684 <MPU_readProcessedData+0x380>)
 80015e8:	6013      	str	r3, [r2, #0]
	yg2_Low = ((alpha2 * pMPU9250->gyro_y) + (1.0 - alpha2) * yg2_old);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80015f0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001658 <MPU_readProcessedData+0x354>
 80015f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015f8:	ee17 0a90 	vmov	r0, s15
 80015fc:	f7fe ff48 	bl	8000490 <__aeabi_f2d>
 8001600:	4604      	mov	r4, r0
 8001602:	460d      	mov	r5, r1
 8001604:	4b15      	ldr	r3, [pc, #84]	; (800165c <MPU_readProcessedData+0x358>)
 8001606:	4618      	mov	r0, r3
 8001608:	f7fe ff42 	bl	8000490 <__aeabi_f2d>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	f04f 0000 	mov.w	r0, #0
 8001614:	4912      	ldr	r1, [pc, #72]	; (8001660 <MPU_readProcessedData+0x35c>)
 8001616:	f7fe fddb 	bl	80001d0 <__aeabi_dsub>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4690      	mov	r8, r2
 8001620:	4699      	mov	r9, r3
 8001622:	4b19      	ldr	r3, [pc, #100]	; (8001688 <MPU_readProcessedData+0x384>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe ff32 	bl	8000490 <__aeabi_f2d>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4640      	mov	r0, r8
 8001632:	4649      	mov	r1, r9
 8001634:	f7fe ff84 	bl	8000540 <__aeabi_dmul>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4620      	mov	r0, r4
 800163e:	4629      	mov	r1, r5
 8001640:	f7fe fdc8 	bl	80001d4 <__adddf3>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	4610      	mov	r0, r2
 800164a:	4619      	mov	r1, r3
 800164c:	f7ff fa28 	bl	8000aa0 <__aeabi_d2f>
 8001650:	4603      	mov	r3, r0
 8001652:	e01b      	b.n	800168c <MPU_readProcessedData+0x388>
 8001654:	20000094 	.word	0x20000094
 8001658:	3c66c2b4 	.word	0x3c66c2b4
 800165c:	3c66c2b4 	.word	0x3c66c2b4
 8001660:	3ff00000 	.word	0x3ff00000
 8001664:	200000cc 	.word	0x200000cc
 8001668:	200000c0 	.word	0x200000c0
 800166c:	200000d0 	.word	0x200000d0
 8001670:	200000c4 	.word	0x200000c4
 8001674:	200000d4 	.word	0x200000d4
 8001678:	200000c8 	.word	0x200000c8
 800167c:	20000098 	.word	0x20000098
 8001680:	200000e4 	.word	0x200000e4
 8001684:	200000d8 	.word	0x200000d8
 8001688:	200000e8 	.word	0x200000e8
 800168c:	4a2a      	ldr	r2, [pc, #168]	; (8001738 <MPU_readProcessedData+0x434>)
 800168e:	6013      	str	r3, [r2, #0]
	zg2_Low = ((alpha2 * pMPU9250->gyro_z) + (1.0 - alpha2) * zg2_old);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001696:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800173c <MPU_readProcessedData+0x438>
 800169a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800169e:	ee17 0a90 	vmov	r0, s15
 80016a2:	f7fe fef5 	bl	8000490 <__aeabi_f2d>
 80016a6:	4604      	mov	r4, r0
 80016a8:	460d      	mov	r5, r1
 80016aa:	4b25      	ldr	r3, [pc, #148]	; (8001740 <MPU_readProcessedData+0x43c>)
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe feef 	bl	8000490 <__aeabi_f2d>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	f04f 0000 	mov.w	r0, #0
 80016ba:	4922      	ldr	r1, [pc, #136]	; (8001744 <MPU_readProcessedData+0x440>)
 80016bc:	f7fe fd88 	bl	80001d0 <__aeabi_dsub>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	4690      	mov	r8, r2
 80016c6:	4699      	mov	r9, r3
 80016c8:	4b1f      	ldr	r3, [pc, #124]	; (8001748 <MPU_readProcessedData+0x444>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7fe fedf 	bl	8000490 <__aeabi_f2d>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4640      	mov	r0, r8
 80016d8:	4649      	mov	r1, r9
 80016da:	f7fe ff31 	bl	8000540 <__aeabi_dmul>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	4620      	mov	r0, r4
 80016e4:	4629      	mov	r1, r5
 80016e6:	f7fe fd75 	bl	80001d4 <__adddf3>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	4610      	mov	r0, r2
 80016f0:	4619      	mov	r1, r3
 80016f2:	f7ff f9d5 	bl	8000aa0 <__aeabi_d2f>
 80016f6:	4603      	mov	r3, r0
 80016f8:	4a14      	ldr	r2, [pc, #80]	; (800174c <MPU_readProcessedData+0x448>)
 80016fa:	6013      	str	r3, [r2, #0]

	xg2_old = xg2_Low;
 80016fc:	4b14      	ldr	r3, [pc, #80]	; (8001750 <MPU_readProcessedData+0x44c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a14      	ldr	r2, [pc, #80]	; (8001754 <MPU_readProcessedData+0x450>)
 8001702:	6013      	str	r3, [r2, #0]
	yg2_old = yg2_Low;
 8001704:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <MPU_readProcessedData+0x434>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a13      	ldr	r2, [pc, #76]	; (8001758 <MPU_readProcessedData+0x454>)
 800170a:	6013      	str	r3, [r2, #0]
	zg2_old = zg2_Low;
 800170c:	4b0f      	ldr	r3, [pc, #60]	; (800174c <MPU_readProcessedData+0x448>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a0d      	ldr	r2, [pc, #52]	; (8001748 <MPU_readProcessedData+0x444>)
 8001712:	6013      	str	r3, [r2, #0]

	pMPU9250->Filt_gyx = xg2_Low;
 8001714:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <MPU_readProcessedData+0x44c>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	63da      	str	r2, [r3, #60]	; 0x3c
	pMPU9250->Filt_gyy = yg2_Low;
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <MPU_readProcessedData+0x434>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	641a      	str	r2, [r3, #64]	; 0x40
	pMPU9250->Filt_gyz = zg2_Low;
 8001724:	4b09      	ldr	r3, [pc, #36]	; (800174c <MPU_readProcessedData+0x448>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	645a      	str	r2, [r3, #68]	; 0x44
}
 800172c:	bf00      	nop
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001736:	bf00      	nop
 8001738:	200000dc 	.word	0x200000dc
 800173c:	3c66c2b4 	.word	0x3c66c2b4
 8001740:	3c66c2b4 	.word	0x3c66c2b4
 8001744:	3ff00000 	.word	0x3ff00000
 8001748:	200000ec 	.word	0x200000ec
 800174c:	200000e0 	.word	0x200000e0
 8001750:	200000d8 	.word	0x200000d8
 8001754:	200000e4 	.word	0x200000e4
 8001758:	200000e8 	.word	0x200000e8
 800175c:	00000000 	.word	0x00000000

08001760 <CalculateAccAngle>:
    pMPU9250->cal_gyy = (float)yy / (float)numCalPoints;
    pMPU9250->cal_gyz = (float)zz / (float)numCalPoints;
}

void CalculateAccAngle(Struct_Angle* Angle, Struct_MPU9250 *pMPU9250)
{
 8001760:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
 800176a:	6039      	str	r1, [r7, #0]
	Angle->acc_roll  = atan(-pMPU9250->acc_x / sqrt(pow(pMPU9250->acc_y,2) + pow(pMPU9250->acc_z,2))) * RADIAN_TO_DEGREE;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001772:	eef1 7a67 	vneg.f32	s15, s15
 8001776:	ee17 3a90 	vmov	r3, s15
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fe88 	bl	8000490 <__aeabi_f2d>
 8001780:	4604      	mov	r4, r0
 8001782:	460d      	mov	r5, r1
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	4618      	mov	r0, r3
 800178a:	f7fe fe81 	bl	8000490 <__aeabi_f2d>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	ed9f 1bd9 	vldr	d1, [pc, #868]	; 8001af8 <CalculateAccAngle+0x398>
 8001796:	ec43 2b10 	vmov	d0, r2, r3
 800179a:	f002 fc75 	bl	8004088 <pow>
 800179e:	ec59 8b10 	vmov	r8, r9, d0
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe fe72 	bl	8000490 <__aeabi_f2d>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	ed9f 1bd1 	vldr	d1, [pc, #836]	; 8001af8 <CalculateAccAngle+0x398>
 80017b4:	ec43 2b10 	vmov	d0, r2, r3
 80017b8:	f002 fc66 	bl	8004088 <pow>
 80017bc:	ec53 2b10 	vmov	r2, r3, d0
 80017c0:	4640      	mov	r0, r8
 80017c2:	4649      	mov	r1, r9
 80017c4:	f7fe fd06 	bl	80001d4 <__adddf3>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	ec43 2b17 	vmov	d7, r2, r3
 80017d0:	eeb0 0a47 	vmov.f32	s0, s14
 80017d4:	eef0 0a67 	vmov.f32	s1, s15
 80017d8:	f002 fcc6 	bl	8004168 <sqrt>
 80017dc:	ec53 2b10 	vmov	r2, r3, d0
 80017e0:	4620      	mov	r0, r4
 80017e2:	4629      	mov	r1, r5
 80017e4:	f7fe ffd6 	bl	8000794 <__aeabi_ddiv>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	ec43 2b17 	vmov	d7, r2, r3
 80017f0:	eeb0 0a47 	vmov.f32	s0, s14
 80017f4:	eef0 0a67 	vmov.f32	s1, s15
 80017f8:	f002 fce2 	bl	80041c0 <atan>
 80017fc:	ec51 0b10 	vmov	r0, r1, d0
 8001800:	f04f 0200 	mov.w	r2, #0
 8001804:	4bc0      	ldr	r3, [pc, #768]	; (8001b08 <CalculateAccAngle+0x3a8>)
 8001806:	f7fe fe9b 	bl	8000540 <__aeabi_dmul>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4610      	mov	r0, r2
 8001810:	4619      	mov	r1, r3
 8001812:	a3bb      	add	r3, pc, #748	; (adr r3, 8001b00 <CalculateAccAngle+0x3a0>)
 8001814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001818:	f7fe ffbc 	bl	8000794 <__aeabi_ddiv>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4610      	mov	r0, r2
 8001822:	4619      	mov	r1, r3
 8001824:	f7ff f93c 	bl	8000aa0 <__aeabi_d2f>
 8001828:	4602      	mov	r2, r0
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	601a      	str	r2, [r3, #0]
	Angle->acc_pitch = atan(pMPU9250->acc_y / sqrt(pow(pMPU9250->acc_x,2) + pow(pMPU9250->acc_z,2))) * RADIAN_TO_DEGREE;
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	4618      	mov	r0, r3
 8001834:	f7fe fe2c 	bl	8000490 <__aeabi_f2d>
 8001838:	4604      	mov	r4, r0
 800183a:	460d      	mov	r5, r1
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fe25 	bl	8000490 <__aeabi_f2d>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	ed9f 1bab 	vldr	d1, [pc, #684]	; 8001af8 <CalculateAccAngle+0x398>
 800184e:	ec43 2b10 	vmov	d0, r2, r3
 8001852:	f002 fc19 	bl	8004088 <pow>
 8001856:	ec59 8b10 	vmov	r8, r9, d0
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	4618      	mov	r0, r3
 8001860:	f7fe fe16 	bl	8000490 <__aeabi_f2d>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	ed9f 1ba3 	vldr	d1, [pc, #652]	; 8001af8 <CalculateAccAngle+0x398>
 800186c:	ec43 2b10 	vmov	d0, r2, r3
 8001870:	f002 fc0a 	bl	8004088 <pow>
 8001874:	ec53 2b10 	vmov	r2, r3, d0
 8001878:	4640      	mov	r0, r8
 800187a:	4649      	mov	r1, r9
 800187c:	f7fe fcaa 	bl	80001d4 <__adddf3>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	ec43 2b17 	vmov	d7, r2, r3
 8001888:	eeb0 0a47 	vmov.f32	s0, s14
 800188c:	eef0 0a67 	vmov.f32	s1, s15
 8001890:	f002 fc6a 	bl	8004168 <sqrt>
 8001894:	ec53 2b10 	vmov	r2, r3, d0
 8001898:	4620      	mov	r0, r4
 800189a:	4629      	mov	r1, r5
 800189c:	f7fe ff7a 	bl	8000794 <__aeabi_ddiv>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	ec43 2b17 	vmov	d7, r2, r3
 80018a8:	eeb0 0a47 	vmov.f32	s0, s14
 80018ac:	eef0 0a67 	vmov.f32	s1, s15
 80018b0:	f002 fc86 	bl	80041c0 <atan>
 80018b4:	ec51 0b10 	vmov	r0, r1, d0
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	4b92      	ldr	r3, [pc, #584]	; (8001b08 <CalculateAccAngle+0x3a8>)
 80018be:	f7fe fe3f 	bl	8000540 <__aeabi_dmul>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	4610      	mov	r0, r2
 80018c8:	4619      	mov	r1, r3
 80018ca:	a38d      	add	r3, pc, #564	; (adr r3, 8001b00 <CalculateAccAngle+0x3a0>)
 80018cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d0:	f7fe ff60 	bl	8000794 <__aeabi_ddiv>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4610      	mov	r0, r2
 80018da:	4619      	mov	r1, r3
 80018dc:	f7ff f8e0 	bl	8000aa0 <__aeabi_d2f>
 80018e0:	4602      	mov	r2, r0
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	605a      	str	r2, [r3, #4]
	Angle->acc_yaw = atan(sqrt(pow(pMPU9250->acc_x, 2) + pow(pMPU9250->acc_y, 2)) / pMPU9250->acc_z) * RADIAN_TO_DEGREE;
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fdd0 	bl	8000490 <__aeabi_f2d>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	ed9f 1b80 	vldr	d1, [pc, #512]	; 8001af8 <CalculateAccAngle+0x398>
 80018f8:	ec43 2b10 	vmov	d0, r2, r3
 80018fc:	f002 fbc4 	bl	8004088 <pow>
 8001900:	ec55 4b10 	vmov	r4, r5, d0
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fdc1 	bl	8000490 <__aeabi_f2d>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	ed9f 1b79 	vldr	d1, [pc, #484]	; 8001af8 <CalculateAccAngle+0x398>
 8001916:	ec43 2b10 	vmov	d0, r2, r3
 800191a:	f002 fbb5 	bl	8004088 <pow>
 800191e:	ec53 2b10 	vmov	r2, r3, d0
 8001922:	4620      	mov	r0, r4
 8001924:	4629      	mov	r1, r5
 8001926:	f7fe fc55 	bl	80001d4 <__adddf3>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	ec43 2b17 	vmov	d7, r2, r3
 8001932:	eeb0 0a47 	vmov.f32	s0, s14
 8001936:	eef0 0a67 	vmov.f32	s1, s15
 800193a:	f002 fc15 	bl	8004168 <sqrt>
 800193e:	ec55 4b10 	vmov	r4, r5, d0
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe fda2 	bl	8000490 <__aeabi_f2d>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4620      	mov	r0, r4
 8001952:	4629      	mov	r1, r5
 8001954:	f7fe ff1e 	bl	8000794 <__aeabi_ddiv>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	ec43 2b17 	vmov	d7, r2, r3
 8001960:	eeb0 0a47 	vmov.f32	s0, s14
 8001964:	eef0 0a67 	vmov.f32	s1, s15
 8001968:	f002 fc2a 	bl	80041c0 <atan>
 800196c:	ec51 0b10 	vmov	r0, r1, d0
 8001970:	f04f 0200 	mov.w	r2, #0
 8001974:	4b64      	ldr	r3, [pc, #400]	; (8001b08 <CalculateAccAngle+0x3a8>)
 8001976:	f7fe fde3 	bl	8000540 <__aeabi_dmul>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	4610      	mov	r0, r2
 8001980:	4619      	mov	r1, r3
 8001982:	a35f      	add	r3, pc, #380	; (adr r3, 8001b00 <CalculateAccAngle+0x3a0>)
 8001984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001988:	f7fe ff04 	bl	8000794 <__aeabi_ddiv>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4610      	mov	r0, r2
 8001992:	4619      	mov	r1, r3
 8001994:	f7ff f884 	bl	8000aa0 <__aeabi_d2f>
 8001998:	4602      	mov	r2, r0
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	609a      	str	r2, [r3, #8]
	//Can't use Angle->acc_yaw there is no reliability. It's based on my personal experimental view.

    x_Low = ((alpha2 * pMPU9250->acc_x) + (1.0 - alpha2) * x_old);
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	edd3 7a05 	vldr	s15, [r3, #20]
 80019a4:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8001b0c <CalculateAccAngle+0x3ac>
 80019a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ac:	ee17 0a90 	vmov	r0, s15
 80019b0:	f7fe fd6e 	bl	8000490 <__aeabi_f2d>
 80019b4:	4604      	mov	r4, r0
 80019b6:	460d      	mov	r5, r1
 80019b8:	4b55      	ldr	r3, [pc, #340]	; (8001b10 <CalculateAccAngle+0x3b0>)
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fd68 	bl	8000490 <__aeabi_f2d>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	f04f 0000 	mov.w	r0, #0
 80019c8:	4952      	ldr	r1, [pc, #328]	; (8001b14 <CalculateAccAngle+0x3b4>)
 80019ca:	f7fe fc01 	bl	80001d0 <__aeabi_dsub>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	4690      	mov	r8, r2
 80019d4:	4699      	mov	r9, r3
 80019d6:	4b50      	ldr	r3, [pc, #320]	; (8001b18 <CalculateAccAngle+0x3b8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fd58 	bl	8000490 <__aeabi_f2d>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4640      	mov	r0, r8
 80019e6:	4649      	mov	r1, r9
 80019e8:	f7fe fdaa 	bl	8000540 <__aeabi_dmul>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4620      	mov	r0, r4
 80019f2:	4629      	mov	r1, r5
 80019f4:	f7fe fbee 	bl	80001d4 <__adddf3>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4610      	mov	r0, r2
 80019fe:	4619      	mov	r1, r3
 8001a00:	f7ff f84e 	bl	8000aa0 <__aeabi_d2f>
 8001a04:	4603      	mov	r3, r0
 8001a06:	4a45      	ldr	r2, [pc, #276]	; (8001b1c <CalculateAccAngle+0x3bc>)
 8001a08:	6013      	str	r3, [r2, #0]
    y_Low = ((alpha2 * pMPU9250->acc_y) + (1.0 - alpha2) * y_old);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a10:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8001b0c <CalculateAccAngle+0x3ac>
 8001a14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a18:	ee17 0a90 	vmov	r0, s15
 8001a1c:	f7fe fd38 	bl	8000490 <__aeabi_f2d>
 8001a20:	4604      	mov	r4, r0
 8001a22:	460d      	mov	r5, r1
 8001a24:	4b3a      	ldr	r3, [pc, #232]	; (8001b10 <CalculateAccAngle+0x3b0>)
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7fe fd32 	bl	8000490 <__aeabi_f2d>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	f04f 0000 	mov.w	r0, #0
 8001a34:	4937      	ldr	r1, [pc, #220]	; (8001b14 <CalculateAccAngle+0x3b4>)
 8001a36:	f7fe fbcb 	bl	80001d0 <__aeabi_dsub>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	4690      	mov	r8, r2
 8001a40:	4699      	mov	r9, r3
 8001a42:	4b37      	ldr	r3, [pc, #220]	; (8001b20 <CalculateAccAngle+0x3c0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe fd22 	bl	8000490 <__aeabi_f2d>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4640      	mov	r0, r8
 8001a52:	4649      	mov	r1, r9
 8001a54:	f7fe fd74 	bl	8000540 <__aeabi_dmul>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4620      	mov	r0, r4
 8001a5e:	4629      	mov	r1, r5
 8001a60:	f7fe fbb8 	bl	80001d4 <__adddf3>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4610      	mov	r0, r2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f7ff f818 	bl	8000aa0 <__aeabi_d2f>
 8001a70:	4603      	mov	r3, r0
 8001a72:	4a2c      	ldr	r2, [pc, #176]	; (8001b24 <CalculateAccAngle+0x3c4>)
 8001a74:	6013      	str	r3, [r2, #0]
    z_Low = ((alpha2 * pMPU9250->acc_z) + (1.0 - alpha2) * z_old);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a7c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001b0c <CalculateAccAngle+0x3ac>
 8001a80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a84:	ee17 0a90 	vmov	r0, s15
 8001a88:	f7fe fd02 	bl	8000490 <__aeabi_f2d>
 8001a8c:	4604      	mov	r4, r0
 8001a8e:	460d      	mov	r5, r1
 8001a90:	4b1f      	ldr	r3, [pc, #124]	; (8001b10 <CalculateAccAngle+0x3b0>)
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7fe fcfc 	bl	8000490 <__aeabi_f2d>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	f04f 0000 	mov.w	r0, #0
 8001aa0:	491c      	ldr	r1, [pc, #112]	; (8001b14 <CalculateAccAngle+0x3b4>)
 8001aa2:	f7fe fb95 	bl	80001d0 <__aeabi_dsub>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4690      	mov	r8, r2
 8001aac:	4699      	mov	r9, r3
 8001aae:	4b1e      	ldr	r3, [pc, #120]	; (8001b28 <CalculateAccAngle+0x3c8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7fe fcec 	bl	8000490 <__aeabi_f2d>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4640      	mov	r0, r8
 8001abe:	4649      	mov	r1, r9
 8001ac0:	f7fe fd3e 	bl	8000540 <__aeabi_dmul>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4620      	mov	r0, r4
 8001aca:	4629      	mov	r1, r5
 8001acc:	f7fe fb82 	bl	80001d4 <__adddf3>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f7fe ffe2 	bl	8000aa0 <__aeabi_d2f>
 8001adc:	4603      	mov	r3, r0
 8001ade:	4a13      	ldr	r2, [pc, #76]	; (8001b2c <CalculateAccAngle+0x3cc>)
 8001ae0:	6013      	str	r3, [r2, #0]

    x_old = x_Low;
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <CalculateAccAngle+0x3bc>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a0c      	ldr	r2, [pc, #48]	; (8001b18 <CalculateAccAngle+0x3b8>)
 8001ae8:	6013      	str	r3, [r2, #0]
    y_old = y_Low;
 8001aea:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <CalculateAccAngle+0x3c4>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a0c      	ldr	r2, [pc, #48]	; (8001b20 <CalculateAccAngle+0x3c0>)
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	e01d      	b.n	8001b30 <CalculateAccAngle+0x3d0>
 8001af4:	f3af 8000 	nop.w
 8001af8:	00000000 	.word	0x00000000
 8001afc:	40000000 	.word	0x40000000
 8001b00:	54442d18 	.word	0x54442d18
 8001b04:	400921fb 	.word	0x400921fb
 8001b08:	40668000 	.word	0x40668000
 8001b0c:	3c66c2b4 	.word	0x3c66c2b4
 8001b10:	3c66c2b4 	.word	0x3c66c2b4
 8001b14:	3ff00000 	.word	0x3ff00000
 8001b18:	200000b4 	.word	0x200000b4
 8001b1c:	200000a8 	.word	0x200000a8
 8001b20:	200000b8 	.word	0x200000b8
 8001b24:	200000ac 	.word	0x200000ac
 8001b28:	200000bc 	.word	0x200000bc
 8001b2c:	200000b0 	.word	0x200000b0
    z_old = z_Low;
 8001b30:	4b67      	ldr	r3, [pc, #412]	; (8001cd0 <CalculateAccAngle+0x570>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a67      	ldr	r2, [pc, #412]	; (8001cd4 <CalculateAccAngle+0x574>)
 8001b36:	6013      	str	r3, [r2, #0]

    Angle->Filt_roll  = atan(-x_Low / sqrt(pow(y_Low,2) + pow(z_Low,2))) * RADIAN_TO_DEGREE;
 8001b38:	4b67      	ldr	r3, [pc, #412]	; (8001cd8 <CalculateAccAngle+0x578>)
 8001b3a:	edd3 7a00 	vldr	s15, [r3]
 8001b3e:	eef1 7a67 	vneg.f32	s15, s15
 8001b42:	ee17 3a90 	vmov	r3, s15
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe fca2 	bl	8000490 <__aeabi_f2d>
 8001b4c:	4604      	mov	r4, r0
 8001b4e:	460d      	mov	r5, r1
 8001b50:	4b62      	ldr	r3, [pc, #392]	; (8001cdc <CalculateAccAngle+0x57c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7fe fc9b 	bl	8000490 <__aeabi_f2d>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	ed9f 1b58 	vldr	d1, [pc, #352]	; 8001cc0 <CalculateAccAngle+0x560>
 8001b62:	ec43 2b10 	vmov	d0, r2, r3
 8001b66:	f002 fa8f 	bl	8004088 <pow>
 8001b6a:	ec59 8b10 	vmov	r8, r9, d0
 8001b6e:	4b58      	ldr	r3, [pc, #352]	; (8001cd0 <CalculateAccAngle+0x570>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe fc8c 	bl	8000490 <__aeabi_f2d>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	ed9f 1b50 	vldr	d1, [pc, #320]	; 8001cc0 <CalculateAccAngle+0x560>
 8001b80:	ec43 2b10 	vmov	d0, r2, r3
 8001b84:	f002 fa80 	bl	8004088 <pow>
 8001b88:	ec53 2b10 	vmov	r2, r3, d0
 8001b8c:	4640      	mov	r0, r8
 8001b8e:	4649      	mov	r1, r9
 8001b90:	f7fe fb20 	bl	80001d4 <__adddf3>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	ec43 2b17 	vmov	d7, r2, r3
 8001b9c:	eeb0 0a47 	vmov.f32	s0, s14
 8001ba0:	eef0 0a67 	vmov.f32	s1, s15
 8001ba4:	f002 fae0 	bl	8004168 <sqrt>
 8001ba8:	ec53 2b10 	vmov	r2, r3, d0
 8001bac:	4620      	mov	r0, r4
 8001bae:	4629      	mov	r1, r5
 8001bb0:	f7fe fdf0 	bl	8000794 <__aeabi_ddiv>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	ec43 2b17 	vmov	d7, r2, r3
 8001bbc:	eeb0 0a47 	vmov.f32	s0, s14
 8001bc0:	eef0 0a67 	vmov.f32	s1, s15
 8001bc4:	f002 fafc 	bl	80041c0 <atan>
 8001bc8:	ec51 0b10 	vmov	r0, r1, d0
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	4b43      	ldr	r3, [pc, #268]	; (8001ce0 <CalculateAccAngle+0x580>)
 8001bd2:	f7fe fcb5 	bl	8000540 <__aeabi_dmul>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4610      	mov	r0, r2
 8001bdc:	4619      	mov	r1, r3
 8001bde:	a33a      	add	r3, pc, #232	; (adr r3, 8001cc8 <CalculateAccAngle+0x568>)
 8001be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be4:	f7fe fdd6 	bl	8000794 <__aeabi_ddiv>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4610      	mov	r0, r2
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f7fe ff56 	bl	8000aa0 <__aeabi_d2f>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	631a      	str	r2, [r3, #48]	; 0x30
	Angle->Filt_pitch = atan(y_Low / sqrt(pow(x_Low,2) + pow(z_Low,2))) * RADIAN_TO_DEGREE;
 8001bfa:	4b38      	ldr	r3, [pc, #224]	; (8001cdc <CalculateAccAngle+0x57c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe fc46 	bl	8000490 <__aeabi_f2d>
 8001c04:	4604      	mov	r4, r0
 8001c06:	460d      	mov	r5, r1
 8001c08:	4b33      	ldr	r3, [pc, #204]	; (8001cd8 <CalculateAccAngle+0x578>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7fe fc3f 	bl	8000490 <__aeabi_f2d>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	ed9f 1b2a 	vldr	d1, [pc, #168]	; 8001cc0 <CalculateAccAngle+0x560>
 8001c1a:	ec43 2b10 	vmov	d0, r2, r3
 8001c1e:	f002 fa33 	bl	8004088 <pow>
 8001c22:	ec59 8b10 	vmov	r8, r9, d0
 8001c26:	4b2a      	ldr	r3, [pc, #168]	; (8001cd0 <CalculateAccAngle+0x570>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7fe fc30 	bl	8000490 <__aeabi_f2d>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	ed9f 1b22 	vldr	d1, [pc, #136]	; 8001cc0 <CalculateAccAngle+0x560>
 8001c38:	ec43 2b10 	vmov	d0, r2, r3
 8001c3c:	f002 fa24 	bl	8004088 <pow>
 8001c40:	ec53 2b10 	vmov	r2, r3, d0
 8001c44:	4640      	mov	r0, r8
 8001c46:	4649      	mov	r1, r9
 8001c48:	f7fe fac4 	bl	80001d4 <__adddf3>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	ec43 2b17 	vmov	d7, r2, r3
 8001c54:	eeb0 0a47 	vmov.f32	s0, s14
 8001c58:	eef0 0a67 	vmov.f32	s1, s15
 8001c5c:	f002 fa84 	bl	8004168 <sqrt>
 8001c60:	ec53 2b10 	vmov	r2, r3, d0
 8001c64:	4620      	mov	r0, r4
 8001c66:	4629      	mov	r1, r5
 8001c68:	f7fe fd94 	bl	8000794 <__aeabi_ddiv>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	ec43 2b17 	vmov	d7, r2, r3
 8001c74:	eeb0 0a47 	vmov.f32	s0, s14
 8001c78:	eef0 0a67 	vmov.f32	s1, s15
 8001c7c:	f002 faa0 	bl	80041c0 <atan>
 8001c80:	ec51 0b10 	vmov	r0, r1, d0
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <CalculateAccAngle+0x580>)
 8001c8a:	f7fe fc59 	bl	8000540 <__aeabi_dmul>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4610      	mov	r0, r2
 8001c94:	4619      	mov	r1, r3
 8001c96:	a30c      	add	r3, pc, #48	; (adr r3, 8001cc8 <CalculateAccAngle+0x568>)
 8001c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9c:	f7fe fd7a 	bl	8000794 <__aeabi_ddiv>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	f7fe fefa 	bl	8000aa0 <__aeabi_d2f>
 8001cac:	4602      	mov	r2, r0
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001cbc:	f3af 8000 	nop.w
 8001cc0:	00000000 	.word	0x00000000
 8001cc4:	40000000 	.word	0x40000000
 8001cc8:	54442d18 	.word	0x54442d18
 8001ccc:	400921fb 	.word	0x400921fb
 8001cd0:	200000b0 	.word	0x200000b0
 8001cd4:	200000bc 	.word	0x200000bc
 8001cd8:	200000a8 	.word	0x200000a8
 8001cdc:	200000ac 	.word	0x200000ac
 8001ce0:	40668000 	.word	0x40668000

08001ce4 <CalculateGyroAngle>:

void CalculateGyroAngle(Struct_Angle* Angle, Struct_MPU9250 *pMPU9250)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
	Angle->gyro_roll  += pMPU9250->Filt_gyx * dtt2;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	ed93 7a03 	vldr	s14, [r3, #12]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001cfa:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001d54 <CalculateGyroAngle+0x70>
 8001cfe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	edc3 7a03 	vstr	s15, [r3, #12]
	Angle->gyro_pitch += pMPU9250->Filt_gyy * dtt2;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001d18:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001d54 <CalculateGyroAngle+0x70>
 8001d1c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	edc3 7a04 	vstr	s15, [r3, #16]
	Angle->gyro_yaw   += pMPU9250->Filt_gyz * dtt2;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001d36:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001d54 <CalculateGyroAngle+0x70>
 8001d3a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	3ba3d70a 	.word	0x3ba3d70a

08001d58 <CalculateCompliFilter>:

void CalculateCompliFilter(Struct_Angle* Angle, Struct_MPU9250 *pMPU9250)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
	CalculateAccAngle(Angle, pMPU9250); //Prepare Acc Angle before using Complimentary Filter.
 8001d62:	6839      	ldr	r1, [r7, #0]
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff fcfb 	bl	8001760 <CalculateAccAngle>

	static float alpha = 0.955f;
	Angle->ComFilt_roll  = alpha*(pMPU9250->gyro_y * dtt2 + Angle->ComFilt_roll) + (1-alpha) * Angle->Filt_roll;
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001d70:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001e18 <CalculateCompliFilter+0xc0>
 8001d74:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	edd3 7a06 	vldr	s15, [r3, #24]
 8001d7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d82:	4b26      	ldr	r3, [pc, #152]	; (8001e1c <CalculateCompliFilter+0xc4>)
 8001d84:	edd3 7a00 	vldr	s15, [r3]
 8001d88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d8c:	4b23      	ldr	r3, [pc, #140]	; (8001e1c <CalculateCompliFilter+0xc4>)
 8001d8e:	edd3 7a00 	vldr	s15, [r3]
 8001d92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d96:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001da0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001da4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	edc3 7a06 	vstr	s15, [r3, #24]
	Angle->ComFilt_pitch = alpha*(pMPU9250->gyro_x * dtt2 + Angle->ComFilt_pitch) + (1-alpha) * Angle->Filt_pitch;
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001db4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001e18 <CalculateCompliFilter+0xc0>
 8001db8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	edd3 7a07 	vldr	s15, [r3, #28]
 8001dc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dc6:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <CalculateCompliFilter+0xc4>)
 8001dc8:	edd3 7a00 	vldr	s15, [r3]
 8001dcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dd0:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <CalculateCompliFilter+0xc4>)
 8001dd2:	edd3 7a00 	vldr	s15, [r3]
 8001dd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001dda:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001de4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	edc3 7a07 	vstr	s15, [r3, #28]
	Angle->ComFilt_yaw   = Angle->ComFilt_yaw + pMPU9250->Filt_gyz * dtt2 ; //0.033, sau do nhan 1.2
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	ed93 7a08 	vldr	s14, [r3, #32]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001dfe:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001e18 <CalculateCompliFilter+0xc0>
 8001e02:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	3ba3d70a 	.word	0x3ba3d70a
 8001e1c:	20000004 	.word	0x20000004

08001e20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e24:	f000 f9d4 	bl	80021d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e28:	f000 f81a 	bl	8001e60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e2c:	f000 f8b0 	bl	8001f90 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001e30:	f000 f880 	bl	8001f34 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MPU9250_Initialization();
 8001e34:	f7ff f85c 	bl	8000ef0 <MPU9250_Initialization>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  MPU_readProcessedData(&MPU9250);
 8001e38:	4807      	ldr	r0, [pc, #28]	; (8001e58 <main+0x38>)
 8001e3a:	f7ff fa63 	bl	8001304 <MPU_readProcessedData>
	  CalculateAccAngle(&Angle, &MPU9250);
 8001e3e:	4906      	ldr	r1, [pc, #24]	; (8001e58 <main+0x38>)
 8001e40:	4806      	ldr	r0, [pc, #24]	; (8001e5c <main+0x3c>)
 8001e42:	f7ff fc8d 	bl	8001760 <CalculateAccAngle>
	  CalculateGyroAngle(&Angle, &MPU9250);
 8001e46:	4904      	ldr	r1, [pc, #16]	; (8001e58 <main+0x38>)
 8001e48:	4804      	ldr	r0, [pc, #16]	; (8001e5c <main+0x3c>)
 8001e4a:	f7ff ff4b 	bl	8001ce4 <CalculateGyroAngle>
	  CalculateCompliFilter(&Angle, &MPU9250);
 8001e4e:	4902      	ldr	r1, [pc, #8]	; (8001e58 <main+0x38>)
 8001e50:	4802      	ldr	r0, [pc, #8]	; (8001e5c <main+0x3c>)
 8001e52:	f7ff ff81 	bl	8001d58 <CalculateCompliFilter>
	  MPU_readProcessedData(&MPU9250);
 8001e56:	e7ef      	b.n	8001e38 <main+0x18>
 8001e58:	20000148 	.word	0x20000148
 8001e5c:	2000019c 	.word	0x2000019c

08001e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b094      	sub	sp, #80	; 0x50
 8001e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e66:	f107 0320 	add.w	r3, r7, #32
 8001e6a:	2230      	movs	r2, #48	; 0x30
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f003 fa10 	bl	8005294 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e74:	f107 030c 	add.w	r3, r7, #12
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e84:	2300      	movs	r3, #0
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	4b28      	ldr	r3, [pc, #160]	; (8001f2c <SystemClock_Config+0xcc>)
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	4a27      	ldr	r2, [pc, #156]	; (8001f2c <SystemClock_Config+0xcc>)
 8001e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e92:	6413      	str	r3, [r2, #64]	; 0x40
 8001e94:	4b25      	ldr	r3, [pc, #148]	; (8001f2c <SystemClock_Config+0xcc>)
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	607b      	str	r3, [r7, #4]
 8001ea4:	4b22      	ldr	r3, [pc, #136]	; (8001f30 <SystemClock_Config+0xd0>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a21      	ldr	r2, [pc, #132]	; (8001f30 <SystemClock_Config+0xd0>)
 8001eaa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eae:	6013      	str	r3, [r2, #0]
 8001eb0:	4b1f      	ldr	r3, [pc, #124]	; (8001f30 <SystemClock_Config+0xd0>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eb8:	607b      	str	r3, [r7, #4]
 8001eba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ec0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001eca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ece:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ed0:	2308      	movs	r3, #8
 8001ed2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001ed4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001ed8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001eda:	2302      	movs	r3, #2
 8001edc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001ede:	2307      	movs	r3, #7
 8001ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ee2:	f107 0320 	add.w	r3, r7, #32
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f001 fc4a 	bl	8003780 <HAL_RCC_OscConfig>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001ef2:	f000 f891 	bl	8002018 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ef6:	230f      	movs	r3, #15
 8001ef8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001efa:	2302      	movs	r3, #2
 8001efc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001efe:	2300      	movs	r3, #0
 8001f00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f02:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f0e:	f107 030c 	add.w	r3, r7, #12
 8001f12:	2105      	movs	r1, #5
 8001f14:	4618      	mov	r0, r3
 8001f16:	f001 feab 	bl	8003c70 <HAL_RCC_ClockConfig>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001f20:	f000 f87a 	bl	8002018 <Error_Handler>
  }
}
 8001f24:	bf00      	nop
 8001f26:	3750      	adds	r7, #80	; 0x50
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40007000 	.word	0x40007000

08001f34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f38:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <MX_I2C1_Init+0x50>)
 8001f3a:	4a13      	ldr	r2, [pc, #76]	; (8001f88 <MX_I2C1_Init+0x54>)
 8001f3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001f3e:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <MX_I2C1_Init+0x50>)
 8001f40:	4a12      	ldr	r2, [pc, #72]	; (8001f8c <MX_I2C1_Init+0x58>)
 8001f42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f44:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <MX_I2C1_Init+0x50>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <MX_I2C1_Init+0x50>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f50:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <MX_I2C1_Init+0x50>)
 8001f52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f58:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <MX_I2C1_Init+0x50>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f5e:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <MX_I2C1_Init+0x50>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f64:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <MX_I2C1_Init+0x50>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f6a:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <MX_I2C1_Init+0x50>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f70:	4804      	ldr	r0, [pc, #16]	; (8001f84 <MX_I2C1_Init+0x50>)
 8001f72:	f000 fc45 	bl	8002800 <HAL_I2C_Init>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f7c:	f000 f84c 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	200000f0 	.word	0x200000f0
 8001f88:	40005400 	.word	0x40005400
 8001f8c:	00061a80 	.word	0x00061a80

08001f90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	4b1e      	ldr	r3, [pc, #120]	; (8002014 <MX_GPIO_Init+0x84>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	4a1d      	ldr	r2, [pc, #116]	; (8002014 <MX_GPIO_Init+0x84>)
 8001fa0:	f043 0304 	orr.w	r3, r3, #4
 8001fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa6:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <MX_GPIO_Init+0x84>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	f003 0304 	and.w	r3, r3, #4
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	4b17      	ldr	r3, [pc, #92]	; (8002014 <MX_GPIO_Init+0x84>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a16      	ldr	r2, [pc, #88]	; (8002014 <MX_GPIO_Init+0x84>)
 8001fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b14      	ldr	r3, [pc, #80]	; (8002014 <MX_GPIO_Init+0x84>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	607b      	str	r3, [r7, #4]
 8001fd2:	4b10      	ldr	r3, [pc, #64]	; (8002014 <MX_GPIO_Init+0x84>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	4a0f      	ldr	r2, [pc, #60]	; (8002014 <MX_GPIO_Init+0x84>)
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fde:	4b0d      	ldr	r3, [pc, #52]	; (8002014 <MX_GPIO_Init+0x84>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	607b      	str	r3, [r7, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	603b      	str	r3, [r7, #0]
 8001fee:	4b09      	ldr	r3, [pc, #36]	; (8002014 <MX_GPIO_Init+0x84>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	4a08      	ldr	r2, [pc, #32]	; (8002014 <MX_GPIO_Init+0x84>)
 8001ff4:	f043 0302 	orr.w	r3, r3, #2
 8001ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <MX_GPIO_Init+0x84>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	603b      	str	r3, [r7, #0]
 8002004:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002006:	bf00      	nop
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40023800 	.word	0x40023800

08002018 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800201c:	b672      	cpsid	i
}
 800201e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002020:	e7fe      	b.n	8002020 <Error_Handler+0x8>
	...

08002024 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	607b      	str	r3, [r7, #4]
 800202e:	4b10      	ldr	r3, [pc, #64]	; (8002070 <HAL_MspInit+0x4c>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	4a0f      	ldr	r2, [pc, #60]	; (8002070 <HAL_MspInit+0x4c>)
 8002034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002038:	6453      	str	r3, [r2, #68]	; 0x44
 800203a:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <HAL_MspInit+0x4c>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002042:	607b      	str	r3, [r7, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	603b      	str	r3, [r7, #0]
 800204a:	4b09      	ldr	r3, [pc, #36]	; (8002070 <HAL_MspInit+0x4c>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	4a08      	ldr	r2, [pc, #32]	; (8002070 <HAL_MspInit+0x4c>)
 8002050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002054:	6413      	str	r3, [r2, #64]	; 0x40
 8002056:	4b06      	ldr	r3, [pc, #24]	; (8002070 <HAL_MspInit+0x4c>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205e:	603b      	str	r3, [r7, #0]
 8002060:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002062:	2007      	movs	r0, #7
 8002064:	f000 f9fc 	bl	8002460 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002068:	bf00      	nop
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40023800 	.word	0x40023800

08002074 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08a      	sub	sp, #40	; 0x28
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207c:	f107 0314 	add.w	r3, r7, #20
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a19      	ldr	r2, [pc, #100]	; (80020f8 <HAL_I2C_MspInit+0x84>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d12c      	bne.n	80020f0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	4b18      	ldr	r3, [pc, #96]	; (80020fc <HAL_I2C_MspInit+0x88>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	4a17      	ldr	r2, [pc, #92]	; (80020fc <HAL_I2C_MspInit+0x88>)
 80020a0:	f043 0302 	orr.w	r3, r3, #2
 80020a4:	6313      	str	r3, [r2, #48]	; 0x30
 80020a6:	4b15      	ldr	r3, [pc, #84]	; (80020fc <HAL_I2C_MspInit+0x88>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80020b2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80020b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020b8:	2312      	movs	r3, #18
 80020ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c0:	2303      	movs	r3, #3
 80020c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020c4:	2304      	movs	r3, #4
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	4619      	mov	r1, r3
 80020ce:	480c      	ldr	r0, [pc, #48]	; (8002100 <HAL_I2C_MspInit+0x8c>)
 80020d0:	f000 f9fa 	bl	80024c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	4b08      	ldr	r3, [pc, #32]	; (80020fc <HAL_I2C_MspInit+0x88>)
 80020da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020dc:	4a07      	ldr	r2, [pc, #28]	; (80020fc <HAL_I2C_MspInit+0x88>)
 80020de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020e2:	6413      	str	r3, [r2, #64]	; 0x40
 80020e4:	4b05      	ldr	r3, [pc, #20]	; (80020fc <HAL_I2C_MspInit+0x88>)
 80020e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020f0:	bf00      	nop
 80020f2:	3728      	adds	r7, #40	; 0x28
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40005400 	.word	0x40005400
 80020fc:	40023800 	.word	0x40023800
 8002100:	40020400 	.word	0x40020400

08002104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002108:	e7fe      	b.n	8002108 <NMI_Handler+0x4>

0800210a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800210a:	b480      	push	{r7}
 800210c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800210e:	e7fe      	b.n	800210e <HardFault_Handler+0x4>

08002110 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002114:	e7fe      	b.n	8002114 <MemManage_Handler+0x4>

08002116 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002116:	b480      	push	{r7}
 8002118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800211a:	e7fe      	b.n	800211a <BusFault_Handler+0x4>

0800211c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002120:	e7fe      	b.n	8002120 <UsageFault_Handler+0x4>

08002122 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002122:	b480      	push	{r7}
 8002124:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002150:	f000 f890 	bl	8002274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002154:	bf00      	nop
 8002156:	bd80      	pop	{r7, pc}

08002158 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800215c:	4b06      	ldr	r3, [pc, #24]	; (8002178 <SystemInit+0x20>)
 800215e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002162:	4a05      	ldr	r2, [pc, #20]	; (8002178 <SystemInit+0x20>)
 8002164:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002168:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800217c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002180:	480d      	ldr	r0, [pc, #52]	; (80021b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002182:	490e      	ldr	r1, [pc, #56]	; (80021bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002184:	4a0e      	ldr	r2, [pc, #56]	; (80021c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002188:	e002      	b.n	8002190 <LoopCopyDataInit>

0800218a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800218a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800218c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800218e:	3304      	adds	r3, #4

08002190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002194:	d3f9      	bcc.n	800218a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002196:	4a0b      	ldr	r2, [pc, #44]	; (80021c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002198:	4c0b      	ldr	r4, [pc, #44]	; (80021c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800219a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800219c:	e001      	b.n	80021a2 <LoopFillZerobss>

0800219e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800219e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a0:	3204      	adds	r2, #4

080021a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a4:	d3fb      	bcc.n	800219e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021a6:	f7ff ffd7 	bl	8002158 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021aa:	f003 f881 	bl	80052b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ae:	f7ff fe37 	bl	8001e20 <main>
  bx  lr    
 80021b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80021b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021bc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80021c0:	080053a8 	.word	0x080053a8
  ldr r2, =_sbss
 80021c4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80021c8:	20000314 	.word	0x20000314

080021cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021cc:	e7fe      	b.n	80021cc <ADC_IRQHandler>
	...

080021d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021d4:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <HAL_Init+0x40>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a0d      	ldr	r2, [pc, #52]	; (8002210 <HAL_Init+0x40>)
 80021da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021e0:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <HAL_Init+0x40>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a0a      	ldr	r2, [pc, #40]	; (8002210 <HAL_Init+0x40>)
 80021e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021ec:	4b08      	ldr	r3, [pc, #32]	; (8002210 <HAL_Init+0x40>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a07      	ldr	r2, [pc, #28]	; (8002210 <HAL_Init+0x40>)
 80021f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f8:	2003      	movs	r0, #3
 80021fa:	f000 f931 	bl	8002460 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021fe:	2000      	movs	r0, #0
 8002200:	f000 f808 	bl	8002214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002204:	f7ff ff0e 	bl	8002024 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40023c00 	.word	0x40023c00

08002214 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800221c:	4b12      	ldr	r3, [pc, #72]	; (8002268 <HAL_InitTick+0x54>)
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	4b12      	ldr	r3, [pc, #72]	; (800226c <HAL_InitTick+0x58>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	4619      	mov	r1, r3
 8002226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800222a:	fbb3 f3f1 	udiv	r3, r3, r1
 800222e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002232:	4618      	mov	r0, r3
 8002234:	f000 f93b 	bl	80024ae <HAL_SYSTICK_Config>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e00e      	b.n	8002260 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b0f      	cmp	r3, #15
 8002246:	d80a      	bhi.n	800225e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002248:	2200      	movs	r2, #0
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	f04f 30ff 	mov.w	r0, #4294967295
 8002250:	f000 f911 	bl	8002476 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002254:	4a06      	ldr	r2, [pc, #24]	; (8002270 <HAL_InitTick+0x5c>)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	e000      	b.n	8002260 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
}
 8002260:	4618      	mov	r0, r3
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20000008 	.word	0x20000008
 800226c:	20000010 	.word	0x20000010
 8002270:	2000000c 	.word	0x2000000c

08002274 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <HAL_IncTick+0x20>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	461a      	mov	r2, r3
 800227e:	4b06      	ldr	r3, [pc, #24]	; (8002298 <HAL_IncTick+0x24>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4413      	add	r3, r2
 8002284:	4a04      	ldr	r2, [pc, #16]	; (8002298 <HAL_IncTick+0x24>)
 8002286:	6013      	str	r3, [r2, #0]
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	20000010 	.word	0x20000010
 8002298:	200001d8 	.word	0x200001d8

0800229c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return uwTick;
 80022a0:	4b03      	ldr	r3, [pc, #12]	; (80022b0 <HAL_GetTick+0x14>)
 80022a2:	681b      	ldr	r3, [r3, #0]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	200001d8 	.word	0x200001d8

080022b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022bc:	f7ff ffee 	bl	800229c <HAL_GetTick>
 80022c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022cc:	d005      	beq.n	80022da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ce:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <HAL_Delay+0x44>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	461a      	mov	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4413      	add	r3, r2
 80022d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022da:	bf00      	nop
 80022dc:	f7ff ffde 	bl	800229c <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d8f7      	bhi.n	80022dc <HAL_Delay+0x28>
  {
  }
}
 80022ec:	bf00      	nop
 80022ee:	bf00      	nop
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000010 	.word	0x20000010

080022fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800230c:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <__NVIC_SetPriorityGrouping+0x44>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002318:	4013      	ands	r3, r2
 800231a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002324:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800232c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800232e:	4a04      	ldr	r2, [pc, #16]	; (8002340 <__NVIC_SetPriorityGrouping+0x44>)
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	60d3      	str	r3, [r2, #12]
}
 8002334:	bf00      	nop
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002348:	4b04      	ldr	r3, [pc, #16]	; (800235c <__NVIC_GetPriorityGrouping+0x18>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	0a1b      	lsrs	r3, r3, #8
 800234e:	f003 0307 	and.w	r3, r3, #7
}
 8002352:	4618      	mov	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	6039      	str	r1, [r7, #0]
 800236a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800236c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002370:	2b00      	cmp	r3, #0
 8002372:	db0a      	blt.n	800238a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	b2da      	uxtb	r2, r3
 8002378:	490c      	ldr	r1, [pc, #48]	; (80023ac <__NVIC_SetPriority+0x4c>)
 800237a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237e:	0112      	lsls	r2, r2, #4
 8002380:	b2d2      	uxtb	r2, r2
 8002382:	440b      	add	r3, r1
 8002384:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002388:	e00a      	b.n	80023a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	b2da      	uxtb	r2, r3
 800238e:	4908      	ldr	r1, [pc, #32]	; (80023b0 <__NVIC_SetPriority+0x50>)
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	3b04      	subs	r3, #4
 8002398:	0112      	lsls	r2, r2, #4
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	440b      	add	r3, r1
 800239e:	761a      	strb	r2, [r3, #24]
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	e000e100 	.word	0xe000e100
 80023b0:	e000ed00 	.word	0xe000ed00

080023b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b089      	sub	sp, #36	; 0x24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f1c3 0307 	rsb	r3, r3, #7
 80023ce:	2b04      	cmp	r3, #4
 80023d0:	bf28      	it	cs
 80023d2:	2304      	movcs	r3, #4
 80023d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	3304      	adds	r3, #4
 80023da:	2b06      	cmp	r3, #6
 80023dc:	d902      	bls.n	80023e4 <NVIC_EncodePriority+0x30>
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	3b03      	subs	r3, #3
 80023e2:	e000      	b.n	80023e6 <NVIC_EncodePriority+0x32>
 80023e4:	2300      	movs	r3, #0
 80023e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e8:	f04f 32ff 	mov.w	r2, #4294967295
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	43da      	mvns	r2, r3
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	401a      	ands	r2, r3
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	fa01 f303 	lsl.w	r3, r1, r3
 8002406:	43d9      	mvns	r1, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800240c:	4313      	orrs	r3, r2
         );
}
 800240e:	4618      	mov	r0, r3
 8002410:	3724      	adds	r7, #36	; 0x24
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
	...

0800241c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3b01      	subs	r3, #1
 8002428:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800242c:	d301      	bcc.n	8002432 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800242e:	2301      	movs	r3, #1
 8002430:	e00f      	b.n	8002452 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002432:	4a0a      	ldr	r2, [pc, #40]	; (800245c <SysTick_Config+0x40>)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3b01      	subs	r3, #1
 8002438:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800243a:	210f      	movs	r1, #15
 800243c:	f04f 30ff 	mov.w	r0, #4294967295
 8002440:	f7ff ff8e 	bl	8002360 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002444:	4b05      	ldr	r3, [pc, #20]	; (800245c <SysTick_Config+0x40>)
 8002446:	2200      	movs	r2, #0
 8002448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800244a:	4b04      	ldr	r3, [pc, #16]	; (800245c <SysTick_Config+0x40>)
 800244c:	2207      	movs	r2, #7
 800244e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	e000e010 	.word	0xe000e010

08002460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7ff ff47 	bl	80022fc <__NVIC_SetPriorityGrouping>
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002476:	b580      	push	{r7, lr}
 8002478:	b086      	sub	sp, #24
 800247a:	af00      	add	r7, sp, #0
 800247c:	4603      	mov	r3, r0
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607a      	str	r2, [r7, #4]
 8002482:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002488:	f7ff ff5c 	bl	8002344 <__NVIC_GetPriorityGrouping>
 800248c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	68b9      	ldr	r1, [r7, #8]
 8002492:	6978      	ldr	r0, [r7, #20]
 8002494:	f7ff ff8e 	bl	80023b4 <NVIC_EncodePriority>
 8002498:	4602      	mov	r2, r0
 800249a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800249e:	4611      	mov	r1, r2
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff ff5d 	bl	8002360 <__NVIC_SetPriority>
}
 80024a6:	bf00      	nop
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b082      	sub	sp, #8
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7ff ffb0 	bl	800241c <SysTick_Config>
 80024bc:	4603      	mov	r3, r0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b089      	sub	sp, #36	; 0x24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024da:	2300      	movs	r3, #0
 80024dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024de:	2300      	movs	r3, #0
 80024e0:	61fb      	str	r3, [r7, #28]
 80024e2:	e16b      	b.n	80027bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024e4:	2201      	movs	r2, #1
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	4013      	ands	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	f040 815a 	bne.w	80027b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	2b01      	cmp	r3, #1
 800250c:	d005      	beq.n	800251a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002516:	2b02      	cmp	r3, #2
 8002518:	d130      	bne.n	800257c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	2203      	movs	r2, #3
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43db      	mvns	r3, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4013      	ands	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	68da      	ldr	r2, [r3, #12]
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4313      	orrs	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002550:	2201      	movs	r2, #1
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	091b      	lsrs	r3, r3, #4
 8002566:	f003 0201 	and.w	r2, r3, #1
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	2b03      	cmp	r3, #3
 8002586:	d017      	beq.n	80025b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	2203      	movs	r2, #3
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 0303 	and.w	r3, r3, #3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d123      	bne.n	800260c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	08da      	lsrs	r2, r3, #3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3208      	adds	r2, #8
 80025cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	220f      	movs	r2, #15
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	691a      	ldr	r2, [r3, #16]
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	08da      	lsrs	r2, r3, #3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3208      	adds	r2, #8
 8002606:	69b9      	ldr	r1, [r7, #24]
 8002608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	2203      	movs	r2, #3
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4013      	ands	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 0203 	and.w	r2, r3, #3
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4313      	orrs	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 80b4 	beq.w	80027b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	4b60      	ldr	r3, [pc, #384]	; (80027d4 <HAL_GPIO_Init+0x30c>)
 8002654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002656:	4a5f      	ldr	r2, [pc, #380]	; (80027d4 <HAL_GPIO_Init+0x30c>)
 8002658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800265c:	6453      	str	r3, [r2, #68]	; 0x44
 800265e:	4b5d      	ldr	r3, [pc, #372]	; (80027d4 <HAL_GPIO_Init+0x30c>)
 8002660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800266a:	4a5b      	ldr	r2, [pc, #364]	; (80027d8 <HAL_GPIO_Init+0x310>)
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	089b      	lsrs	r3, r3, #2
 8002670:	3302      	adds	r3, #2
 8002672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002676:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	220f      	movs	r2, #15
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43db      	mvns	r3, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4013      	ands	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a52      	ldr	r2, [pc, #328]	; (80027dc <HAL_GPIO_Init+0x314>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d02b      	beq.n	80026ee <HAL_GPIO_Init+0x226>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a51      	ldr	r2, [pc, #324]	; (80027e0 <HAL_GPIO_Init+0x318>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d025      	beq.n	80026ea <HAL_GPIO_Init+0x222>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a50      	ldr	r2, [pc, #320]	; (80027e4 <HAL_GPIO_Init+0x31c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d01f      	beq.n	80026e6 <HAL_GPIO_Init+0x21e>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a4f      	ldr	r2, [pc, #316]	; (80027e8 <HAL_GPIO_Init+0x320>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d019      	beq.n	80026e2 <HAL_GPIO_Init+0x21a>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a4e      	ldr	r2, [pc, #312]	; (80027ec <HAL_GPIO_Init+0x324>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d013      	beq.n	80026de <HAL_GPIO_Init+0x216>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a4d      	ldr	r2, [pc, #308]	; (80027f0 <HAL_GPIO_Init+0x328>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d00d      	beq.n	80026da <HAL_GPIO_Init+0x212>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a4c      	ldr	r2, [pc, #304]	; (80027f4 <HAL_GPIO_Init+0x32c>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d007      	beq.n	80026d6 <HAL_GPIO_Init+0x20e>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a4b      	ldr	r2, [pc, #300]	; (80027f8 <HAL_GPIO_Init+0x330>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d101      	bne.n	80026d2 <HAL_GPIO_Init+0x20a>
 80026ce:	2307      	movs	r3, #7
 80026d0:	e00e      	b.n	80026f0 <HAL_GPIO_Init+0x228>
 80026d2:	2308      	movs	r3, #8
 80026d4:	e00c      	b.n	80026f0 <HAL_GPIO_Init+0x228>
 80026d6:	2306      	movs	r3, #6
 80026d8:	e00a      	b.n	80026f0 <HAL_GPIO_Init+0x228>
 80026da:	2305      	movs	r3, #5
 80026dc:	e008      	b.n	80026f0 <HAL_GPIO_Init+0x228>
 80026de:	2304      	movs	r3, #4
 80026e0:	e006      	b.n	80026f0 <HAL_GPIO_Init+0x228>
 80026e2:	2303      	movs	r3, #3
 80026e4:	e004      	b.n	80026f0 <HAL_GPIO_Init+0x228>
 80026e6:	2302      	movs	r3, #2
 80026e8:	e002      	b.n	80026f0 <HAL_GPIO_Init+0x228>
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <HAL_GPIO_Init+0x228>
 80026ee:	2300      	movs	r3, #0
 80026f0:	69fa      	ldr	r2, [r7, #28]
 80026f2:	f002 0203 	and.w	r2, r2, #3
 80026f6:	0092      	lsls	r2, r2, #2
 80026f8:	4093      	lsls	r3, r2
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002700:	4935      	ldr	r1, [pc, #212]	; (80027d8 <HAL_GPIO_Init+0x310>)
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	089b      	lsrs	r3, r3, #2
 8002706:	3302      	adds	r3, #2
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800270e:	4b3b      	ldr	r3, [pc, #236]	; (80027fc <HAL_GPIO_Init+0x334>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	43db      	mvns	r3, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4013      	ands	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	4313      	orrs	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002732:	4a32      	ldr	r2, [pc, #200]	; (80027fc <HAL_GPIO_Init+0x334>)
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002738:	4b30      	ldr	r3, [pc, #192]	; (80027fc <HAL_GPIO_Init+0x334>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	43db      	mvns	r3, r3
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4013      	ands	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d003      	beq.n	800275c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	4313      	orrs	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800275c:	4a27      	ldr	r2, [pc, #156]	; (80027fc <HAL_GPIO_Init+0x334>)
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002762:	4b26      	ldr	r3, [pc, #152]	; (80027fc <HAL_GPIO_Init+0x334>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	43db      	mvns	r3, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4013      	ands	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	4313      	orrs	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002786:	4a1d      	ldr	r2, [pc, #116]	; (80027fc <HAL_GPIO_Init+0x334>)
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800278c:	4b1b      	ldr	r3, [pc, #108]	; (80027fc <HAL_GPIO_Init+0x334>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	43db      	mvns	r3, r3
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4013      	ands	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d003      	beq.n	80027b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027b0:	4a12      	ldr	r2, [pc, #72]	; (80027fc <HAL_GPIO_Init+0x334>)
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	3301      	adds	r3, #1
 80027ba:	61fb      	str	r3, [r7, #28]
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	2b0f      	cmp	r3, #15
 80027c0:	f67f ae90 	bls.w	80024e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027c4:	bf00      	nop
 80027c6:	bf00      	nop
 80027c8:	3724      	adds	r7, #36	; 0x24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40013800 	.word	0x40013800
 80027dc:	40020000 	.word	0x40020000
 80027e0:	40020400 	.word	0x40020400
 80027e4:	40020800 	.word	0x40020800
 80027e8:	40020c00 	.word	0x40020c00
 80027ec:	40021000 	.word	0x40021000
 80027f0:	40021400 	.word	0x40021400
 80027f4:	40021800 	.word	0x40021800
 80027f8:	40021c00 	.word	0x40021c00
 80027fc:	40013c00 	.word	0x40013c00

08002800 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e12b      	b.n	8002a6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d106      	bne.n	800282c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7ff fc24 	bl	8002074 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2224      	movs	r2, #36	; 0x24
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 0201 	bic.w	r2, r2, #1
 8002842:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002852:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002862:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002864:	f001 fbfc 	bl	8004060 <HAL_RCC_GetPCLK1Freq>
 8002868:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	4a81      	ldr	r2, [pc, #516]	; (8002a74 <HAL_I2C_Init+0x274>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d807      	bhi.n	8002884 <HAL_I2C_Init+0x84>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	4a80      	ldr	r2, [pc, #512]	; (8002a78 <HAL_I2C_Init+0x278>)
 8002878:	4293      	cmp	r3, r2
 800287a:	bf94      	ite	ls
 800287c:	2301      	movls	r3, #1
 800287e:	2300      	movhi	r3, #0
 8002880:	b2db      	uxtb	r3, r3
 8002882:	e006      	b.n	8002892 <HAL_I2C_Init+0x92>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4a7d      	ldr	r2, [pc, #500]	; (8002a7c <HAL_I2C_Init+0x27c>)
 8002888:	4293      	cmp	r3, r2
 800288a:	bf94      	ite	ls
 800288c:	2301      	movls	r3, #1
 800288e:	2300      	movhi	r3, #0
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e0e7      	b.n	8002a6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	4a78      	ldr	r2, [pc, #480]	; (8002a80 <HAL_I2C_Init+0x280>)
 800289e:	fba2 2303 	umull	r2, r3, r2, r3
 80028a2:	0c9b      	lsrs	r3, r3, #18
 80028a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	4a6a      	ldr	r2, [pc, #424]	; (8002a74 <HAL_I2C_Init+0x274>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d802      	bhi.n	80028d4 <HAL_I2C_Init+0xd4>
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	3301      	adds	r3, #1
 80028d2:	e009      	b.n	80028e8 <HAL_I2C_Init+0xe8>
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028da:	fb02 f303 	mul.w	r3, r2, r3
 80028de:	4a69      	ldr	r2, [pc, #420]	; (8002a84 <HAL_I2C_Init+0x284>)
 80028e0:	fba2 2303 	umull	r2, r3, r2, r3
 80028e4:	099b      	lsrs	r3, r3, #6
 80028e6:	3301      	adds	r3, #1
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6812      	ldr	r2, [r2, #0]
 80028ec:	430b      	orrs	r3, r1
 80028ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	495c      	ldr	r1, [pc, #368]	; (8002a74 <HAL_I2C_Init+0x274>)
 8002904:	428b      	cmp	r3, r1
 8002906:	d819      	bhi.n	800293c <HAL_I2C_Init+0x13c>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	1e59      	subs	r1, r3, #1
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	fbb1 f3f3 	udiv	r3, r1, r3
 8002916:	1c59      	adds	r1, r3, #1
 8002918:	f640 73fc 	movw	r3, #4092	; 0xffc
 800291c:	400b      	ands	r3, r1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00a      	beq.n	8002938 <HAL_I2C_Init+0x138>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	1e59      	subs	r1, r3, #1
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002930:	3301      	adds	r3, #1
 8002932:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002936:	e051      	b.n	80029dc <HAL_I2C_Init+0x1dc>
 8002938:	2304      	movs	r3, #4
 800293a:	e04f      	b.n	80029dc <HAL_I2C_Init+0x1dc>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d111      	bne.n	8002968 <HAL_I2C_Init+0x168>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	1e58      	subs	r0, r3, #1
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6859      	ldr	r1, [r3, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	440b      	add	r3, r1
 8002952:	fbb0 f3f3 	udiv	r3, r0, r3
 8002956:	3301      	adds	r3, #1
 8002958:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800295c:	2b00      	cmp	r3, #0
 800295e:	bf0c      	ite	eq
 8002960:	2301      	moveq	r3, #1
 8002962:	2300      	movne	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	e012      	b.n	800298e <HAL_I2C_Init+0x18e>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	1e58      	subs	r0, r3, #1
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6859      	ldr	r1, [r3, #4]
 8002970:	460b      	mov	r3, r1
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	0099      	lsls	r1, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	fbb0 f3f3 	udiv	r3, r0, r3
 800297e:	3301      	adds	r3, #1
 8002980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002984:	2b00      	cmp	r3, #0
 8002986:	bf0c      	ite	eq
 8002988:	2301      	moveq	r3, #1
 800298a:	2300      	movne	r3, #0
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <HAL_I2C_Init+0x196>
 8002992:	2301      	movs	r3, #1
 8002994:	e022      	b.n	80029dc <HAL_I2C_Init+0x1dc>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10e      	bne.n	80029bc <HAL_I2C_Init+0x1bc>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	1e58      	subs	r0, r3, #1
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6859      	ldr	r1, [r3, #4]
 80029a6:	460b      	mov	r3, r1
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	440b      	add	r3, r1
 80029ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80029b0:	3301      	adds	r3, #1
 80029b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029ba:	e00f      	b.n	80029dc <HAL_I2C_Init+0x1dc>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	1e58      	subs	r0, r3, #1
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6859      	ldr	r1, [r3, #4]
 80029c4:	460b      	mov	r3, r1
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	0099      	lsls	r1, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80029d2:	3301      	adds	r3, #1
 80029d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	6809      	ldr	r1, [r1, #0]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69da      	ldr	r2, [r3, #28]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6911      	ldr	r1, [r2, #16]
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	68d2      	ldr	r2, [r2, #12]
 8002a16:	4311      	orrs	r1, r2
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6812      	ldr	r2, [r2, #0]
 8002a1c:	430b      	orrs	r3, r1
 8002a1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	695a      	ldr	r2, [r3, #20]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0201 	orr.w	r2, r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2220      	movs	r2, #32
 8002a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	000186a0 	.word	0x000186a0
 8002a78:	001e847f 	.word	0x001e847f
 8002a7c:	003d08ff 	.word	0x003d08ff
 8002a80:	431bde83 	.word	0x431bde83
 8002a84:	10624dd3 	.word	0x10624dd3

08002a88 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b088      	sub	sp, #32
 8002a8c:	af02      	add	r7, sp, #8
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	4608      	mov	r0, r1
 8002a92:	4611      	mov	r1, r2
 8002a94:	461a      	mov	r2, r3
 8002a96:	4603      	mov	r3, r0
 8002a98:	817b      	strh	r3, [r7, #10]
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	813b      	strh	r3, [r7, #8]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002aa2:	f7ff fbfb 	bl	800229c <HAL_GetTick>
 8002aa6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b20      	cmp	r3, #32
 8002ab2:	f040 80d9 	bne.w	8002c68 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	2319      	movs	r3, #25
 8002abc:	2201      	movs	r2, #1
 8002abe:	496d      	ldr	r1, [pc, #436]	; (8002c74 <HAL_I2C_Mem_Write+0x1ec>)
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 fc7f 	bl	80033c4 <I2C_WaitOnFlagUntilTimeout>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002acc:	2302      	movs	r3, #2
 8002ace:	e0cc      	b.n	8002c6a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d101      	bne.n	8002ade <HAL_I2C_Mem_Write+0x56>
 8002ada:	2302      	movs	r3, #2
 8002adc:	e0c5      	b.n	8002c6a <HAL_I2C_Mem_Write+0x1e2>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d007      	beq.n	8002b04 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0201 	orr.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2221      	movs	r2, #33	; 0x21
 8002b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2240      	movs	r2, #64	; 0x40
 8002b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6a3a      	ldr	r2, [r7, #32]
 8002b2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4a4d      	ldr	r2, [pc, #308]	; (8002c78 <HAL_I2C_Mem_Write+0x1f0>)
 8002b44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b46:	88f8      	ldrh	r0, [r7, #6]
 8002b48:	893a      	ldrh	r2, [r7, #8]
 8002b4a:	8979      	ldrh	r1, [r7, #10]
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	9301      	str	r3, [sp, #4]
 8002b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	4603      	mov	r3, r0
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 fab6 	bl	80030c8 <I2C_RequestMemoryWrite>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d052      	beq.n	8002c08 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e081      	b.n	8002c6a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f000 fd00 	bl	8003570 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00d      	beq.n	8002b92 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d107      	bne.n	8002b8e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e06b      	b.n	8002c6a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b96:	781a      	ldrb	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	1c5a      	adds	r2, r3, #1
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bac:	3b01      	subs	r3, #1
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d11b      	bne.n	8002c08 <HAL_I2C_Mem_Write+0x180>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d017      	beq.n	8002c08 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bdc:	781a      	ldrb	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	1c5a      	adds	r2, r3, #1
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	3b01      	subs	r3, #1
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1aa      	bne.n	8002b66 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f000 fcec 	bl	80035f2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00d      	beq.n	8002c3c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	2b04      	cmp	r3, #4
 8002c26:	d107      	bne.n	8002c38 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c36:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e016      	b.n	8002c6a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c64:	2300      	movs	r3, #0
 8002c66:	e000      	b.n	8002c6a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002c68:	2302      	movs	r3, #2
  }
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3718      	adds	r7, #24
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	00100002 	.word	0x00100002
 8002c78:	ffff0000 	.word	0xffff0000

08002c7c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b08c      	sub	sp, #48	; 0x30
 8002c80:	af02      	add	r7, sp, #8
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	4608      	mov	r0, r1
 8002c86:	4611      	mov	r1, r2
 8002c88:	461a      	mov	r2, r3
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	817b      	strh	r3, [r7, #10]
 8002c8e:	460b      	mov	r3, r1
 8002c90:	813b      	strh	r3, [r7, #8]
 8002c92:	4613      	mov	r3, r2
 8002c94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c96:	f7ff fb01 	bl	800229c <HAL_GetTick>
 8002c9a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b20      	cmp	r3, #32
 8002ca6:	f040 8208 	bne.w	80030ba <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	2319      	movs	r3, #25
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	497b      	ldr	r1, [pc, #492]	; (8002ea0 <HAL_I2C_Mem_Read+0x224>)
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 fb85 	bl	80033c4 <I2C_WaitOnFlagUntilTimeout>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	e1fb      	b.n	80030bc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d101      	bne.n	8002cd2 <HAL_I2C_Mem_Read+0x56>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	e1f4      	b.n	80030bc <HAL_I2C_Mem_Read+0x440>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d007      	beq.n	8002cf8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f042 0201 	orr.w	r2, r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2222      	movs	r2, #34	; 0x22
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2240      	movs	r2, #64	; 0x40
 8002d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002d28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4a5b      	ldr	r2, [pc, #364]	; (8002ea4 <HAL_I2C_Mem_Read+0x228>)
 8002d38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d3a:	88f8      	ldrh	r0, [r7, #6]
 8002d3c:	893a      	ldrh	r2, [r7, #8]
 8002d3e:	8979      	ldrh	r1, [r7, #10]
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	9301      	str	r3, [sp, #4]
 8002d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	4603      	mov	r3, r0
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f000 fa52 	bl	80031f4 <I2C_RequestMemoryRead>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e1b0      	b.n	80030bc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d113      	bne.n	8002d8a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d62:	2300      	movs	r3, #0
 8002d64:	623b      	str	r3, [r7, #32]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	623b      	str	r3, [r7, #32]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	623b      	str	r3, [r7, #32]
 8002d76:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	e184      	b.n	8003094 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d11b      	bne.n	8002dca <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002da0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002da2:	2300      	movs	r3, #0
 8002da4:	61fb      	str	r3, [r7, #28]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	61fb      	str	r3, [r7, #28]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	61fb      	str	r3, [r7, #28]
 8002db6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	e164      	b.n	8003094 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d11b      	bne.n	8002e0a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002de0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002df0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002df2:	2300      	movs	r3, #0
 8002df4:	61bb      	str	r3, [r7, #24]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	61bb      	str	r3, [r7, #24]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	61bb      	str	r3, [r7, #24]
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	e144      	b.n	8003094 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	617b      	str	r3, [r7, #20]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	617b      	str	r3, [r7, #20]
 8002e1e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002e20:	e138      	b.n	8003094 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e26:	2b03      	cmp	r3, #3
 8002e28:	f200 80f1 	bhi.w	800300e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d123      	bne.n	8002e7c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 fc1b 	bl	8003674 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e139      	b.n	80030bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	691a      	ldr	r2, [r3, #16]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	b2d2      	uxtb	r2, r2
 8002e54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5a:	1c5a      	adds	r2, r3, #1
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e64:	3b01      	subs	r3, #1
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e7a:	e10b      	b.n	8003094 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d14e      	bne.n	8002f22 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	4906      	ldr	r1, [pc, #24]	; (8002ea8 <HAL_I2C_Mem_Read+0x22c>)
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 fa98 	bl	80033c4 <I2C_WaitOnFlagUntilTimeout>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d008      	beq.n	8002eac <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e10e      	b.n	80030bc <HAL_I2C_Mem_Read+0x440>
 8002e9e:	bf00      	nop
 8002ea0:	00100002 	.word	0x00100002
 8002ea4:	ffff0000 	.word	0xffff0000
 8002ea8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691a      	ldr	r2, [r3, #16]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	691a      	ldr	r2, [r3, #16]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	1c5a      	adds	r2, r3, #1
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f20:	e0b8      	b.n	8003094 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f28:	2200      	movs	r2, #0
 8002f2a:	4966      	ldr	r1, [pc, #408]	; (80030c4 <HAL_I2C_Mem_Read+0x448>)
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 fa49 	bl	80033c4 <I2C_WaitOnFlagUntilTimeout>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e0bf      	b.n	80030bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	691a      	ldr	r2, [r3, #16]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	1c5a      	adds	r2, r3, #1
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f84:	2200      	movs	r2, #0
 8002f86:	494f      	ldr	r1, [pc, #316]	; (80030c4 <HAL_I2C_Mem_Read+0x448>)
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f000 fa1b 	bl	80033c4 <I2C_WaitOnFlagUntilTimeout>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e091      	b.n	80030bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fa6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	691a      	ldr	r2, [r3, #16]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	691a      	ldr	r2, [r3, #16]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	b2d2      	uxtb	r2, r2
 8002fe6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	1c5a      	adds	r2, r3, #1
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003002:	b29b      	uxth	r3, r3
 8003004:	3b01      	subs	r3, #1
 8003006:	b29a      	uxth	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800300c:	e042      	b.n	8003094 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800300e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003010:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 fb2e 	bl	8003674 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e04c      	b.n	80030bc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	691a      	ldr	r2, [r3, #16]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302c:	b2d2      	uxtb	r2, r2
 800302e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	1c5a      	adds	r2, r3, #1
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303e:	3b01      	subs	r3, #1
 8003040:	b29a      	uxth	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304a:	b29b      	uxth	r3, r3
 800304c:	3b01      	subs	r3, #1
 800304e:	b29a      	uxth	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	f003 0304 	and.w	r3, r3, #4
 800305e:	2b04      	cmp	r3, #4
 8003060:	d118      	bne.n	8003094 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	691a      	ldr	r2, [r3, #16]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	b2d2      	uxtb	r2, r2
 800306e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	1c5a      	adds	r2, r3, #1
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307e:	3b01      	subs	r3, #1
 8003080:	b29a      	uxth	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800308a:	b29b      	uxth	r3, r3
 800308c:	3b01      	subs	r3, #1
 800308e:	b29a      	uxth	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003098:	2b00      	cmp	r3, #0
 800309a:	f47f aec2 	bne.w	8002e22 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2220      	movs	r2, #32
 80030a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030b6:	2300      	movs	r3, #0
 80030b8:	e000      	b.n	80030bc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80030ba:	2302      	movs	r3, #2
  }
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3728      	adds	r7, #40	; 0x28
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	00010004 	.word	0x00010004

080030c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b088      	sub	sp, #32
 80030cc:	af02      	add	r7, sp, #8
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	4608      	mov	r0, r1
 80030d2:	4611      	mov	r1, r2
 80030d4:	461a      	mov	r2, r3
 80030d6:	4603      	mov	r3, r0
 80030d8:	817b      	strh	r3, [r7, #10]
 80030da:	460b      	mov	r3, r1
 80030dc:	813b      	strh	r3, [r7, #8]
 80030de:	4613      	mov	r3, r2
 80030e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	6a3b      	ldr	r3, [r7, #32]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 f960 	bl	80033c4 <I2C_WaitOnFlagUntilTimeout>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00d      	beq.n	8003126 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003114:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003118:	d103      	bne.n	8003122 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003120:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e05f      	b.n	80031e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003126:	897b      	ldrh	r3, [r7, #10]
 8003128:	b2db      	uxtb	r3, r3
 800312a:	461a      	mov	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003134:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	6a3a      	ldr	r2, [r7, #32]
 800313a:	492d      	ldr	r1, [pc, #180]	; (80031f0 <I2C_RequestMemoryWrite+0x128>)
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f000 f998 	bl	8003472 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e04c      	b.n	80031e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	617b      	str	r3, [r7, #20]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	617b      	str	r3, [r7, #20]
 8003160:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003164:	6a39      	ldr	r1, [r7, #32]
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 fa02 	bl	8003570 <I2C_WaitOnTXEFlagUntilTimeout>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00d      	beq.n	800318e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	2b04      	cmp	r3, #4
 8003178:	d107      	bne.n	800318a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003188:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e02b      	b.n	80031e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800318e:	88fb      	ldrh	r3, [r7, #6]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d105      	bne.n	80031a0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003194:	893b      	ldrh	r3, [r7, #8]
 8003196:	b2da      	uxtb	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	611a      	str	r2, [r3, #16]
 800319e:	e021      	b.n	80031e4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80031a0:	893b      	ldrh	r3, [r7, #8]
 80031a2:	0a1b      	lsrs	r3, r3, #8
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b0:	6a39      	ldr	r1, [r7, #32]
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 f9dc 	bl	8003570 <I2C_WaitOnTXEFlagUntilTimeout>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00d      	beq.n	80031da <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	d107      	bne.n	80031d6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e005      	b.n	80031e6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031da:	893b      	ldrh	r3, [r7, #8]
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	00010002 	.word	0x00010002

080031f4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b088      	sub	sp, #32
 80031f8:	af02      	add	r7, sp, #8
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	4608      	mov	r0, r1
 80031fe:	4611      	mov	r1, r2
 8003200:	461a      	mov	r2, r3
 8003202:	4603      	mov	r3, r0
 8003204:	817b      	strh	r3, [r7, #10]
 8003206:	460b      	mov	r3, r1
 8003208:	813b      	strh	r3, [r7, #8]
 800320a:	4613      	mov	r3, r2
 800320c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800321c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800322c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	2200      	movs	r2, #0
 8003236:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 f8c2 	bl	80033c4 <I2C_WaitOnFlagUntilTimeout>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00d      	beq.n	8003262 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003250:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003254:	d103      	bne.n	800325e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f44f 7200 	mov.w	r2, #512	; 0x200
 800325c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e0aa      	b.n	80033b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003262:	897b      	ldrh	r3, [r7, #10]
 8003264:	b2db      	uxtb	r3, r3
 8003266:	461a      	mov	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003270:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	6a3a      	ldr	r2, [r7, #32]
 8003276:	4952      	ldr	r1, [pc, #328]	; (80033c0 <I2C_RequestMemoryRead+0x1cc>)
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f000 f8fa 	bl	8003472 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e097      	b.n	80033b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	617b      	str	r3, [r7, #20]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800329e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a0:	6a39      	ldr	r1, [r7, #32]
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f000 f964 	bl	8003570 <I2C_WaitOnTXEFlagUntilTimeout>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00d      	beq.n	80032ca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d107      	bne.n	80032c6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e076      	b.n	80033b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032ca:	88fb      	ldrh	r3, [r7, #6]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d105      	bne.n	80032dc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032d0:	893b      	ldrh	r3, [r7, #8]
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	611a      	str	r2, [r3, #16]
 80032da:	e021      	b.n	8003320 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80032dc:	893b      	ldrh	r3, [r7, #8]
 80032de:	0a1b      	lsrs	r3, r3, #8
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ec:	6a39      	ldr	r1, [r7, #32]
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 f93e 	bl	8003570 <I2C_WaitOnTXEFlagUntilTimeout>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00d      	beq.n	8003316 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d107      	bne.n	8003312 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003310:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e050      	b.n	80033b8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003316:	893b      	ldrh	r3, [r7, #8]
 8003318:	b2da      	uxtb	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003322:	6a39      	ldr	r1, [r7, #32]
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 f923 	bl	8003570 <I2C_WaitOnTXEFlagUntilTimeout>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00d      	beq.n	800334c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003334:	2b04      	cmp	r3, #4
 8003336:	d107      	bne.n	8003348 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003346:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e035      	b.n	80033b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800335a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800335c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	6a3b      	ldr	r3, [r7, #32]
 8003362:	2200      	movs	r2, #0
 8003364:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f000 f82b 	bl	80033c4 <I2C_WaitOnFlagUntilTimeout>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00d      	beq.n	8003390 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003382:	d103      	bne.n	800338c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f44f 7200 	mov.w	r2, #512	; 0x200
 800338a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e013      	b.n	80033b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003390:	897b      	ldrh	r3, [r7, #10]
 8003392:	b2db      	uxtb	r3, r3
 8003394:	f043 0301 	orr.w	r3, r3, #1
 8003398:	b2da      	uxtb	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	6a3a      	ldr	r2, [r7, #32]
 80033a4:	4906      	ldr	r1, [pc, #24]	; (80033c0 <I2C_RequestMemoryRead+0x1cc>)
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 f863 	bl	8003472 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e000      	b.n	80033b8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	00010002 	.word	0x00010002

080033c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	603b      	str	r3, [r7, #0]
 80033d0:	4613      	mov	r3, r2
 80033d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033d4:	e025      	b.n	8003422 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033dc:	d021      	beq.n	8003422 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033de:	f7fe ff5d 	bl	800229c <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d302      	bcc.n	80033f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d116      	bne.n	8003422 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2220      	movs	r2, #32
 80033fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	f043 0220 	orr.w	r2, r3, #32
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e023      	b.n	800346a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	0c1b      	lsrs	r3, r3, #16
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b01      	cmp	r3, #1
 800342a:	d10d      	bne.n	8003448 <I2C_WaitOnFlagUntilTimeout+0x84>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	43da      	mvns	r2, r3
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	4013      	ands	r3, r2
 8003438:	b29b      	uxth	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	bf0c      	ite	eq
 800343e:	2301      	moveq	r3, #1
 8003440:	2300      	movne	r3, #0
 8003442:	b2db      	uxtb	r3, r3
 8003444:	461a      	mov	r2, r3
 8003446:	e00c      	b.n	8003462 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	43da      	mvns	r2, r3
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	4013      	ands	r3, r2
 8003454:	b29b      	uxth	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	bf0c      	ite	eq
 800345a:	2301      	moveq	r3, #1
 800345c:	2300      	movne	r3, #0
 800345e:	b2db      	uxtb	r3, r3
 8003460:	461a      	mov	r2, r3
 8003462:	79fb      	ldrb	r3, [r7, #7]
 8003464:	429a      	cmp	r2, r3
 8003466:	d0b6      	beq.n	80033d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b084      	sub	sp, #16
 8003476:	af00      	add	r7, sp, #0
 8003478:	60f8      	str	r0, [r7, #12]
 800347a:	60b9      	str	r1, [r7, #8]
 800347c:	607a      	str	r2, [r7, #4]
 800347e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003480:	e051      	b.n	8003526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003490:	d123      	bne.n	80034da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2220      	movs	r2, #32
 80034b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	f043 0204 	orr.w	r2, r3, #4
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e046      	b.n	8003568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e0:	d021      	beq.n	8003526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e2:	f7fe fedb 	bl	800229c <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d302      	bcc.n	80034f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d116      	bne.n	8003526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2220      	movs	r2, #32
 8003502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	f043 0220 	orr.w	r2, r3, #32
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e020      	b.n	8003568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	0c1b      	lsrs	r3, r3, #16
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b01      	cmp	r3, #1
 800352e:	d10c      	bne.n	800354a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	43da      	mvns	r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	4013      	ands	r3, r2
 800353c:	b29b      	uxth	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	bf14      	ite	ne
 8003542:	2301      	movne	r3, #1
 8003544:	2300      	moveq	r3, #0
 8003546:	b2db      	uxtb	r3, r3
 8003548:	e00b      	b.n	8003562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	43da      	mvns	r2, r3
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	4013      	ands	r3, r2
 8003556:	b29b      	uxth	r3, r3
 8003558:	2b00      	cmp	r3, #0
 800355a:	bf14      	ite	ne
 800355c:	2301      	movne	r3, #1
 800355e:	2300      	moveq	r3, #0
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d18d      	bne.n	8003482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800357c:	e02d      	b.n	80035da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 f8ce 	bl	8003720 <I2C_IsAcknowledgeFailed>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e02d      	b.n	80035ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003594:	d021      	beq.n	80035da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003596:	f7fe fe81 	bl	800229c <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d302      	bcc.n	80035ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d116      	bne.n	80035da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2220      	movs	r2, #32
 80035b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	f043 0220 	orr.w	r2, r3, #32
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e007      	b.n	80035ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e4:	2b80      	cmp	r3, #128	; 0x80
 80035e6:	d1ca      	bne.n	800357e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b084      	sub	sp, #16
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	60f8      	str	r0, [r7, #12]
 80035fa:	60b9      	str	r1, [r7, #8]
 80035fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035fe:	e02d      	b.n	800365c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 f88d 	bl	8003720 <I2C_IsAcknowledgeFailed>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e02d      	b.n	800366c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003616:	d021      	beq.n	800365c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003618:	f7fe fe40 	bl	800229c <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	429a      	cmp	r2, r3
 8003626:	d302      	bcc.n	800362e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d116      	bne.n	800365c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2220      	movs	r2, #32
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003648:	f043 0220 	orr.w	r2, r3, #32
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e007      	b.n	800366c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	f003 0304 	and.w	r3, r3, #4
 8003666:	2b04      	cmp	r3, #4
 8003668:	d1ca      	bne.n	8003600 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003680:	e042      	b.n	8003708 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	f003 0310 	and.w	r3, r3, #16
 800368c:	2b10      	cmp	r3, #16
 800368e:	d119      	bne.n	80036c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f06f 0210 	mvn.w	r2, #16
 8003698:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e029      	b.n	8003718 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c4:	f7fe fdea 	bl	800229c <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d302      	bcc.n	80036da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d116      	bne.n	8003708 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	f043 0220 	orr.w	r2, r3, #32
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e007      	b.n	8003718 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003712:	2b40      	cmp	r3, #64	; 0x40
 8003714:	d1b5      	bne.n	8003682 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003736:	d11b      	bne.n	8003770 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003740:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2220      	movs	r2, #32
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375c:	f043 0204 	orr.w	r2, r3, #4
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e000      	b.n	8003772 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
	...

08003780 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e267      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d075      	beq.n	800388a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800379e:	4b88      	ldr	r3, [pc, #544]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 030c 	and.w	r3, r3, #12
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d00c      	beq.n	80037c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037aa:	4b85      	ldr	r3, [pc, #532]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037b2:	2b08      	cmp	r3, #8
 80037b4:	d112      	bne.n	80037dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037b6:	4b82      	ldr	r3, [pc, #520]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037c2:	d10b      	bne.n	80037dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c4:	4b7e      	ldr	r3, [pc, #504]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d05b      	beq.n	8003888 <HAL_RCC_OscConfig+0x108>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d157      	bne.n	8003888 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e242      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e4:	d106      	bne.n	80037f4 <HAL_RCC_OscConfig+0x74>
 80037e6:	4b76      	ldr	r3, [pc, #472]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a75      	ldr	r2, [pc, #468]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 80037ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	e01d      	b.n	8003830 <HAL_RCC_OscConfig+0xb0>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037fc:	d10c      	bne.n	8003818 <HAL_RCC_OscConfig+0x98>
 80037fe:	4b70      	ldr	r3, [pc, #448]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a6f      	ldr	r2, [pc, #444]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 8003804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003808:	6013      	str	r3, [r2, #0]
 800380a:	4b6d      	ldr	r3, [pc, #436]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a6c      	ldr	r2, [pc, #432]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 8003810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003814:	6013      	str	r3, [r2, #0]
 8003816:	e00b      	b.n	8003830 <HAL_RCC_OscConfig+0xb0>
 8003818:	4b69      	ldr	r3, [pc, #420]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a68      	ldr	r2, [pc, #416]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 800381e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003822:	6013      	str	r3, [r2, #0]
 8003824:	4b66      	ldr	r3, [pc, #408]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a65      	ldr	r2, [pc, #404]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 800382a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800382e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d013      	beq.n	8003860 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003838:	f7fe fd30 	bl	800229c <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003840:	f7fe fd2c 	bl	800229c <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b64      	cmp	r3, #100	; 0x64
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e207      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003852:	4b5b      	ldr	r3, [pc, #364]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0f0      	beq.n	8003840 <HAL_RCC_OscConfig+0xc0>
 800385e:	e014      	b.n	800388a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003860:	f7fe fd1c 	bl	800229c <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003868:	f7fe fd18 	bl	800229c <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b64      	cmp	r3, #100	; 0x64
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e1f3      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800387a:	4b51      	ldr	r3, [pc, #324]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f0      	bne.n	8003868 <HAL_RCC_OscConfig+0xe8>
 8003886:	e000      	b.n	800388a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d063      	beq.n	800395e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003896:	4b4a      	ldr	r3, [pc, #296]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 030c 	and.w	r3, r3, #12
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00b      	beq.n	80038ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038a2:	4b47      	ldr	r3, [pc, #284]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d11c      	bne.n	80038e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ae:	4b44      	ldr	r3, [pc, #272]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d116      	bne.n	80038e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ba:	4b41      	ldr	r3, [pc, #260]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d005      	beq.n	80038d2 <HAL_RCC_OscConfig+0x152>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d001      	beq.n	80038d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e1c7      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d2:	4b3b      	ldr	r3, [pc, #236]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	4937      	ldr	r1, [pc, #220]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038e6:	e03a      	b.n	800395e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d020      	beq.n	8003932 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038f0:	4b34      	ldr	r3, [pc, #208]	; (80039c4 <HAL_RCC_OscConfig+0x244>)
 80038f2:	2201      	movs	r2, #1
 80038f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f6:	f7fe fcd1 	bl	800229c <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038fc:	e008      	b.n	8003910 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038fe:	f7fe fccd 	bl	800229c <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e1a8      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003910:	4b2b      	ldr	r3, [pc, #172]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0f0      	beq.n	80038fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800391c:	4b28      	ldr	r3, [pc, #160]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	4925      	ldr	r1, [pc, #148]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 800392c:	4313      	orrs	r3, r2
 800392e:	600b      	str	r3, [r1, #0]
 8003930:	e015      	b.n	800395e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003932:	4b24      	ldr	r3, [pc, #144]	; (80039c4 <HAL_RCC_OscConfig+0x244>)
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003938:	f7fe fcb0 	bl	800229c <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003940:	f7fe fcac 	bl	800229c <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e187      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003952:	4b1b      	ldr	r3, [pc, #108]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f0      	bne.n	8003940 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b00      	cmp	r3, #0
 8003968:	d036      	beq.n	80039d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d016      	beq.n	80039a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003972:	4b15      	ldr	r3, [pc, #84]	; (80039c8 <HAL_RCC_OscConfig+0x248>)
 8003974:	2201      	movs	r2, #1
 8003976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003978:	f7fe fc90 	bl	800229c <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003980:	f7fe fc8c 	bl	800229c <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e167      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003992:	4b0b      	ldr	r3, [pc, #44]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 8003994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0f0      	beq.n	8003980 <HAL_RCC_OscConfig+0x200>
 800399e:	e01b      	b.n	80039d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039a0:	4b09      	ldr	r3, [pc, #36]	; (80039c8 <HAL_RCC_OscConfig+0x248>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a6:	f7fe fc79 	bl	800229c <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ac:	e00e      	b.n	80039cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039ae:	f7fe fc75 	bl	800229c <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d907      	bls.n	80039cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e150      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
 80039c0:	40023800 	.word	0x40023800
 80039c4:	42470000 	.word	0x42470000
 80039c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039cc:	4b88      	ldr	r3, [pc, #544]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 80039ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1ea      	bne.n	80039ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 8097 	beq.w	8003b14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039e6:	2300      	movs	r3, #0
 80039e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ea:	4b81      	ldr	r3, [pc, #516]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10f      	bne.n	8003a16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039f6:	2300      	movs	r3, #0
 80039f8:	60bb      	str	r3, [r7, #8]
 80039fa:	4b7d      	ldr	r3, [pc, #500]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	4a7c      	ldr	r2, [pc, #496]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a04:	6413      	str	r3, [r2, #64]	; 0x40
 8003a06:	4b7a      	ldr	r3, [pc, #488]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a0e:	60bb      	str	r3, [r7, #8]
 8003a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a12:	2301      	movs	r3, #1
 8003a14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a16:	4b77      	ldr	r3, [pc, #476]	; (8003bf4 <HAL_RCC_OscConfig+0x474>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d118      	bne.n	8003a54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a22:	4b74      	ldr	r3, [pc, #464]	; (8003bf4 <HAL_RCC_OscConfig+0x474>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a73      	ldr	r2, [pc, #460]	; (8003bf4 <HAL_RCC_OscConfig+0x474>)
 8003a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a2e:	f7fe fc35 	bl	800229c <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a34:	e008      	b.n	8003a48 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a36:	f7fe fc31 	bl	800229c <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e10c      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a48:	4b6a      	ldr	r3, [pc, #424]	; (8003bf4 <HAL_RCC_OscConfig+0x474>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0f0      	beq.n	8003a36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d106      	bne.n	8003a6a <HAL_RCC_OscConfig+0x2ea>
 8003a5c:	4b64      	ldr	r3, [pc, #400]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a60:	4a63      	ldr	r2, [pc, #396]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003a62:	f043 0301 	orr.w	r3, r3, #1
 8003a66:	6713      	str	r3, [r2, #112]	; 0x70
 8003a68:	e01c      	b.n	8003aa4 <HAL_RCC_OscConfig+0x324>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	2b05      	cmp	r3, #5
 8003a70:	d10c      	bne.n	8003a8c <HAL_RCC_OscConfig+0x30c>
 8003a72:	4b5f      	ldr	r3, [pc, #380]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a76:	4a5e      	ldr	r2, [pc, #376]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003a78:	f043 0304 	orr.w	r3, r3, #4
 8003a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a7e:	4b5c      	ldr	r3, [pc, #368]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a82:	4a5b      	ldr	r2, [pc, #364]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003a84:	f043 0301 	orr.w	r3, r3, #1
 8003a88:	6713      	str	r3, [r2, #112]	; 0x70
 8003a8a:	e00b      	b.n	8003aa4 <HAL_RCC_OscConfig+0x324>
 8003a8c:	4b58      	ldr	r3, [pc, #352]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a90:	4a57      	ldr	r2, [pc, #348]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003a92:	f023 0301 	bic.w	r3, r3, #1
 8003a96:	6713      	str	r3, [r2, #112]	; 0x70
 8003a98:	4b55      	ldr	r3, [pc, #340]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9c:	4a54      	ldr	r2, [pc, #336]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003a9e:	f023 0304 	bic.w	r3, r3, #4
 8003aa2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d015      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aac:	f7fe fbf6 	bl	800229c <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab2:	e00a      	b.n	8003aca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ab4:	f7fe fbf2 	bl	800229c <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e0cb      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aca:	4b49      	ldr	r3, [pc, #292]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0ee      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x334>
 8003ad6:	e014      	b.n	8003b02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ad8:	f7fe fbe0 	bl	800229c <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ade:	e00a      	b.n	8003af6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ae0:	f7fe fbdc 	bl	800229c <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e0b5      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003af6:	4b3e      	ldr	r3, [pc, #248]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1ee      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b02:	7dfb      	ldrb	r3, [r7, #23]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d105      	bne.n	8003b14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b08:	4b39      	ldr	r3, [pc, #228]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	4a38      	ldr	r2, [pc, #224]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003b0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 80a1 	beq.w	8003c60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b1e:	4b34      	ldr	r3, [pc, #208]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 030c 	and.w	r3, r3, #12
 8003b26:	2b08      	cmp	r3, #8
 8003b28:	d05c      	beq.n	8003be4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d141      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b32:	4b31      	ldr	r3, [pc, #196]	; (8003bf8 <HAL_RCC_OscConfig+0x478>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b38:	f7fe fbb0 	bl	800229c <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b40:	f7fe fbac 	bl	800229c <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e087      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b52:	4b27      	ldr	r3, [pc, #156]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1f0      	bne.n	8003b40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69da      	ldr	r2, [r3, #28]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6c:	019b      	lsls	r3, r3, #6
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b74:	085b      	lsrs	r3, r3, #1
 8003b76:	3b01      	subs	r3, #1
 8003b78:	041b      	lsls	r3, r3, #16
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b80:	061b      	lsls	r3, r3, #24
 8003b82:	491b      	ldr	r1, [pc, #108]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b88:	4b1b      	ldr	r3, [pc, #108]	; (8003bf8 <HAL_RCC_OscConfig+0x478>)
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b8e:	f7fe fb85 	bl	800229c <HAL_GetTick>
 8003b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b94:	e008      	b.n	8003ba8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b96:	f7fe fb81 	bl	800229c <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e05c      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ba8:	4b11      	ldr	r3, [pc, #68]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0f0      	beq.n	8003b96 <HAL_RCC_OscConfig+0x416>
 8003bb4:	e054      	b.n	8003c60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bb6:	4b10      	ldr	r3, [pc, #64]	; (8003bf8 <HAL_RCC_OscConfig+0x478>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bbc:	f7fe fb6e 	bl	800229c <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bc4:	f7fe fb6a 	bl	800229c <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e045      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bd6:	4b06      	ldr	r3, [pc, #24]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1f0      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x444>
 8003be2:	e03d      	b.n	8003c60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d107      	bne.n	8003bfc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e038      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	40007000 	.word	0x40007000
 8003bf8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bfc:	4b1b      	ldr	r3, [pc, #108]	; (8003c6c <HAL_RCC_OscConfig+0x4ec>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d028      	beq.n	8003c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d121      	bne.n	8003c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d11a      	bne.n	8003c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d111      	bne.n	8003c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c42:	085b      	lsrs	r3, r3, #1
 8003c44:	3b01      	subs	r3, #1
 8003c46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d107      	bne.n	8003c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d001      	beq.n	8003c60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e000      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40023800 	.word	0x40023800

08003c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d101      	bne.n	8003c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e0cc      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c84:	4b68      	ldr	r3, [pc, #416]	; (8003e28 <HAL_RCC_ClockConfig+0x1b8>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0307 	and.w	r3, r3, #7
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d90c      	bls.n	8003cac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c92:	4b65      	ldr	r3, [pc, #404]	; (8003e28 <HAL_RCC_ClockConfig+0x1b8>)
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c9a:	4b63      	ldr	r3, [pc, #396]	; (8003e28 <HAL_RCC_ClockConfig+0x1b8>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d001      	beq.n	8003cac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e0b8      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d020      	beq.n	8003cfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0304 	and.w	r3, r3, #4
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d005      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cc4:	4b59      	ldr	r3, [pc, #356]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	4a58      	ldr	r2, [pc, #352]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003cca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0308 	and.w	r3, r3, #8
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d005      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cdc:	4b53      	ldr	r3, [pc, #332]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	4a52      	ldr	r2, [pc, #328]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ce2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ce6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ce8:	4b50      	ldr	r3, [pc, #320]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	494d      	ldr	r1, [pc, #308]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d044      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d107      	bne.n	8003d1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d0e:	4b47      	ldr	r3, [pc, #284]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d119      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e07f      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d003      	beq.n	8003d2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d2a:	2b03      	cmp	r3, #3
 8003d2c:	d107      	bne.n	8003d3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d2e:	4b3f      	ldr	r3, [pc, #252]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d109      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e06f      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d3e:	4b3b      	ldr	r3, [pc, #236]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e067      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d4e:	4b37      	ldr	r3, [pc, #220]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f023 0203 	bic.w	r2, r3, #3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	4934      	ldr	r1, [pc, #208]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d60:	f7fe fa9c 	bl	800229c <HAL_GetTick>
 8003d64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d66:	e00a      	b.n	8003d7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d68:	f7fe fa98 	bl	800229c <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e04f      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d7e:	4b2b      	ldr	r3, [pc, #172]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f003 020c 	and.w	r2, r3, #12
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d1eb      	bne.n	8003d68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d90:	4b25      	ldr	r3, [pc, #148]	; (8003e28 <HAL_RCC_ClockConfig+0x1b8>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d20c      	bcs.n	8003db8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d9e:	4b22      	ldr	r3, [pc, #136]	; (8003e28 <HAL_RCC_ClockConfig+0x1b8>)
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	b2d2      	uxtb	r2, r2
 8003da4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003da6:	4b20      	ldr	r3, [pc, #128]	; (8003e28 <HAL_RCC_ClockConfig+0x1b8>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0307 	and.w	r3, r3, #7
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d001      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e032      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d008      	beq.n	8003dd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dc4:	4b19      	ldr	r3, [pc, #100]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	4916      	ldr	r1, [pc, #88]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0308 	and.w	r3, r3, #8
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d009      	beq.n	8003df6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003de2:	4b12      	ldr	r3, [pc, #72]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	490e      	ldr	r1, [pc, #56]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003df6:	f000 f821 	bl	8003e3c <HAL_RCC_GetSysClockFreq>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	091b      	lsrs	r3, r3, #4
 8003e02:	f003 030f 	and.w	r3, r3, #15
 8003e06:	490a      	ldr	r1, [pc, #40]	; (8003e30 <HAL_RCC_ClockConfig+0x1c0>)
 8003e08:	5ccb      	ldrb	r3, [r1, r3]
 8003e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e0e:	4a09      	ldr	r2, [pc, #36]	; (8003e34 <HAL_RCC_ClockConfig+0x1c4>)
 8003e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e12:	4b09      	ldr	r3, [pc, #36]	; (8003e38 <HAL_RCC_ClockConfig+0x1c8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fe f9fc 	bl	8002214 <HAL_InitTick>

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	40023c00 	.word	0x40023c00
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	08005310 	.word	0x08005310
 8003e34:	20000008 	.word	0x20000008
 8003e38:	2000000c 	.word	0x2000000c

08003e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e40:	b094      	sub	sp, #80	; 0x50
 8003e42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e44:	2300      	movs	r3, #0
 8003e46:	647b      	str	r3, [r7, #68]	; 0x44
 8003e48:	2300      	movs	r3, #0
 8003e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e54:	4b79      	ldr	r3, [pc, #484]	; (800403c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 030c 	and.w	r3, r3, #12
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d00d      	beq.n	8003e7c <HAL_RCC_GetSysClockFreq+0x40>
 8003e60:	2b08      	cmp	r3, #8
 8003e62:	f200 80e1 	bhi.w	8004028 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d002      	beq.n	8003e70 <HAL_RCC_GetSysClockFreq+0x34>
 8003e6a:	2b04      	cmp	r3, #4
 8003e6c:	d003      	beq.n	8003e76 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e6e:	e0db      	b.n	8004028 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e70:	4b73      	ldr	r3, [pc, #460]	; (8004040 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e72:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003e74:	e0db      	b.n	800402e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e76:	4b73      	ldr	r3, [pc, #460]	; (8004044 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e7a:	e0d8      	b.n	800402e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e7c:	4b6f      	ldr	r3, [pc, #444]	; (800403c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e84:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e86:	4b6d      	ldr	r3, [pc, #436]	; (800403c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d063      	beq.n	8003f5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e92:	4b6a      	ldr	r3, [pc, #424]	; (800403c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	099b      	lsrs	r3, r3, #6
 8003e98:	2200      	movs	r2, #0
 8003e9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ea4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	637b      	str	r3, [r7, #52]	; 0x34
 8003eaa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003eae:	4622      	mov	r2, r4
 8003eb0:	462b      	mov	r3, r5
 8003eb2:	f04f 0000 	mov.w	r0, #0
 8003eb6:	f04f 0100 	mov.w	r1, #0
 8003eba:	0159      	lsls	r1, r3, #5
 8003ebc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ec0:	0150      	lsls	r0, r2, #5
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4621      	mov	r1, r4
 8003ec8:	1a51      	subs	r1, r2, r1
 8003eca:	6139      	str	r1, [r7, #16]
 8003ecc:	4629      	mov	r1, r5
 8003ece:	eb63 0301 	sbc.w	r3, r3, r1
 8003ed2:	617b      	str	r3, [r7, #20]
 8003ed4:	f04f 0200 	mov.w	r2, #0
 8003ed8:	f04f 0300 	mov.w	r3, #0
 8003edc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ee0:	4659      	mov	r1, fp
 8003ee2:	018b      	lsls	r3, r1, #6
 8003ee4:	4651      	mov	r1, sl
 8003ee6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003eea:	4651      	mov	r1, sl
 8003eec:	018a      	lsls	r2, r1, #6
 8003eee:	4651      	mov	r1, sl
 8003ef0:	ebb2 0801 	subs.w	r8, r2, r1
 8003ef4:	4659      	mov	r1, fp
 8003ef6:	eb63 0901 	sbc.w	r9, r3, r1
 8003efa:	f04f 0200 	mov.w	r2, #0
 8003efe:	f04f 0300 	mov.w	r3, #0
 8003f02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f0e:	4690      	mov	r8, r2
 8003f10:	4699      	mov	r9, r3
 8003f12:	4623      	mov	r3, r4
 8003f14:	eb18 0303 	adds.w	r3, r8, r3
 8003f18:	60bb      	str	r3, [r7, #8]
 8003f1a:	462b      	mov	r3, r5
 8003f1c:	eb49 0303 	adc.w	r3, r9, r3
 8003f20:	60fb      	str	r3, [r7, #12]
 8003f22:	f04f 0200 	mov.w	r2, #0
 8003f26:	f04f 0300 	mov.w	r3, #0
 8003f2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f2e:	4629      	mov	r1, r5
 8003f30:	024b      	lsls	r3, r1, #9
 8003f32:	4621      	mov	r1, r4
 8003f34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f38:	4621      	mov	r1, r4
 8003f3a:	024a      	lsls	r2, r1, #9
 8003f3c:	4610      	mov	r0, r2
 8003f3e:	4619      	mov	r1, r3
 8003f40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f42:	2200      	movs	r2, #0
 8003f44:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f4c:	f7fc fdf8 	bl	8000b40 <__aeabi_uldivmod>
 8003f50:	4602      	mov	r2, r0
 8003f52:	460b      	mov	r3, r1
 8003f54:	4613      	mov	r3, r2
 8003f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f58:	e058      	b.n	800400c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f5a:	4b38      	ldr	r3, [pc, #224]	; (800403c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	099b      	lsrs	r3, r3, #6
 8003f60:	2200      	movs	r2, #0
 8003f62:	4618      	mov	r0, r3
 8003f64:	4611      	mov	r1, r2
 8003f66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f6a:	623b      	str	r3, [r7, #32]
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f74:	4642      	mov	r2, r8
 8003f76:	464b      	mov	r3, r9
 8003f78:	f04f 0000 	mov.w	r0, #0
 8003f7c:	f04f 0100 	mov.w	r1, #0
 8003f80:	0159      	lsls	r1, r3, #5
 8003f82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f86:	0150      	lsls	r0, r2, #5
 8003f88:	4602      	mov	r2, r0
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	4641      	mov	r1, r8
 8003f8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f92:	4649      	mov	r1, r9
 8003f94:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f98:	f04f 0200 	mov.w	r2, #0
 8003f9c:	f04f 0300 	mov.w	r3, #0
 8003fa0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fa4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fa8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003fac:	ebb2 040a 	subs.w	r4, r2, sl
 8003fb0:	eb63 050b 	sbc.w	r5, r3, fp
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	f04f 0300 	mov.w	r3, #0
 8003fbc:	00eb      	lsls	r3, r5, #3
 8003fbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fc2:	00e2      	lsls	r2, r4, #3
 8003fc4:	4614      	mov	r4, r2
 8003fc6:	461d      	mov	r5, r3
 8003fc8:	4643      	mov	r3, r8
 8003fca:	18e3      	adds	r3, r4, r3
 8003fcc:	603b      	str	r3, [r7, #0]
 8003fce:	464b      	mov	r3, r9
 8003fd0:	eb45 0303 	adc.w	r3, r5, r3
 8003fd4:	607b      	str	r3, [r7, #4]
 8003fd6:	f04f 0200 	mov.w	r2, #0
 8003fda:	f04f 0300 	mov.w	r3, #0
 8003fde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fe2:	4629      	mov	r1, r5
 8003fe4:	028b      	lsls	r3, r1, #10
 8003fe6:	4621      	mov	r1, r4
 8003fe8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fec:	4621      	mov	r1, r4
 8003fee:	028a      	lsls	r2, r1, #10
 8003ff0:	4610      	mov	r0, r2
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	61bb      	str	r3, [r7, #24]
 8003ffa:	61fa      	str	r2, [r7, #28]
 8003ffc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004000:	f7fc fd9e 	bl	8000b40 <__aeabi_uldivmod>
 8004004:	4602      	mov	r2, r0
 8004006:	460b      	mov	r3, r1
 8004008:	4613      	mov	r3, r2
 800400a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800400c:	4b0b      	ldr	r3, [pc, #44]	; (800403c <HAL_RCC_GetSysClockFreq+0x200>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	0c1b      	lsrs	r3, r3, #16
 8004012:	f003 0303 	and.w	r3, r3, #3
 8004016:	3301      	adds	r3, #1
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800401c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800401e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004020:	fbb2 f3f3 	udiv	r3, r2, r3
 8004024:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004026:	e002      	b.n	800402e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004028:	4b05      	ldr	r3, [pc, #20]	; (8004040 <HAL_RCC_GetSysClockFreq+0x204>)
 800402a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800402c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800402e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004030:	4618      	mov	r0, r3
 8004032:	3750      	adds	r7, #80	; 0x50
 8004034:	46bd      	mov	sp, r7
 8004036:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800403a:	bf00      	nop
 800403c:	40023800 	.word	0x40023800
 8004040:	00f42400 	.word	0x00f42400
 8004044:	007a1200 	.word	0x007a1200

08004048 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800404c:	4b03      	ldr	r3, [pc, #12]	; (800405c <HAL_RCC_GetHCLKFreq+0x14>)
 800404e:	681b      	ldr	r3, [r3, #0]
}
 8004050:	4618      	mov	r0, r3
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	20000008 	.word	0x20000008

08004060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004064:	f7ff fff0 	bl	8004048 <HAL_RCC_GetHCLKFreq>
 8004068:	4602      	mov	r2, r0
 800406a:	4b05      	ldr	r3, [pc, #20]	; (8004080 <HAL_RCC_GetPCLK1Freq+0x20>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	0a9b      	lsrs	r3, r3, #10
 8004070:	f003 0307 	and.w	r3, r3, #7
 8004074:	4903      	ldr	r1, [pc, #12]	; (8004084 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004076:	5ccb      	ldrb	r3, [r1, r3]
 8004078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800407c:	4618      	mov	r0, r3
 800407e:	bd80      	pop	{r7, pc}
 8004080:	40023800 	.word	0x40023800
 8004084:	08005320 	.word	0x08005320

08004088 <pow>:
 8004088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800408a:	ed2d 8b02 	vpush	{d8}
 800408e:	eeb0 8a40 	vmov.f32	s16, s0
 8004092:	eef0 8a60 	vmov.f32	s17, s1
 8004096:	ec55 4b11 	vmov	r4, r5, d1
 800409a:	f000 fb21 	bl	80046e0 <__ieee754_pow>
 800409e:	4622      	mov	r2, r4
 80040a0:	462b      	mov	r3, r5
 80040a2:	4620      	mov	r0, r4
 80040a4:	4629      	mov	r1, r5
 80040a6:	ec57 6b10 	vmov	r6, r7, d0
 80040aa:	f7fc fce3 	bl	8000a74 <__aeabi_dcmpun>
 80040ae:	2800      	cmp	r0, #0
 80040b0:	d13b      	bne.n	800412a <pow+0xa2>
 80040b2:	ec51 0b18 	vmov	r0, r1, d8
 80040b6:	2200      	movs	r2, #0
 80040b8:	2300      	movs	r3, #0
 80040ba:	f7fc fca9 	bl	8000a10 <__aeabi_dcmpeq>
 80040be:	b1b8      	cbz	r0, 80040f0 <pow+0x68>
 80040c0:	2200      	movs	r2, #0
 80040c2:	2300      	movs	r3, #0
 80040c4:	4620      	mov	r0, r4
 80040c6:	4629      	mov	r1, r5
 80040c8:	f7fc fca2 	bl	8000a10 <__aeabi_dcmpeq>
 80040cc:	2800      	cmp	r0, #0
 80040ce:	d146      	bne.n	800415e <pow+0xd6>
 80040d0:	ec45 4b10 	vmov	d0, r4, r5
 80040d4:	f000 fa1d 	bl	8004512 <finite>
 80040d8:	b338      	cbz	r0, 800412a <pow+0xa2>
 80040da:	2200      	movs	r2, #0
 80040dc:	2300      	movs	r3, #0
 80040de:	4620      	mov	r0, r4
 80040e0:	4629      	mov	r1, r5
 80040e2:	f7fc fc9f 	bl	8000a24 <__aeabi_dcmplt>
 80040e6:	b300      	cbz	r0, 800412a <pow+0xa2>
 80040e8:	f001 f8dc 	bl	80052a4 <__errno>
 80040ec:	2322      	movs	r3, #34	; 0x22
 80040ee:	e01b      	b.n	8004128 <pow+0xa0>
 80040f0:	ec47 6b10 	vmov	d0, r6, r7
 80040f4:	f000 fa0d 	bl	8004512 <finite>
 80040f8:	b9e0      	cbnz	r0, 8004134 <pow+0xac>
 80040fa:	eeb0 0a48 	vmov.f32	s0, s16
 80040fe:	eef0 0a68 	vmov.f32	s1, s17
 8004102:	f000 fa06 	bl	8004512 <finite>
 8004106:	b1a8      	cbz	r0, 8004134 <pow+0xac>
 8004108:	ec45 4b10 	vmov	d0, r4, r5
 800410c:	f000 fa01 	bl	8004512 <finite>
 8004110:	b180      	cbz	r0, 8004134 <pow+0xac>
 8004112:	4632      	mov	r2, r6
 8004114:	463b      	mov	r3, r7
 8004116:	4630      	mov	r0, r6
 8004118:	4639      	mov	r1, r7
 800411a:	f7fc fcab 	bl	8000a74 <__aeabi_dcmpun>
 800411e:	2800      	cmp	r0, #0
 8004120:	d0e2      	beq.n	80040e8 <pow+0x60>
 8004122:	f001 f8bf 	bl	80052a4 <__errno>
 8004126:	2321      	movs	r3, #33	; 0x21
 8004128:	6003      	str	r3, [r0, #0]
 800412a:	ecbd 8b02 	vpop	{d8}
 800412e:	ec47 6b10 	vmov	d0, r6, r7
 8004132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004134:	2200      	movs	r2, #0
 8004136:	2300      	movs	r3, #0
 8004138:	4630      	mov	r0, r6
 800413a:	4639      	mov	r1, r7
 800413c:	f7fc fc68 	bl	8000a10 <__aeabi_dcmpeq>
 8004140:	2800      	cmp	r0, #0
 8004142:	d0f2      	beq.n	800412a <pow+0xa2>
 8004144:	eeb0 0a48 	vmov.f32	s0, s16
 8004148:	eef0 0a68 	vmov.f32	s1, s17
 800414c:	f000 f9e1 	bl	8004512 <finite>
 8004150:	2800      	cmp	r0, #0
 8004152:	d0ea      	beq.n	800412a <pow+0xa2>
 8004154:	ec45 4b10 	vmov	d0, r4, r5
 8004158:	f000 f9db 	bl	8004512 <finite>
 800415c:	e7c3      	b.n	80040e6 <pow+0x5e>
 800415e:	4f01      	ldr	r7, [pc, #4]	; (8004164 <pow+0xdc>)
 8004160:	2600      	movs	r6, #0
 8004162:	e7e2      	b.n	800412a <pow+0xa2>
 8004164:	3ff00000 	.word	0x3ff00000

08004168 <sqrt>:
 8004168:	b538      	push	{r3, r4, r5, lr}
 800416a:	ed2d 8b02 	vpush	{d8}
 800416e:	ec55 4b10 	vmov	r4, r5, d0
 8004172:	f000 f9d9 	bl	8004528 <__ieee754_sqrt>
 8004176:	4622      	mov	r2, r4
 8004178:	462b      	mov	r3, r5
 800417a:	4620      	mov	r0, r4
 800417c:	4629      	mov	r1, r5
 800417e:	eeb0 8a40 	vmov.f32	s16, s0
 8004182:	eef0 8a60 	vmov.f32	s17, s1
 8004186:	f7fc fc75 	bl	8000a74 <__aeabi_dcmpun>
 800418a:	b990      	cbnz	r0, 80041b2 <sqrt+0x4a>
 800418c:	2200      	movs	r2, #0
 800418e:	2300      	movs	r3, #0
 8004190:	4620      	mov	r0, r4
 8004192:	4629      	mov	r1, r5
 8004194:	f7fc fc46 	bl	8000a24 <__aeabi_dcmplt>
 8004198:	b158      	cbz	r0, 80041b2 <sqrt+0x4a>
 800419a:	f001 f883 	bl	80052a4 <__errno>
 800419e:	2321      	movs	r3, #33	; 0x21
 80041a0:	6003      	str	r3, [r0, #0]
 80041a2:	2200      	movs	r2, #0
 80041a4:	2300      	movs	r3, #0
 80041a6:	4610      	mov	r0, r2
 80041a8:	4619      	mov	r1, r3
 80041aa:	f7fc faf3 	bl	8000794 <__aeabi_ddiv>
 80041ae:	ec41 0b18 	vmov	d8, r0, r1
 80041b2:	eeb0 0a48 	vmov.f32	s0, s16
 80041b6:	eef0 0a68 	vmov.f32	s1, s17
 80041ba:	ecbd 8b02 	vpop	{d8}
 80041be:	bd38      	pop	{r3, r4, r5, pc}

080041c0 <atan>:
 80041c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c4:	ec55 4b10 	vmov	r4, r5, d0
 80041c8:	4bc3      	ldr	r3, [pc, #780]	; (80044d8 <atan+0x318>)
 80041ca:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80041ce:	429e      	cmp	r6, r3
 80041d0:	46ab      	mov	fp, r5
 80041d2:	dd18      	ble.n	8004206 <atan+0x46>
 80041d4:	4bc1      	ldr	r3, [pc, #772]	; (80044dc <atan+0x31c>)
 80041d6:	429e      	cmp	r6, r3
 80041d8:	dc01      	bgt.n	80041de <atan+0x1e>
 80041da:	d109      	bne.n	80041f0 <atan+0x30>
 80041dc:	b144      	cbz	r4, 80041f0 <atan+0x30>
 80041de:	4622      	mov	r2, r4
 80041e0:	462b      	mov	r3, r5
 80041e2:	4620      	mov	r0, r4
 80041e4:	4629      	mov	r1, r5
 80041e6:	f7fb fff5 	bl	80001d4 <__adddf3>
 80041ea:	4604      	mov	r4, r0
 80041ec:	460d      	mov	r5, r1
 80041ee:	e006      	b.n	80041fe <atan+0x3e>
 80041f0:	f1bb 0f00 	cmp.w	fp, #0
 80041f4:	f300 8131 	bgt.w	800445a <atan+0x29a>
 80041f8:	a59b      	add	r5, pc, #620	; (adr r5, 8004468 <atan+0x2a8>)
 80041fa:	e9d5 4500 	ldrd	r4, r5, [r5]
 80041fe:	ec45 4b10 	vmov	d0, r4, r5
 8004202:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004206:	4bb6      	ldr	r3, [pc, #728]	; (80044e0 <atan+0x320>)
 8004208:	429e      	cmp	r6, r3
 800420a:	dc14      	bgt.n	8004236 <atan+0x76>
 800420c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8004210:	429e      	cmp	r6, r3
 8004212:	dc0d      	bgt.n	8004230 <atan+0x70>
 8004214:	a396      	add	r3, pc, #600	; (adr r3, 8004470 <atan+0x2b0>)
 8004216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421a:	ee10 0a10 	vmov	r0, s0
 800421e:	4629      	mov	r1, r5
 8004220:	f7fb ffd8 	bl	80001d4 <__adddf3>
 8004224:	4baf      	ldr	r3, [pc, #700]	; (80044e4 <atan+0x324>)
 8004226:	2200      	movs	r2, #0
 8004228:	f7fc fc1a 	bl	8000a60 <__aeabi_dcmpgt>
 800422c:	2800      	cmp	r0, #0
 800422e:	d1e6      	bne.n	80041fe <atan+0x3e>
 8004230:	f04f 3aff 	mov.w	sl, #4294967295
 8004234:	e02b      	b.n	800428e <atan+0xce>
 8004236:	f000 f963 	bl	8004500 <fabs>
 800423a:	4bab      	ldr	r3, [pc, #684]	; (80044e8 <atan+0x328>)
 800423c:	429e      	cmp	r6, r3
 800423e:	ec55 4b10 	vmov	r4, r5, d0
 8004242:	f300 80bf 	bgt.w	80043c4 <atan+0x204>
 8004246:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800424a:	429e      	cmp	r6, r3
 800424c:	f300 80a0 	bgt.w	8004390 <atan+0x1d0>
 8004250:	ee10 2a10 	vmov	r2, s0
 8004254:	ee10 0a10 	vmov	r0, s0
 8004258:	462b      	mov	r3, r5
 800425a:	4629      	mov	r1, r5
 800425c:	f7fb ffba 	bl	80001d4 <__adddf3>
 8004260:	4ba0      	ldr	r3, [pc, #640]	; (80044e4 <atan+0x324>)
 8004262:	2200      	movs	r2, #0
 8004264:	f7fb ffb4 	bl	80001d0 <__aeabi_dsub>
 8004268:	2200      	movs	r2, #0
 800426a:	4606      	mov	r6, r0
 800426c:	460f      	mov	r7, r1
 800426e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004272:	4620      	mov	r0, r4
 8004274:	4629      	mov	r1, r5
 8004276:	f7fb ffad 	bl	80001d4 <__adddf3>
 800427a:	4602      	mov	r2, r0
 800427c:	460b      	mov	r3, r1
 800427e:	4630      	mov	r0, r6
 8004280:	4639      	mov	r1, r7
 8004282:	f7fc fa87 	bl	8000794 <__aeabi_ddiv>
 8004286:	f04f 0a00 	mov.w	sl, #0
 800428a:	4604      	mov	r4, r0
 800428c:	460d      	mov	r5, r1
 800428e:	4622      	mov	r2, r4
 8004290:	462b      	mov	r3, r5
 8004292:	4620      	mov	r0, r4
 8004294:	4629      	mov	r1, r5
 8004296:	f7fc f953 	bl	8000540 <__aeabi_dmul>
 800429a:	4602      	mov	r2, r0
 800429c:	460b      	mov	r3, r1
 800429e:	4680      	mov	r8, r0
 80042a0:	4689      	mov	r9, r1
 80042a2:	f7fc f94d 	bl	8000540 <__aeabi_dmul>
 80042a6:	a374      	add	r3, pc, #464	; (adr r3, 8004478 <atan+0x2b8>)
 80042a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ac:	4606      	mov	r6, r0
 80042ae:	460f      	mov	r7, r1
 80042b0:	f7fc f946 	bl	8000540 <__aeabi_dmul>
 80042b4:	a372      	add	r3, pc, #456	; (adr r3, 8004480 <atan+0x2c0>)
 80042b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ba:	f7fb ff8b 	bl	80001d4 <__adddf3>
 80042be:	4632      	mov	r2, r6
 80042c0:	463b      	mov	r3, r7
 80042c2:	f7fc f93d 	bl	8000540 <__aeabi_dmul>
 80042c6:	a370      	add	r3, pc, #448	; (adr r3, 8004488 <atan+0x2c8>)
 80042c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042cc:	f7fb ff82 	bl	80001d4 <__adddf3>
 80042d0:	4632      	mov	r2, r6
 80042d2:	463b      	mov	r3, r7
 80042d4:	f7fc f934 	bl	8000540 <__aeabi_dmul>
 80042d8:	a36d      	add	r3, pc, #436	; (adr r3, 8004490 <atan+0x2d0>)
 80042da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042de:	f7fb ff79 	bl	80001d4 <__adddf3>
 80042e2:	4632      	mov	r2, r6
 80042e4:	463b      	mov	r3, r7
 80042e6:	f7fc f92b 	bl	8000540 <__aeabi_dmul>
 80042ea:	a36b      	add	r3, pc, #428	; (adr r3, 8004498 <atan+0x2d8>)
 80042ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f0:	f7fb ff70 	bl	80001d4 <__adddf3>
 80042f4:	4632      	mov	r2, r6
 80042f6:	463b      	mov	r3, r7
 80042f8:	f7fc f922 	bl	8000540 <__aeabi_dmul>
 80042fc:	a368      	add	r3, pc, #416	; (adr r3, 80044a0 <atan+0x2e0>)
 80042fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004302:	f7fb ff67 	bl	80001d4 <__adddf3>
 8004306:	4642      	mov	r2, r8
 8004308:	464b      	mov	r3, r9
 800430a:	f7fc f919 	bl	8000540 <__aeabi_dmul>
 800430e:	a366      	add	r3, pc, #408	; (adr r3, 80044a8 <atan+0x2e8>)
 8004310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004314:	4680      	mov	r8, r0
 8004316:	4689      	mov	r9, r1
 8004318:	4630      	mov	r0, r6
 800431a:	4639      	mov	r1, r7
 800431c:	f7fc f910 	bl	8000540 <__aeabi_dmul>
 8004320:	a363      	add	r3, pc, #396	; (adr r3, 80044b0 <atan+0x2f0>)
 8004322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004326:	f7fb ff53 	bl	80001d0 <__aeabi_dsub>
 800432a:	4632      	mov	r2, r6
 800432c:	463b      	mov	r3, r7
 800432e:	f7fc f907 	bl	8000540 <__aeabi_dmul>
 8004332:	a361      	add	r3, pc, #388	; (adr r3, 80044b8 <atan+0x2f8>)
 8004334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004338:	f7fb ff4a 	bl	80001d0 <__aeabi_dsub>
 800433c:	4632      	mov	r2, r6
 800433e:	463b      	mov	r3, r7
 8004340:	f7fc f8fe 	bl	8000540 <__aeabi_dmul>
 8004344:	a35e      	add	r3, pc, #376	; (adr r3, 80044c0 <atan+0x300>)
 8004346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434a:	f7fb ff41 	bl	80001d0 <__aeabi_dsub>
 800434e:	4632      	mov	r2, r6
 8004350:	463b      	mov	r3, r7
 8004352:	f7fc f8f5 	bl	8000540 <__aeabi_dmul>
 8004356:	a35c      	add	r3, pc, #368	; (adr r3, 80044c8 <atan+0x308>)
 8004358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435c:	f7fb ff38 	bl	80001d0 <__aeabi_dsub>
 8004360:	4632      	mov	r2, r6
 8004362:	463b      	mov	r3, r7
 8004364:	f7fc f8ec 	bl	8000540 <__aeabi_dmul>
 8004368:	4602      	mov	r2, r0
 800436a:	460b      	mov	r3, r1
 800436c:	4640      	mov	r0, r8
 800436e:	4649      	mov	r1, r9
 8004370:	f7fb ff30 	bl	80001d4 <__adddf3>
 8004374:	4622      	mov	r2, r4
 8004376:	462b      	mov	r3, r5
 8004378:	f7fc f8e2 	bl	8000540 <__aeabi_dmul>
 800437c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004380:	4602      	mov	r2, r0
 8004382:	460b      	mov	r3, r1
 8004384:	d14b      	bne.n	800441e <atan+0x25e>
 8004386:	4620      	mov	r0, r4
 8004388:	4629      	mov	r1, r5
 800438a:	f7fb ff21 	bl	80001d0 <__aeabi_dsub>
 800438e:	e72c      	b.n	80041ea <atan+0x2a>
 8004390:	ee10 0a10 	vmov	r0, s0
 8004394:	4b53      	ldr	r3, [pc, #332]	; (80044e4 <atan+0x324>)
 8004396:	2200      	movs	r2, #0
 8004398:	4629      	mov	r1, r5
 800439a:	f7fb ff19 	bl	80001d0 <__aeabi_dsub>
 800439e:	4b51      	ldr	r3, [pc, #324]	; (80044e4 <atan+0x324>)
 80043a0:	4606      	mov	r6, r0
 80043a2:	460f      	mov	r7, r1
 80043a4:	2200      	movs	r2, #0
 80043a6:	4620      	mov	r0, r4
 80043a8:	4629      	mov	r1, r5
 80043aa:	f7fb ff13 	bl	80001d4 <__adddf3>
 80043ae:	4602      	mov	r2, r0
 80043b0:	460b      	mov	r3, r1
 80043b2:	4630      	mov	r0, r6
 80043b4:	4639      	mov	r1, r7
 80043b6:	f7fc f9ed 	bl	8000794 <__aeabi_ddiv>
 80043ba:	f04f 0a01 	mov.w	sl, #1
 80043be:	4604      	mov	r4, r0
 80043c0:	460d      	mov	r5, r1
 80043c2:	e764      	b.n	800428e <atan+0xce>
 80043c4:	4b49      	ldr	r3, [pc, #292]	; (80044ec <atan+0x32c>)
 80043c6:	429e      	cmp	r6, r3
 80043c8:	da1d      	bge.n	8004406 <atan+0x246>
 80043ca:	ee10 0a10 	vmov	r0, s0
 80043ce:	4b48      	ldr	r3, [pc, #288]	; (80044f0 <atan+0x330>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	4629      	mov	r1, r5
 80043d4:	f7fb fefc 	bl	80001d0 <__aeabi_dsub>
 80043d8:	4b45      	ldr	r3, [pc, #276]	; (80044f0 <atan+0x330>)
 80043da:	4606      	mov	r6, r0
 80043dc:	460f      	mov	r7, r1
 80043de:	2200      	movs	r2, #0
 80043e0:	4620      	mov	r0, r4
 80043e2:	4629      	mov	r1, r5
 80043e4:	f7fc f8ac 	bl	8000540 <__aeabi_dmul>
 80043e8:	4b3e      	ldr	r3, [pc, #248]	; (80044e4 <atan+0x324>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	f7fb fef2 	bl	80001d4 <__adddf3>
 80043f0:	4602      	mov	r2, r0
 80043f2:	460b      	mov	r3, r1
 80043f4:	4630      	mov	r0, r6
 80043f6:	4639      	mov	r1, r7
 80043f8:	f7fc f9cc 	bl	8000794 <__aeabi_ddiv>
 80043fc:	f04f 0a02 	mov.w	sl, #2
 8004400:	4604      	mov	r4, r0
 8004402:	460d      	mov	r5, r1
 8004404:	e743      	b.n	800428e <atan+0xce>
 8004406:	462b      	mov	r3, r5
 8004408:	ee10 2a10 	vmov	r2, s0
 800440c:	4939      	ldr	r1, [pc, #228]	; (80044f4 <atan+0x334>)
 800440e:	2000      	movs	r0, #0
 8004410:	f7fc f9c0 	bl	8000794 <__aeabi_ddiv>
 8004414:	f04f 0a03 	mov.w	sl, #3
 8004418:	4604      	mov	r4, r0
 800441a:	460d      	mov	r5, r1
 800441c:	e737      	b.n	800428e <atan+0xce>
 800441e:	4b36      	ldr	r3, [pc, #216]	; (80044f8 <atan+0x338>)
 8004420:	4e36      	ldr	r6, [pc, #216]	; (80044fc <atan+0x33c>)
 8004422:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442a:	f7fb fed1 	bl	80001d0 <__aeabi_dsub>
 800442e:	4622      	mov	r2, r4
 8004430:	462b      	mov	r3, r5
 8004432:	f7fb fecd 	bl	80001d0 <__aeabi_dsub>
 8004436:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800443a:	4602      	mov	r2, r0
 800443c:	460b      	mov	r3, r1
 800443e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8004442:	f7fb fec5 	bl	80001d0 <__aeabi_dsub>
 8004446:	f1bb 0f00 	cmp.w	fp, #0
 800444a:	4604      	mov	r4, r0
 800444c:	460d      	mov	r5, r1
 800444e:	f6bf aed6 	bge.w	80041fe <atan+0x3e>
 8004452:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004456:	461d      	mov	r5, r3
 8004458:	e6d1      	b.n	80041fe <atan+0x3e>
 800445a:	a51d      	add	r5, pc, #116	; (adr r5, 80044d0 <atan+0x310>)
 800445c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004460:	e6cd      	b.n	80041fe <atan+0x3e>
 8004462:	bf00      	nop
 8004464:	f3af 8000 	nop.w
 8004468:	54442d18 	.word	0x54442d18
 800446c:	bff921fb 	.word	0xbff921fb
 8004470:	8800759c 	.word	0x8800759c
 8004474:	7e37e43c 	.word	0x7e37e43c
 8004478:	e322da11 	.word	0xe322da11
 800447c:	3f90ad3a 	.word	0x3f90ad3a
 8004480:	24760deb 	.word	0x24760deb
 8004484:	3fa97b4b 	.word	0x3fa97b4b
 8004488:	a0d03d51 	.word	0xa0d03d51
 800448c:	3fb10d66 	.word	0x3fb10d66
 8004490:	c54c206e 	.word	0xc54c206e
 8004494:	3fb745cd 	.word	0x3fb745cd
 8004498:	920083ff 	.word	0x920083ff
 800449c:	3fc24924 	.word	0x3fc24924
 80044a0:	5555550d 	.word	0x5555550d
 80044a4:	3fd55555 	.word	0x3fd55555
 80044a8:	2c6a6c2f 	.word	0x2c6a6c2f
 80044ac:	bfa2b444 	.word	0xbfa2b444
 80044b0:	52defd9a 	.word	0x52defd9a
 80044b4:	3fadde2d 	.word	0x3fadde2d
 80044b8:	af749a6d 	.word	0xaf749a6d
 80044bc:	3fb3b0f2 	.word	0x3fb3b0f2
 80044c0:	fe231671 	.word	0xfe231671
 80044c4:	3fbc71c6 	.word	0x3fbc71c6
 80044c8:	9998ebc4 	.word	0x9998ebc4
 80044cc:	3fc99999 	.word	0x3fc99999
 80044d0:	54442d18 	.word	0x54442d18
 80044d4:	3ff921fb 	.word	0x3ff921fb
 80044d8:	440fffff 	.word	0x440fffff
 80044dc:	7ff00000 	.word	0x7ff00000
 80044e0:	3fdbffff 	.word	0x3fdbffff
 80044e4:	3ff00000 	.word	0x3ff00000
 80044e8:	3ff2ffff 	.word	0x3ff2ffff
 80044ec:	40038000 	.word	0x40038000
 80044f0:	3ff80000 	.word	0x3ff80000
 80044f4:	bff00000 	.word	0xbff00000
 80044f8:	08005348 	.word	0x08005348
 80044fc:	08005328 	.word	0x08005328

08004500 <fabs>:
 8004500:	ec51 0b10 	vmov	r0, r1, d0
 8004504:	ee10 2a10 	vmov	r2, s0
 8004508:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800450c:	ec43 2b10 	vmov	d0, r2, r3
 8004510:	4770      	bx	lr

08004512 <finite>:
 8004512:	b082      	sub	sp, #8
 8004514:	ed8d 0b00 	vstr	d0, [sp]
 8004518:	9801      	ldr	r0, [sp, #4]
 800451a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800451e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8004522:	0fc0      	lsrs	r0, r0, #31
 8004524:	b002      	add	sp, #8
 8004526:	4770      	bx	lr

08004528 <__ieee754_sqrt>:
 8004528:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800452c:	ec55 4b10 	vmov	r4, r5, d0
 8004530:	4e67      	ldr	r6, [pc, #412]	; (80046d0 <__ieee754_sqrt+0x1a8>)
 8004532:	43ae      	bics	r6, r5
 8004534:	ee10 0a10 	vmov	r0, s0
 8004538:	ee10 2a10 	vmov	r2, s0
 800453c:	4629      	mov	r1, r5
 800453e:	462b      	mov	r3, r5
 8004540:	d10d      	bne.n	800455e <__ieee754_sqrt+0x36>
 8004542:	f7fb fffd 	bl	8000540 <__aeabi_dmul>
 8004546:	4602      	mov	r2, r0
 8004548:	460b      	mov	r3, r1
 800454a:	4620      	mov	r0, r4
 800454c:	4629      	mov	r1, r5
 800454e:	f7fb fe41 	bl	80001d4 <__adddf3>
 8004552:	4604      	mov	r4, r0
 8004554:	460d      	mov	r5, r1
 8004556:	ec45 4b10 	vmov	d0, r4, r5
 800455a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800455e:	2d00      	cmp	r5, #0
 8004560:	dc0b      	bgt.n	800457a <__ieee754_sqrt+0x52>
 8004562:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004566:	4326      	orrs	r6, r4
 8004568:	d0f5      	beq.n	8004556 <__ieee754_sqrt+0x2e>
 800456a:	b135      	cbz	r5, 800457a <__ieee754_sqrt+0x52>
 800456c:	f7fb fe30 	bl	80001d0 <__aeabi_dsub>
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	f7fc f90e 	bl	8000794 <__aeabi_ddiv>
 8004578:	e7eb      	b.n	8004552 <__ieee754_sqrt+0x2a>
 800457a:	1509      	asrs	r1, r1, #20
 800457c:	f000 808d 	beq.w	800469a <__ieee754_sqrt+0x172>
 8004580:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004584:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8004588:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800458c:	07c9      	lsls	r1, r1, #31
 800458e:	bf5c      	itt	pl
 8004590:	005b      	lslpl	r3, r3, #1
 8004592:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8004596:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800459a:	bf58      	it	pl
 800459c:	0052      	lslpl	r2, r2, #1
 800459e:	2500      	movs	r5, #0
 80045a0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80045a4:	1076      	asrs	r6, r6, #1
 80045a6:	0052      	lsls	r2, r2, #1
 80045a8:	f04f 0e16 	mov.w	lr, #22
 80045ac:	46ac      	mov	ip, r5
 80045ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045b2:	eb0c 0001 	add.w	r0, ip, r1
 80045b6:	4298      	cmp	r0, r3
 80045b8:	bfde      	ittt	le
 80045ba:	1a1b      	suble	r3, r3, r0
 80045bc:	eb00 0c01 	addle.w	ip, r0, r1
 80045c0:	186d      	addle	r5, r5, r1
 80045c2:	005b      	lsls	r3, r3, #1
 80045c4:	f1be 0e01 	subs.w	lr, lr, #1
 80045c8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80045cc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80045d0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80045d4:	d1ed      	bne.n	80045b2 <__ieee754_sqrt+0x8a>
 80045d6:	4674      	mov	r4, lr
 80045d8:	2720      	movs	r7, #32
 80045da:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80045de:	4563      	cmp	r3, ip
 80045e0:	eb01 000e 	add.w	r0, r1, lr
 80045e4:	dc02      	bgt.n	80045ec <__ieee754_sqrt+0xc4>
 80045e6:	d113      	bne.n	8004610 <__ieee754_sqrt+0xe8>
 80045e8:	4290      	cmp	r0, r2
 80045ea:	d811      	bhi.n	8004610 <__ieee754_sqrt+0xe8>
 80045ec:	2800      	cmp	r0, #0
 80045ee:	eb00 0e01 	add.w	lr, r0, r1
 80045f2:	da57      	bge.n	80046a4 <__ieee754_sqrt+0x17c>
 80045f4:	f1be 0f00 	cmp.w	lr, #0
 80045f8:	db54      	blt.n	80046a4 <__ieee754_sqrt+0x17c>
 80045fa:	f10c 0801 	add.w	r8, ip, #1
 80045fe:	eba3 030c 	sub.w	r3, r3, ip
 8004602:	4290      	cmp	r0, r2
 8004604:	bf88      	it	hi
 8004606:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800460a:	1a12      	subs	r2, r2, r0
 800460c:	440c      	add	r4, r1
 800460e:	46c4      	mov	ip, r8
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	3f01      	subs	r7, #1
 8004614:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004618:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800461c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004620:	d1dd      	bne.n	80045de <__ieee754_sqrt+0xb6>
 8004622:	4313      	orrs	r3, r2
 8004624:	d01b      	beq.n	800465e <__ieee754_sqrt+0x136>
 8004626:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80046d4 <__ieee754_sqrt+0x1ac>
 800462a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80046d8 <__ieee754_sqrt+0x1b0>
 800462e:	e9da 0100 	ldrd	r0, r1, [sl]
 8004632:	e9db 2300 	ldrd	r2, r3, [fp]
 8004636:	f7fb fdcb 	bl	80001d0 <__aeabi_dsub>
 800463a:	e9da 8900 	ldrd	r8, r9, [sl]
 800463e:	4602      	mov	r2, r0
 8004640:	460b      	mov	r3, r1
 8004642:	4640      	mov	r0, r8
 8004644:	4649      	mov	r1, r9
 8004646:	f7fc f9f7 	bl	8000a38 <__aeabi_dcmple>
 800464a:	b140      	cbz	r0, 800465e <__ieee754_sqrt+0x136>
 800464c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004650:	e9da 0100 	ldrd	r0, r1, [sl]
 8004654:	e9db 2300 	ldrd	r2, r3, [fp]
 8004658:	d126      	bne.n	80046a8 <__ieee754_sqrt+0x180>
 800465a:	3501      	adds	r5, #1
 800465c:	463c      	mov	r4, r7
 800465e:	106a      	asrs	r2, r5, #1
 8004660:	0863      	lsrs	r3, r4, #1
 8004662:	07e9      	lsls	r1, r5, #31
 8004664:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8004668:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800466c:	bf48      	it	mi
 800466e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8004672:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8004676:	461c      	mov	r4, r3
 8004678:	e76d      	b.n	8004556 <__ieee754_sqrt+0x2e>
 800467a:	0ad3      	lsrs	r3, r2, #11
 800467c:	3815      	subs	r0, #21
 800467e:	0552      	lsls	r2, r2, #21
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0fa      	beq.n	800467a <__ieee754_sqrt+0x152>
 8004684:	02dc      	lsls	r4, r3, #11
 8004686:	d50a      	bpl.n	800469e <__ieee754_sqrt+0x176>
 8004688:	f1c1 0420 	rsb	r4, r1, #32
 800468c:	fa22 f404 	lsr.w	r4, r2, r4
 8004690:	1e4d      	subs	r5, r1, #1
 8004692:	408a      	lsls	r2, r1
 8004694:	4323      	orrs	r3, r4
 8004696:	1b41      	subs	r1, r0, r5
 8004698:	e772      	b.n	8004580 <__ieee754_sqrt+0x58>
 800469a:	4608      	mov	r0, r1
 800469c:	e7f0      	b.n	8004680 <__ieee754_sqrt+0x158>
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	3101      	adds	r1, #1
 80046a2:	e7ef      	b.n	8004684 <__ieee754_sqrt+0x15c>
 80046a4:	46e0      	mov	r8, ip
 80046a6:	e7aa      	b.n	80045fe <__ieee754_sqrt+0xd6>
 80046a8:	f7fb fd94 	bl	80001d4 <__adddf3>
 80046ac:	e9da 8900 	ldrd	r8, r9, [sl]
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	4640      	mov	r0, r8
 80046b6:	4649      	mov	r1, r9
 80046b8:	f7fc f9b4 	bl	8000a24 <__aeabi_dcmplt>
 80046bc:	b120      	cbz	r0, 80046c8 <__ieee754_sqrt+0x1a0>
 80046be:	1ca0      	adds	r0, r4, #2
 80046c0:	bf08      	it	eq
 80046c2:	3501      	addeq	r5, #1
 80046c4:	3402      	adds	r4, #2
 80046c6:	e7ca      	b.n	800465e <__ieee754_sqrt+0x136>
 80046c8:	3401      	adds	r4, #1
 80046ca:	f024 0401 	bic.w	r4, r4, #1
 80046ce:	e7c6      	b.n	800465e <__ieee754_sqrt+0x136>
 80046d0:	7ff00000 	.word	0x7ff00000
 80046d4:	20000018 	.word	0x20000018
 80046d8:	20000020 	.word	0x20000020
 80046dc:	00000000 	.word	0x00000000

080046e0 <__ieee754_pow>:
 80046e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046e4:	ed2d 8b06 	vpush	{d8-d10}
 80046e8:	b089      	sub	sp, #36	; 0x24
 80046ea:	ed8d 1b00 	vstr	d1, [sp]
 80046ee:	e9dd 2900 	ldrd	r2, r9, [sp]
 80046f2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80046f6:	ea58 0102 	orrs.w	r1, r8, r2
 80046fa:	ec57 6b10 	vmov	r6, r7, d0
 80046fe:	d115      	bne.n	800472c <__ieee754_pow+0x4c>
 8004700:	19b3      	adds	r3, r6, r6
 8004702:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8004706:	4152      	adcs	r2, r2
 8004708:	4299      	cmp	r1, r3
 800470a:	4b89      	ldr	r3, [pc, #548]	; (8004930 <__ieee754_pow+0x250>)
 800470c:	4193      	sbcs	r3, r2
 800470e:	f080 84d1 	bcs.w	80050b4 <__ieee754_pow+0x9d4>
 8004712:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004716:	4630      	mov	r0, r6
 8004718:	4639      	mov	r1, r7
 800471a:	f7fb fd5b 	bl	80001d4 <__adddf3>
 800471e:	ec41 0b10 	vmov	d0, r0, r1
 8004722:	b009      	add	sp, #36	; 0x24
 8004724:	ecbd 8b06 	vpop	{d8-d10}
 8004728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800472c:	4b81      	ldr	r3, [pc, #516]	; (8004934 <__ieee754_pow+0x254>)
 800472e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8004732:	429c      	cmp	r4, r3
 8004734:	ee10 aa10 	vmov	sl, s0
 8004738:	463d      	mov	r5, r7
 800473a:	dc06      	bgt.n	800474a <__ieee754_pow+0x6a>
 800473c:	d101      	bne.n	8004742 <__ieee754_pow+0x62>
 800473e:	2e00      	cmp	r6, #0
 8004740:	d1e7      	bne.n	8004712 <__ieee754_pow+0x32>
 8004742:	4598      	cmp	r8, r3
 8004744:	dc01      	bgt.n	800474a <__ieee754_pow+0x6a>
 8004746:	d10f      	bne.n	8004768 <__ieee754_pow+0x88>
 8004748:	b172      	cbz	r2, 8004768 <__ieee754_pow+0x88>
 800474a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800474e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8004752:	ea55 050a 	orrs.w	r5, r5, sl
 8004756:	d1dc      	bne.n	8004712 <__ieee754_pow+0x32>
 8004758:	e9dd 3200 	ldrd	r3, r2, [sp]
 800475c:	18db      	adds	r3, r3, r3
 800475e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8004762:	4152      	adcs	r2, r2
 8004764:	429d      	cmp	r5, r3
 8004766:	e7d0      	b.n	800470a <__ieee754_pow+0x2a>
 8004768:	2d00      	cmp	r5, #0
 800476a:	da3b      	bge.n	80047e4 <__ieee754_pow+0x104>
 800476c:	4b72      	ldr	r3, [pc, #456]	; (8004938 <__ieee754_pow+0x258>)
 800476e:	4598      	cmp	r8, r3
 8004770:	dc51      	bgt.n	8004816 <__ieee754_pow+0x136>
 8004772:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004776:	4598      	cmp	r8, r3
 8004778:	f340 84ab 	ble.w	80050d2 <__ieee754_pow+0x9f2>
 800477c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004780:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004784:	2b14      	cmp	r3, #20
 8004786:	dd0f      	ble.n	80047a8 <__ieee754_pow+0xc8>
 8004788:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800478c:	fa22 f103 	lsr.w	r1, r2, r3
 8004790:	fa01 f303 	lsl.w	r3, r1, r3
 8004794:	4293      	cmp	r3, r2
 8004796:	f040 849c 	bne.w	80050d2 <__ieee754_pow+0x9f2>
 800479a:	f001 0101 	and.w	r1, r1, #1
 800479e:	f1c1 0302 	rsb	r3, r1, #2
 80047a2:	9304      	str	r3, [sp, #16]
 80047a4:	b182      	cbz	r2, 80047c8 <__ieee754_pow+0xe8>
 80047a6:	e05f      	b.n	8004868 <__ieee754_pow+0x188>
 80047a8:	2a00      	cmp	r2, #0
 80047aa:	d15b      	bne.n	8004864 <__ieee754_pow+0x184>
 80047ac:	f1c3 0314 	rsb	r3, r3, #20
 80047b0:	fa48 f103 	asr.w	r1, r8, r3
 80047b4:	fa01 f303 	lsl.w	r3, r1, r3
 80047b8:	4543      	cmp	r3, r8
 80047ba:	f040 8487 	bne.w	80050cc <__ieee754_pow+0x9ec>
 80047be:	f001 0101 	and.w	r1, r1, #1
 80047c2:	f1c1 0302 	rsb	r3, r1, #2
 80047c6:	9304      	str	r3, [sp, #16]
 80047c8:	4b5c      	ldr	r3, [pc, #368]	; (800493c <__ieee754_pow+0x25c>)
 80047ca:	4598      	cmp	r8, r3
 80047cc:	d132      	bne.n	8004834 <__ieee754_pow+0x154>
 80047ce:	f1b9 0f00 	cmp.w	r9, #0
 80047d2:	f280 8477 	bge.w	80050c4 <__ieee754_pow+0x9e4>
 80047d6:	4959      	ldr	r1, [pc, #356]	; (800493c <__ieee754_pow+0x25c>)
 80047d8:	4632      	mov	r2, r6
 80047da:	463b      	mov	r3, r7
 80047dc:	2000      	movs	r0, #0
 80047de:	f7fb ffd9 	bl	8000794 <__aeabi_ddiv>
 80047e2:	e79c      	b.n	800471e <__ieee754_pow+0x3e>
 80047e4:	2300      	movs	r3, #0
 80047e6:	9304      	str	r3, [sp, #16]
 80047e8:	2a00      	cmp	r2, #0
 80047ea:	d13d      	bne.n	8004868 <__ieee754_pow+0x188>
 80047ec:	4b51      	ldr	r3, [pc, #324]	; (8004934 <__ieee754_pow+0x254>)
 80047ee:	4598      	cmp	r8, r3
 80047f0:	d1ea      	bne.n	80047c8 <__ieee754_pow+0xe8>
 80047f2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80047f6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80047fa:	ea53 030a 	orrs.w	r3, r3, sl
 80047fe:	f000 8459 	beq.w	80050b4 <__ieee754_pow+0x9d4>
 8004802:	4b4f      	ldr	r3, [pc, #316]	; (8004940 <__ieee754_pow+0x260>)
 8004804:	429c      	cmp	r4, r3
 8004806:	dd08      	ble.n	800481a <__ieee754_pow+0x13a>
 8004808:	f1b9 0f00 	cmp.w	r9, #0
 800480c:	f2c0 8456 	blt.w	80050bc <__ieee754_pow+0x9dc>
 8004810:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004814:	e783      	b.n	800471e <__ieee754_pow+0x3e>
 8004816:	2302      	movs	r3, #2
 8004818:	e7e5      	b.n	80047e6 <__ieee754_pow+0x106>
 800481a:	f1b9 0f00 	cmp.w	r9, #0
 800481e:	f04f 0000 	mov.w	r0, #0
 8004822:	f04f 0100 	mov.w	r1, #0
 8004826:	f6bf af7a 	bge.w	800471e <__ieee754_pow+0x3e>
 800482a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800482e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004832:	e774      	b.n	800471e <__ieee754_pow+0x3e>
 8004834:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8004838:	d106      	bne.n	8004848 <__ieee754_pow+0x168>
 800483a:	4632      	mov	r2, r6
 800483c:	463b      	mov	r3, r7
 800483e:	4630      	mov	r0, r6
 8004840:	4639      	mov	r1, r7
 8004842:	f7fb fe7d 	bl	8000540 <__aeabi_dmul>
 8004846:	e76a      	b.n	800471e <__ieee754_pow+0x3e>
 8004848:	4b3e      	ldr	r3, [pc, #248]	; (8004944 <__ieee754_pow+0x264>)
 800484a:	4599      	cmp	r9, r3
 800484c:	d10c      	bne.n	8004868 <__ieee754_pow+0x188>
 800484e:	2d00      	cmp	r5, #0
 8004850:	db0a      	blt.n	8004868 <__ieee754_pow+0x188>
 8004852:	ec47 6b10 	vmov	d0, r6, r7
 8004856:	b009      	add	sp, #36	; 0x24
 8004858:	ecbd 8b06 	vpop	{d8-d10}
 800485c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004860:	f7ff be62 	b.w	8004528 <__ieee754_sqrt>
 8004864:	2300      	movs	r3, #0
 8004866:	9304      	str	r3, [sp, #16]
 8004868:	ec47 6b10 	vmov	d0, r6, r7
 800486c:	f7ff fe48 	bl	8004500 <fabs>
 8004870:	ec51 0b10 	vmov	r0, r1, d0
 8004874:	f1ba 0f00 	cmp.w	sl, #0
 8004878:	d129      	bne.n	80048ce <__ieee754_pow+0x1ee>
 800487a:	b124      	cbz	r4, 8004886 <__ieee754_pow+0x1a6>
 800487c:	4b2f      	ldr	r3, [pc, #188]	; (800493c <__ieee754_pow+0x25c>)
 800487e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8004882:	429a      	cmp	r2, r3
 8004884:	d123      	bne.n	80048ce <__ieee754_pow+0x1ee>
 8004886:	f1b9 0f00 	cmp.w	r9, #0
 800488a:	da05      	bge.n	8004898 <__ieee754_pow+0x1b8>
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	2000      	movs	r0, #0
 8004892:	492a      	ldr	r1, [pc, #168]	; (800493c <__ieee754_pow+0x25c>)
 8004894:	f7fb ff7e 	bl	8000794 <__aeabi_ddiv>
 8004898:	2d00      	cmp	r5, #0
 800489a:	f6bf af40 	bge.w	800471e <__ieee754_pow+0x3e>
 800489e:	9b04      	ldr	r3, [sp, #16]
 80048a0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80048a4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80048a8:	431c      	orrs	r4, r3
 80048aa:	d108      	bne.n	80048be <__ieee754_pow+0x1de>
 80048ac:	4602      	mov	r2, r0
 80048ae:	460b      	mov	r3, r1
 80048b0:	4610      	mov	r0, r2
 80048b2:	4619      	mov	r1, r3
 80048b4:	f7fb fc8c 	bl	80001d0 <__aeabi_dsub>
 80048b8:	4602      	mov	r2, r0
 80048ba:	460b      	mov	r3, r1
 80048bc:	e78f      	b.n	80047de <__ieee754_pow+0xfe>
 80048be:	9b04      	ldr	r3, [sp, #16]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	f47f af2c 	bne.w	800471e <__ieee754_pow+0x3e>
 80048c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80048ca:	4619      	mov	r1, r3
 80048cc:	e727      	b.n	800471e <__ieee754_pow+0x3e>
 80048ce:	0feb      	lsrs	r3, r5, #31
 80048d0:	3b01      	subs	r3, #1
 80048d2:	9306      	str	r3, [sp, #24]
 80048d4:	9a06      	ldr	r2, [sp, #24]
 80048d6:	9b04      	ldr	r3, [sp, #16]
 80048d8:	4313      	orrs	r3, r2
 80048da:	d102      	bne.n	80048e2 <__ieee754_pow+0x202>
 80048dc:	4632      	mov	r2, r6
 80048de:	463b      	mov	r3, r7
 80048e0:	e7e6      	b.n	80048b0 <__ieee754_pow+0x1d0>
 80048e2:	4b19      	ldr	r3, [pc, #100]	; (8004948 <__ieee754_pow+0x268>)
 80048e4:	4598      	cmp	r8, r3
 80048e6:	f340 80fb 	ble.w	8004ae0 <__ieee754_pow+0x400>
 80048ea:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80048ee:	4598      	cmp	r8, r3
 80048f0:	4b13      	ldr	r3, [pc, #76]	; (8004940 <__ieee754_pow+0x260>)
 80048f2:	dd0c      	ble.n	800490e <__ieee754_pow+0x22e>
 80048f4:	429c      	cmp	r4, r3
 80048f6:	dc0f      	bgt.n	8004918 <__ieee754_pow+0x238>
 80048f8:	f1b9 0f00 	cmp.w	r9, #0
 80048fc:	da0f      	bge.n	800491e <__ieee754_pow+0x23e>
 80048fe:	2000      	movs	r0, #0
 8004900:	b009      	add	sp, #36	; 0x24
 8004902:	ecbd 8b06 	vpop	{d8-d10}
 8004906:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800490a:	f000 bcba 	b.w	8005282 <__math_oflow>
 800490e:	429c      	cmp	r4, r3
 8004910:	dbf2      	blt.n	80048f8 <__ieee754_pow+0x218>
 8004912:	4b0a      	ldr	r3, [pc, #40]	; (800493c <__ieee754_pow+0x25c>)
 8004914:	429c      	cmp	r4, r3
 8004916:	dd19      	ble.n	800494c <__ieee754_pow+0x26c>
 8004918:	f1b9 0f00 	cmp.w	r9, #0
 800491c:	dcef      	bgt.n	80048fe <__ieee754_pow+0x21e>
 800491e:	2000      	movs	r0, #0
 8004920:	b009      	add	sp, #36	; 0x24
 8004922:	ecbd 8b06 	vpop	{d8-d10}
 8004926:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800492a:	f000 bca1 	b.w	8005270 <__math_uflow>
 800492e:	bf00      	nop
 8004930:	fff00000 	.word	0xfff00000
 8004934:	7ff00000 	.word	0x7ff00000
 8004938:	433fffff 	.word	0x433fffff
 800493c:	3ff00000 	.word	0x3ff00000
 8004940:	3fefffff 	.word	0x3fefffff
 8004944:	3fe00000 	.word	0x3fe00000
 8004948:	41e00000 	.word	0x41e00000
 800494c:	4b60      	ldr	r3, [pc, #384]	; (8004ad0 <__ieee754_pow+0x3f0>)
 800494e:	2200      	movs	r2, #0
 8004950:	f7fb fc3e 	bl	80001d0 <__aeabi_dsub>
 8004954:	a354      	add	r3, pc, #336	; (adr r3, 8004aa8 <__ieee754_pow+0x3c8>)
 8004956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495a:	4604      	mov	r4, r0
 800495c:	460d      	mov	r5, r1
 800495e:	f7fb fdef 	bl	8000540 <__aeabi_dmul>
 8004962:	a353      	add	r3, pc, #332	; (adr r3, 8004ab0 <__ieee754_pow+0x3d0>)
 8004964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004968:	4606      	mov	r6, r0
 800496a:	460f      	mov	r7, r1
 800496c:	4620      	mov	r0, r4
 800496e:	4629      	mov	r1, r5
 8004970:	f7fb fde6 	bl	8000540 <__aeabi_dmul>
 8004974:	4b57      	ldr	r3, [pc, #348]	; (8004ad4 <__ieee754_pow+0x3f4>)
 8004976:	4682      	mov	sl, r0
 8004978:	468b      	mov	fp, r1
 800497a:	2200      	movs	r2, #0
 800497c:	4620      	mov	r0, r4
 800497e:	4629      	mov	r1, r5
 8004980:	f7fb fdde 	bl	8000540 <__aeabi_dmul>
 8004984:	4602      	mov	r2, r0
 8004986:	460b      	mov	r3, r1
 8004988:	a14b      	add	r1, pc, #300	; (adr r1, 8004ab8 <__ieee754_pow+0x3d8>)
 800498a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800498e:	f7fb fc1f 	bl	80001d0 <__aeabi_dsub>
 8004992:	4622      	mov	r2, r4
 8004994:	462b      	mov	r3, r5
 8004996:	f7fb fdd3 	bl	8000540 <__aeabi_dmul>
 800499a:	4602      	mov	r2, r0
 800499c:	460b      	mov	r3, r1
 800499e:	2000      	movs	r0, #0
 80049a0:	494d      	ldr	r1, [pc, #308]	; (8004ad8 <__ieee754_pow+0x3f8>)
 80049a2:	f7fb fc15 	bl	80001d0 <__aeabi_dsub>
 80049a6:	4622      	mov	r2, r4
 80049a8:	4680      	mov	r8, r0
 80049aa:	4689      	mov	r9, r1
 80049ac:	462b      	mov	r3, r5
 80049ae:	4620      	mov	r0, r4
 80049b0:	4629      	mov	r1, r5
 80049b2:	f7fb fdc5 	bl	8000540 <__aeabi_dmul>
 80049b6:	4602      	mov	r2, r0
 80049b8:	460b      	mov	r3, r1
 80049ba:	4640      	mov	r0, r8
 80049bc:	4649      	mov	r1, r9
 80049be:	f7fb fdbf 	bl	8000540 <__aeabi_dmul>
 80049c2:	a33f      	add	r3, pc, #252	; (adr r3, 8004ac0 <__ieee754_pow+0x3e0>)
 80049c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c8:	f7fb fdba 	bl	8000540 <__aeabi_dmul>
 80049cc:	4602      	mov	r2, r0
 80049ce:	460b      	mov	r3, r1
 80049d0:	4650      	mov	r0, sl
 80049d2:	4659      	mov	r1, fp
 80049d4:	f7fb fbfc 	bl	80001d0 <__aeabi_dsub>
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	4680      	mov	r8, r0
 80049de:	4689      	mov	r9, r1
 80049e0:	4630      	mov	r0, r6
 80049e2:	4639      	mov	r1, r7
 80049e4:	f7fb fbf6 	bl	80001d4 <__adddf3>
 80049e8:	2000      	movs	r0, #0
 80049ea:	4632      	mov	r2, r6
 80049ec:	463b      	mov	r3, r7
 80049ee:	4604      	mov	r4, r0
 80049f0:	460d      	mov	r5, r1
 80049f2:	f7fb fbed 	bl	80001d0 <__aeabi_dsub>
 80049f6:	4602      	mov	r2, r0
 80049f8:	460b      	mov	r3, r1
 80049fa:	4640      	mov	r0, r8
 80049fc:	4649      	mov	r1, r9
 80049fe:	f7fb fbe7 	bl	80001d0 <__aeabi_dsub>
 8004a02:	9b04      	ldr	r3, [sp, #16]
 8004a04:	9a06      	ldr	r2, [sp, #24]
 8004a06:	3b01      	subs	r3, #1
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	4682      	mov	sl, r0
 8004a0c:	468b      	mov	fp, r1
 8004a0e:	f040 81e7 	bne.w	8004de0 <__ieee754_pow+0x700>
 8004a12:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8004ac8 <__ieee754_pow+0x3e8>
 8004a16:	eeb0 8a47 	vmov.f32	s16, s14
 8004a1a:	eef0 8a67 	vmov.f32	s17, s15
 8004a1e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004a22:	2600      	movs	r6, #0
 8004a24:	4632      	mov	r2, r6
 8004a26:	463b      	mov	r3, r7
 8004a28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a2c:	f7fb fbd0 	bl	80001d0 <__aeabi_dsub>
 8004a30:	4622      	mov	r2, r4
 8004a32:	462b      	mov	r3, r5
 8004a34:	f7fb fd84 	bl	8000540 <__aeabi_dmul>
 8004a38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a3c:	4680      	mov	r8, r0
 8004a3e:	4689      	mov	r9, r1
 8004a40:	4650      	mov	r0, sl
 8004a42:	4659      	mov	r1, fp
 8004a44:	f7fb fd7c 	bl	8000540 <__aeabi_dmul>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	4640      	mov	r0, r8
 8004a4e:	4649      	mov	r1, r9
 8004a50:	f7fb fbc0 	bl	80001d4 <__adddf3>
 8004a54:	4632      	mov	r2, r6
 8004a56:	463b      	mov	r3, r7
 8004a58:	4680      	mov	r8, r0
 8004a5a:	4689      	mov	r9, r1
 8004a5c:	4620      	mov	r0, r4
 8004a5e:	4629      	mov	r1, r5
 8004a60:	f7fb fd6e 	bl	8000540 <__aeabi_dmul>
 8004a64:	460b      	mov	r3, r1
 8004a66:	4604      	mov	r4, r0
 8004a68:	460d      	mov	r5, r1
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	4649      	mov	r1, r9
 8004a6e:	4640      	mov	r0, r8
 8004a70:	f7fb fbb0 	bl	80001d4 <__adddf3>
 8004a74:	4b19      	ldr	r3, [pc, #100]	; (8004adc <__ieee754_pow+0x3fc>)
 8004a76:	4299      	cmp	r1, r3
 8004a78:	ec45 4b19 	vmov	d9, r4, r5
 8004a7c:	4606      	mov	r6, r0
 8004a7e:	460f      	mov	r7, r1
 8004a80:	468b      	mov	fp, r1
 8004a82:	f340 82f0 	ble.w	8005066 <__ieee754_pow+0x986>
 8004a86:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004a8a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004a8e:	4303      	orrs	r3, r0
 8004a90:	f000 81e4 	beq.w	8004e5c <__ieee754_pow+0x77c>
 8004a94:	ec51 0b18 	vmov	r0, r1, d8
 8004a98:	2200      	movs	r2, #0
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	f7fb ffc2 	bl	8000a24 <__aeabi_dcmplt>
 8004aa0:	3800      	subs	r0, #0
 8004aa2:	bf18      	it	ne
 8004aa4:	2001      	movne	r0, #1
 8004aa6:	e72b      	b.n	8004900 <__ieee754_pow+0x220>
 8004aa8:	60000000 	.word	0x60000000
 8004aac:	3ff71547 	.word	0x3ff71547
 8004ab0:	f85ddf44 	.word	0xf85ddf44
 8004ab4:	3e54ae0b 	.word	0x3e54ae0b
 8004ab8:	55555555 	.word	0x55555555
 8004abc:	3fd55555 	.word	0x3fd55555
 8004ac0:	652b82fe 	.word	0x652b82fe
 8004ac4:	3ff71547 	.word	0x3ff71547
 8004ac8:	00000000 	.word	0x00000000
 8004acc:	bff00000 	.word	0xbff00000
 8004ad0:	3ff00000 	.word	0x3ff00000
 8004ad4:	3fd00000 	.word	0x3fd00000
 8004ad8:	3fe00000 	.word	0x3fe00000
 8004adc:	408fffff 	.word	0x408fffff
 8004ae0:	4bd5      	ldr	r3, [pc, #852]	; (8004e38 <__ieee754_pow+0x758>)
 8004ae2:	402b      	ands	r3, r5
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	b92b      	cbnz	r3, 8004af4 <__ieee754_pow+0x414>
 8004ae8:	4bd4      	ldr	r3, [pc, #848]	; (8004e3c <__ieee754_pow+0x75c>)
 8004aea:	f7fb fd29 	bl	8000540 <__aeabi_dmul>
 8004aee:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004af2:	460c      	mov	r4, r1
 8004af4:	1523      	asrs	r3, r4, #20
 8004af6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004afa:	4413      	add	r3, r2
 8004afc:	9305      	str	r3, [sp, #20]
 8004afe:	4bd0      	ldr	r3, [pc, #832]	; (8004e40 <__ieee754_pow+0x760>)
 8004b00:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004b04:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004b08:	429c      	cmp	r4, r3
 8004b0a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004b0e:	dd08      	ble.n	8004b22 <__ieee754_pow+0x442>
 8004b10:	4bcc      	ldr	r3, [pc, #816]	; (8004e44 <__ieee754_pow+0x764>)
 8004b12:	429c      	cmp	r4, r3
 8004b14:	f340 8162 	ble.w	8004ddc <__ieee754_pow+0x6fc>
 8004b18:	9b05      	ldr	r3, [sp, #20]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	9305      	str	r3, [sp, #20]
 8004b1e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004b22:	2400      	movs	r4, #0
 8004b24:	00e3      	lsls	r3, r4, #3
 8004b26:	9307      	str	r3, [sp, #28]
 8004b28:	4bc7      	ldr	r3, [pc, #796]	; (8004e48 <__ieee754_pow+0x768>)
 8004b2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004b2e:	ed93 7b00 	vldr	d7, [r3]
 8004b32:	4629      	mov	r1, r5
 8004b34:	ec53 2b17 	vmov	r2, r3, d7
 8004b38:	eeb0 9a47 	vmov.f32	s18, s14
 8004b3c:	eef0 9a67 	vmov.f32	s19, s15
 8004b40:	4682      	mov	sl, r0
 8004b42:	f7fb fb45 	bl	80001d0 <__aeabi_dsub>
 8004b46:	4652      	mov	r2, sl
 8004b48:	4606      	mov	r6, r0
 8004b4a:	460f      	mov	r7, r1
 8004b4c:	462b      	mov	r3, r5
 8004b4e:	ec51 0b19 	vmov	r0, r1, d9
 8004b52:	f7fb fb3f 	bl	80001d4 <__adddf3>
 8004b56:	4602      	mov	r2, r0
 8004b58:	460b      	mov	r3, r1
 8004b5a:	2000      	movs	r0, #0
 8004b5c:	49bb      	ldr	r1, [pc, #748]	; (8004e4c <__ieee754_pow+0x76c>)
 8004b5e:	f7fb fe19 	bl	8000794 <__aeabi_ddiv>
 8004b62:	ec41 0b1a 	vmov	d10, r0, r1
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4630      	mov	r0, r6
 8004b6c:	4639      	mov	r1, r7
 8004b6e:	f7fb fce7 	bl	8000540 <__aeabi_dmul>
 8004b72:	2300      	movs	r3, #0
 8004b74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b78:	9302      	str	r3, [sp, #8]
 8004b7a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004b7e:	46ab      	mov	fp, r5
 8004b80:	106d      	asrs	r5, r5, #1
 8004b82:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004b86:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004b8a:	ec41 0b18 	vmov	d8, r0, r1
 8004b8e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8004b92:	2200      	movs	r2, #0
 8004b94:	4640      	mov	r0, r8
 8004b96:	4649      	mov	r1, r9
 8004b98:	4614      	mov	r4, r2
 8004b9a:	461d      	mov	r5, r3
 8004b9c:	f7fb fcd0 	bl	8000540 <__aeabi_dmul>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	4630      	mov	r0, r6
 8004ba6:	4639      	mov	r1, r7
 8004ba8:	f7fb fb12 	bl	80001d0 <__aeabi_dsub>
 8004bac:	ec53 2b19 	vmov	r2, r3, d9
 8004bb0:	4606      	mov	r6, r0
 8004bb2:	460f      	mov	r7, r1
 8004bb4:	4620      	mov	r0, r4
 8004bb6:	4629      	mov	r1, r5
 8004bb8:	f7fb fb0a 	bl	80001d0 <__aeabi_dsub>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	4650      	mov	r0, sl
 8004bc2:	4659      	mov	r1, fp
 8004bc4:	f7fb fb04 	bl	80001d0 <__aeabi_dsub>
 8004bc8:	4642      	mov	r2, r8
 8004bca:	464b      	mov	r3, r9
 8004bcc:	f7fb fcb8 	bl	8000540 <__aeabi_dmul>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	4630      	mov	r0, r6
 8004bd6:	4639      	mov	r1, r7
 8004bd8:	f7fb fafa 	bl	80001d0 <__aeabi_dsub>
 8004bdc:	ec53 2b1a 	vmov	r2, r3, d10
 8004be0:	f7fb fcae 	bl	8000540 <__aeabi_dmul>
 8004be4:	ec53 2b18 	vmov	r2, r3, d8
 8004be8:	ec41 0b19 	vmov	d9, r0, r1
 8004bec:	ec51 0b18 	vmov	r0, r1, d8
 8004bf0:	f7fb fca6 	bl	8000540 <__aeabi_dmul>
 8004bf4:	a37c      	add	r3, pc, #496	; (adr r3, 8004de8 <__ieee754_pow+0x708>)
 8004bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfa:	4604      	mov	r4, r0
 8004bfc:	460d      	mov	r5, r1
 8004bfe:	f7fb fc9f 	bl	8000540 <__aeabi_dmul>
 8004c02:	a37b      	add	r3, pc, #492	; (adr r3, 8004df0 <__ieee754_pow+0x710>)
 8004c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c08:	f7fb fae4 	bl	80001d4 <__adddf3>
 8004c0c:	4622      	mov	r2, r4
 8004c0e:	462b      	mov	r3, r5
 8004c10:	f7fb fc96 	bl	8000540 <__aeabi_dmul>
 8004c14:	a378      	add	r3, pc, #480	; (adr r3, 8004df8 <__ieee754_pow+0x718>)
 8004c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1a:	f7fb fadb 	bl	80001d4 <__adddf3>
 8004c1e:	4622      	mov	r2, r4
 8004c20:	462b      	mov	r3, r5
 8004c22:	f7fb fc8d 	bl	8000540 <__aeabi_dmul>
 8004c26:	a376      	add	r3, pc, #472	; (adr r3, 8004e00 <__ieee754_pow+0x720>)
 8004c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2c:	f7fb fad2 	bl	80001d4 <__adddf3>
 8004c30:	4622      	mov	r2, r4
 8004c32:	462b      	mov	r3, r5
 8004c34:	f7fb fc84 	bl	8000540 <__aeabi_dmul>
 8004c38:	a373      	add	r3, pc, #460	; (adr r3, 8004e08 <__ieee754_pow+0x728>)
 8004c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3e:	f7fb fac9 	bl	80001d4 <__adddf3>
 8004c42:	4622      	mov	r2, r4
 8004c44:	462b      	mov	r3, r5
 8004c46:	f7fb fc7b 	bl	8000540 <__aeabi_dmul>
 8004c4a:	a371      	add	r3, pc, #452	; (adr r3, 8004e10 <__ieee754_pow+0x730>)
 8004c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c50:	f7fb fac0 	bl	80001d4 <__adddf3>
 8004c54:	4622      	mov	r2, r4
 8004c56:	4606      	mov	r6, r0
 8004c58:	460f      	mov	r7, r1
 8004c5a:	462b      	mov	r3, r5
 8004c5c:	4620      	mov	r0, r4
 8004c5e:	4629      	mov	r1, r5
 8004c60:	f7fb fc6e 	bl	8000540 <__aeabi_dmul>
 8004c64:	4602      	mov	r2, r0
 8004c66:	460b      	mov	r3, r1
 8004c68:	4630      	mov	r0, r6
 8004c6a:	4639      	mov	r1, r7
 8004c6c:	f7fb fc68 	bl	8000540 <__aeabi_dmul>
 8004c70:	4642      	mov	r2, r8
 8004c72:	4604      	mov	r4, r0
 8004c74:	460d      	mov	r5, r1
 8004c76:	464b      	mov	r3, r9
 8004c78:	ec51 0b18 	vmov	r0, r1, d8
 8004c7c:	f7fb faaa 	bl	80001d4 <__adddf3>
 8004c80:	ec53 2b19 	vmov	r2, r3, d9
 8004c84:	f7fb fc5c 	bl	8000540 <__aeabi_dmul>
 8004c88:	4622      	mov	r2, r4
 8004c8a:	462b      	mov	r3, r5
 8004c8c:	f7fb faa2 	bl	80001d4 <__adddf3>
 8004c90:	4642      	mov	r2, r8
 8004c92:	4682      	mov	sl, r0
 8004c94:	468b      	mov	fp, r1
 8004c96:	464b      	mov	r3, r9
 8004c98:	4640      	mov	r0, r8
 8004c9a:	4649      	mov	r1, r9
 8004c9c:	f7fb fc50 	bl	8000540 <__aeabi_dmul>
 8004ca0:	4b6b      	ldr	r3, [pc, #428]	; (8004e50 <__ieee754_pow+0x770>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	4606      	mov	r6, r0
 8004ca6:	460f      	mov	r7, r1
 8004ca8:	f7fb fa94 	bl	80001d4 <__adddf3>
 8004cac:	4652      	mov	r2, sl
 8004cae:	465b      	mov	r3, fp
 8004cb0:	f7fb fa90 	bl	80001d4 <__adddf3>
 8004cb4:	2000      	movs	r0, #0
 8004cb6:	4604      	mov	r4, r0
 8004cb8:	460d      	mov	r5, r1
 8004cba:	4602      	mov	r2, r0
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	4640      	mov	r0, r8
 8004cc0:	4649      	mov	r1, r9
 8004cc2:	f7fb fc3d 	bl	8000540 <__aeabi_dmul>
 8004cc6:	4b62      	ldr	r3, [pc, #392]	; (8004e50 <__ieee754_pow+0x770>)
 8004cc8:	4680      	mov	r8, r0
 8004cca:	4689      	mov	r9, r1
 8004ccc:	2200      	movs	r2, #0
 8004cce:	4620      	mov	r0, r4
 8004cd0:	4629      	mov	r1, r5
 8004cd2:	f7fb fa7d 	bl	80001d0 <__aeabi_dsub>
 8004cd6:	4632      	mov	r2, r6
 8004cd8:	463b      	mov	r3, r7
 8004cda:	f7fb fa79 	bl	80001d0 <__aeabi_dsub>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	4650      	mov	r0, sl
 8004ce4:	4659      	mov	r1, fp
 8004ce6:	f7fb fa73 	bl	80001d0 <__aeabi_dsub>
 8004cea:	ec53 2b18 	vmov	r2, r3, d8
 8004cee:	f7fb fc27 	bl	8000540 <__aeabi_dmul>
 8004cf2:	4622      	mov	r2, r4
 8004cf4:	4606      	mov	r6, r0
 8004cf6:	460f      	mov	r7, r1
 8004cf8:	462b      	mov	r3, r5
 8004cfa:	ec51 0b19 	vmov	r0, r1, d9
 8004cfe:	f7fb fc1f 	bl	8000540 <__aeabi_dmul>
 8004d02:	4602      	mov	r2, r0
 8004d04:	460b      	mov	r3, r1
 8004d06:	4630      	mov	r0, r6
 8004d08:	4639      	mov	r1, r7
 8004d0a:	f7fb fa63 	bl	80001d4 <__adddf3>
 8004d0e:	4606      	mov	r6, r0
 8004d10:	460f      	mov	r7, r1
 8004d12:	4602      	mov	r2, r0
 8004d14:	460b      	mov	r3, r1
 8004d16:	4640      	mov	r0, r8
 8004d18:	4649      	mov	r1, r9
 8004d1a:	f7fb fa5b 	bl	80001d4 <__adddf3>
 8004d1e:	a33e      	add	r3, pc, #248	; (adr r3, 8004e18 <__ieee754_pow+0x738>)
 8004d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d24:	2000      	movs	r0, #0
 8004d26:	4604      	mov	r4, r0
 8004d28:	460d      	mov	r5, r1
 8004d2a:	f7fb fc09 	bl	8000540 <__aeabi_dmul>
 8004d2e:	4642      	mov	r2, r8
 8004d30:	ec41 0b18 	vmov	d8, r0, r1
 8004d34:	464b      	mov	r3, r9
 8004d36:	4620      	mov	r0, r4
 8004d38:	4629      	mov	r1, r5
 8004d3a:	f7fb fa49 	bl	80001d0 <__aeabi_dsub>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	460b      	mov	r3, r1
 8004d42:	4630      	mov	r0, r6
 8004d44:	4639      	mov	r1, r7
 8004d46:	f7fb fa43 	bl	80001d0 <__aeabi_dsub>
 8004d4a:	a335      	add	r3, pc, #212	; (adr r3, 8004e20 <__ieee754_pow+0x740>)
 8004d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d50:	f7fb fbf6 	bl	8000540 <__aeabi_dmul>
 8004d54:	a334      	add	r3, pc, #208	; (adr r3, 8004e28 <__ieee754_pow+0x748>)
 8004d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5a:	4606      	mov	r6, r0
 8004d5c:	460f      	mov	r7, r1
 8004d5e:	4620      	mov	r0, r4
 8004d60:	4629      	mov	r1, r5
 8004d62:	f7fb fbed 	bl	8000540 <__aeabi_dmul>
 8004d66:	4602      	mov	r2, r0
 8004d68:	460b      	mov	r3, r1
 8004d6a:	4630      	mov	r0, r6
 8004d6c:	4639      	mov	r1, r7
 8004d6e:	f7fb fa31 	bl	80001d4 <__adddf3>
 8004d72:	9a07      	ldr	r2, [sp, #28]
 8004d74:	4b37      	ldr	r3, [pc, #220]	; (8004e54 <__ieee754_pow+0x774>)
 8004d76:	4413      	add	r3, r2
 8004d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7c:	f7fb fa2a 	bl	80001d4 <__adddf3>
 8004d80:	4682      	mov	sl, r0
 8004d82:	9805      	ldr	r0, [sp, #20]
 8004d84:	468b      	mov	fp, r1
 8004d86:	f7fb fb71 	bl	800046c <__aeabi_i2d>
 8004d8a:	9a07      	ldr	r2, [sp, #28]
 8004d8c:	4b32      	ldr	r3, [pc, #200]	; (8004e58 <__ieee754_pow+0x778>)
 8004d8e:	4413      	add	r3, r2
 8004d90:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004d94:	4606      	mov	r6, r0
 8004d96:	460f      	mov	r7, r1
 8004d98:	4652      	mov	r2, sl
 8004d9a:	465b      	mov	r3, fp
 8004d9c:	ec51 0b18 	vmov	r0, r1, d8
 8004da0:	f7fb fa18 	bl	80001d4 <__adddf3>
 8004da4:	4642      	mov	r2, r8
 8004da6:	464b      	mov	r3, r9
 8004da8:	f7fb fa14 	bl	80001d4 <__adddf3>
 8004dac:	4632      	mov	r2, r6
 8004dae:	463b      	mov	r3, r7
 8004db0:	f7fb fa10 	bl	80001d4 <__adddf3>
 8004db4:	2000      	movs	r0, #0
 8004db6:	4632      	mov	r2, r6
 8004db8:	463b      	mov	r3, r7
 8004dba:	4604      	mov	r4, r0
 8004dbc:	460d      	mov	r5, r1
 8004dbe:	f7fb fa07 	bl	80001d0 <__aeabi_dsub>
 8004dc2:	4642      	mov	r2, r8
 8004dc4:	464b      	mov	r3, r9
 8004dc6:	f7fb fa03 	bl	80001d0 <__aeabi_dsub>
 8004dca:	ec53 2b18 	vmov	r2, r3, d8
 8004dce:	f7fb f9ff 	bl	80001d0 <__aeabi_dsub>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	4650      	mov	r0, sl
 8004dd8:	4659      	mov	r1, fp
 8004dda:	e610      	b.n	80049fe <__ieee754_pow+0x31e>
 8004ddc:	2401      	movs	r4, #1
 8004dde:	e6a1      	b.n	8004b24 <__ieee754_pow+0x444>
 8004de0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8004e30 <__ieee754_pow+0x750>
 8004de4:	e617      	b.n	8004a16 <__ieee754_pow+0x336>
 8004de6:	bf00      	nop
 8004de8:	4a454eef 	.word	0x4a454eef
 8004dec:	3fca7e28 	.word	0x3fca7e28
 8004df0:	93c9db65 	.word	0x93c9db65
 8004df4:	3fcd864a 	.word	0x3fcd864a
 8004df8:	a91d4101 	.word	0xa91d4101
 8004dfc:	3fd17460 	.word	0x3fd17460
 8004e00:	518f264d 	.word	0x518f264d
 8004e04:	3fd55555 	.word	0x3fd55555
 8004e08:	db6fabff 	.word	0xdb6fabff
 8004e0c:	3fdb6db6 	.word	0x3fdb6db6
 8004e10:	33333303 	.word	0x33333303
 8004e14:	3fe33333 	.word	0x3fe33333
 8004e18:	e0000000 	.word	0xe0000000
 8004e1c:	3feec709 	.word	0x3feec709
 8004e20:	dc3a03fd 	.word	0xdc3a03fd
 8004e24:	3feec709 	.word	0x3feec709
 8004e28:	145b01f5 	.word	0x145b01f5
 8004e2c:	be3e2fe0 	.word	0xbe3e2fe0
 8004e30:	00000000 	.word	0x00000000
 8004e34:	3ff00000 	.word	0x3ff00000
 8004e38:	7ff00000 	.word	0x7ff00000
 8004e3c:	43400000 	.word	0x43400000
 8004e40:	0003988e 	.word	0x0003988e
 8004e44:	000bb679 	.word	0x000bb679
 8004e48:	08005368 	.word	0x08005368
 8004e4c:	3ff00000 	.word	0x3ff00000
 8004e50:	40080000 	.word	0x40080000
 8004e54:	08005388 	.word	0x08005388
 8004e58:	08005378 	.word	0x08005378
 8004e5c:	a3b3      	add	r3, pc, #716	; (adr r3, 800512c <__ieee754_pow+0xa4c>)
 8004e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e62:	4640      	mov	r0, r8
 8004e64:	4649      	mov	r1, r9
 8004e66:	f7fb f9b5 	bl	80001d4 <__adddf3>
 8004e6a:	4622      	mov	r2, r4
 8004e6c:	ec41 0b1a 	vmov	d10, r0, r1
 8004e70:	462b      	mov	r3, r5
 8004e72:	4630      	mov	r0, r6
 8004e74:	4639      	mov	r1, r7
 8004e76:	f7fb f9ab 	bl	80001d0 <__aeabi_dsub>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	ec51 0b1a 	vmov	r0, r1, d10
 8004e82:	f7fb fded 	bl	8000a60 <__aeabi_dcmpgt>
 8004e86:	2800      	cmp	r0, #0
 8004e88:	f47f ae04 	bne.w	8004a94 <__ieee754_pow+0x3b4>
 8004e8c:	4aa2      	ldr	r2, [pc, #648]	; (8005118 <__ieee754_pow+0xa38>)
 8004e8e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004e92:	4293      	cmp	r3, r2
 8004e94:	f340 8107 	ble.w	80050a6 <__ieee754_pow+0x9c6>
 8004e98:	151b      	asrs	r3, r3, #20
 8004e9a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004e9e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004ea2:	fa4a fa03 	asr.w	sl, sl, r3
 8004ea6:	44da      	add	sl, fp
 8004ea8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8004eac:	489b      	ldr	r0, [pc, #620]	; (800511c <__ieee754_pow+0xa3c>)
 8004eae:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8004eb2:	4108      	asrs	r0, r1
 8004eb4:	ea00 030a 	and.w	r3, r0, sl
 8004eb8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8004ebc:	f1c1 0114 	rsb	r1, r1, #20
 8004ec0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004ec4:	fa4a fa01 	asr.w	sl, sl, r1
 8004ec8:	f1bb 0f00 	cmp.w	fp, #0
 8004ecc:	f04f 0200 	mov.w	r2, #0
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	4629      	mov	r1, r5
 8004ed4:	bfb8      	it	lt
 8004ed6:	f1ca 0a00 	rsblt	sl, sl, #0
 8004eda:	f7fb f979 	bl	80001d0 <__aeabi_dsub>
 8004ede:	ec41 0b19 	vmov	d9, r0, r1
 8004ee2:	4642      	mov	r2, r8
 8004ee4:	464b      	mov	r3, r9
 8004ee6:	ec51 0b19 	vmov	r0, r1, d9
 8004eea:	f7fb f973 	bl	80001d4 <__adddf3>
 8004eee:	a37a      	add	r3, pc, #488	; (adr r3, 80050d8 <__ieee754_pow+0x9f8>)
 8004ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef4:	2000      	movs	r0, #0
 8004ef6:	4604      	mov	r4, r0
 8004ef8:	460d      	mov	r5, r1
 8004efa:	f7fb fb21 	bl	8000540 <__aeabi_dmul>
 8004efe:	ec53 2b19 	vmov	r2, r3, d9
 8004f02:	4606      	mov	r6, r0
 8004f04:	460f      	mov	r7, r1
 8004f06:	4620      	mov	r0, r4
 8004f08:	4629      	mov	r1, r5
 8004f0a:	f7fb f961 	bl	80001d0 <__aeabi_dsub>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	460b      	mov	r3, r1
 8004f12:	4640      	mov	r0, r8
 8004f14:	4649      	mov	r1, r9
 8004f16:	f7fb f95b 	bl	80001d0 <__aeabi_dsub>
 8004f1a:	a371      	add	r3, pc, #452	; (adr r3, 80050e0 <__ieee754_pow+0xa00>)
 8004f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f20:	f7fb fb0e 	bl	8000540 <__aeabi_dmul>
 8004f24:	a370      	add	r3, pc, #448	; (adr r3, 80050e8 <__ieee754_pow+0xa08>)
 8004f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2a:	4680      	mov	r8, r0
 8004f2c:	4689      	mov	r9, r1
 8004f2e:	4620      	mov	r0, r4
 8004f30:	4629      	mov	r1, r5
 8004f32:	f7fb fb05 	bl	8000540 <__aeabi_dmul>
 8004f36:	4602      	mov	r2, r0
 8004f38:	460b      	mov	r3, r1
 8004f3a:	4640      	mov	r0, r8
 8004f3c:	4649      	mov	r1, r9
 8004f3e:	f7fb f949 	bl	80001d4 <__adddf3>
 8004f42:	4604      	mov	r4, r0
 8004f44:	460d      	mov	r5, r1
 8004f46:	4602      	mov	r2, r0
 8004f48:	460b      	mov	r3, r1
 8004f4a:	4630      	mov	r0, r6
 8004f4c:	4639      	mov	r1, r7
 8004f4e:	f7fb f941 	bl	80001d4 <__adddf3>
 8004f52:	4632      	mov	r2, r6
 8004f54:	463b      	mov	r3, r7
 8004f56:	4680      	mov	r8, r0
 8004f58:	4689      	mov	r9, r1
 8004f5a:	f7fb f939 	bl	80001d0 <__aeabi_dsub>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	460b      	mov	r3, r1
 8004f62:	4620      	mov	r0, r4
 8004f64:	4629      	mov	r1, r5
 8004f66:	f7fb f933 	bl	80001d0 <__aeabi_dsub>
 8004f6a:	4642      	mov	r2, r8
 8004f6c:	4606      	mov	r6, r0
 8004f6e:	460f      	mov	r7, r1
 8004f70:	464b      	mov	r3, r9
 8004f72:	4640      	mov	r0, r8
 8004f74:	4649      	mov	r1, r9
 8004f76:	f7fb fae3 	bl	8000540 <__aeabi_dmul>
 8004f7a:	a35d      	add	r3, pc, #372	; (adr r3, 80050f0 <__ieee754_pow+0xa10>)
 8004f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f80:	4604      	mov	r4, r0
 8004f82:	460d      	mov	r5, r1
 8004f84:	f7fb fadc 	bl	8000540 <__aeabi_dmul>
 8004f88:	a35b      	add	r3, pc, #364	; (adr r3, 80050f8 <__ieee754_pow+0xa18>)
 8004f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8e:	f7fb f91f 	bl	80001d0 <__aeabi_dsub>
 8004f92:	4622      	mov	r2, r4
 8004f94:	462b      	mov	r3, r5
 8004f96:	f7fb fad3 	bl	8000540 <__aeabi_dmul>
 8004f9a:	a359      	add	r3, pc, #356	; (adr r3, 8005100 <__ieee754_pow+0xa20>)
 8004f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa0:	f7fb f918 	bl	80001d4 <__adddf3>
 8004fa4:	4622      	mov	r2, r4
 8004fa6:	462b      	mov	r3, r5
 8004fa8:	f7fb faca 	bl	8000540 <__aeabi_dmul>
 8004fac:	a356      	add	r3, pc, #344	; (adr r3, 8005108 <__ieee754_pow+0xa28>)
 8004fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb2:	f7fb f90d 	bl	80001d0 <__aeabi_dsub>
 8004fb6:	4622      	mov	r2, r4
 8004fb8:	462b      	mov	r3, r5
 8004fba:	f7fb fac1 	bl	8000540 <__aeabi_dmul>
 8004fbe:	a354      	add	r3, pc, #336	; (adr r3, 8005110 <__ieee754_pow+0xa30>)
 8004fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc4:	f7fb f906 	bl	80001d4 <__adddf3>
 8004fc8:	4622      	mov	r2, r4
 8004fca:	462b      	mov	r3, r5
 8004fcc:	f7fb fab8 	bl	8000540 <__aeabi_dmul>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4640      	mov	r0, r8
 8004fd6:	4649      	mov	r1, r9
 8004fd8:	f7fb f8fa 	bl	80001d0 <__aeabi_dsub>
 8004fdc:	4604      	mov	r4, r0
 8004fde:	460d      	mov	r5, r1
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	4640      	mov	r0, r8
 8004fe6:	4649      	mov	r1, r9
 8004fe8:	f7fb faaa 	bl	8000540 <__aeabi_dmul>
 8004fec:	2200      	movs	r2, #0
 8004fee:	ec41 0b19 	vmov	d9, r0, r1
 8004ff2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004ff6:	4620      	mov	r0, r4
 8004ff8:	4629      	mov	r1, r5
 8004ffa:	f7fb f8e9 	bl	80001d0 <__aeabi_dsub>
 8004ffe:	4602      	mov	r2, r0
 8005000:	460b      	mov	r3, r1
 8005002:	ec51 0b19 	vmov	r0, r1, d9
 8005006:	f7fb fbc5 	bl	8000794 <__aeabi_ddiv>
 800500a:	4632      	mov	r2, r6
 800500c:	4604      	mov	r4, r0
 800500e:	460d      	mov	r5, r1
 8005010:	463b      	mov	r3, r7
 8005012:	4640      	mov	r0, r8
 8005014:	4649      	mov	r1, r9
 8005016:	f7fb fa93 	bl	8000540 <__aeabi_dmul>
 800501a:	4632      	mov	r2, r6
 800501c:	463b      	mov	r3, r7
 800501e:	f7fb f8d9 	bl	80001d4 <__adddf3>
 8005022:	4602      	mov	r2, r0
 8005024:	460b      	mov	r3, r1
 8005026:	4620      	mov	r0, r4
 8005028:	4629      	mov	r1, r5
 800502a:	f7fb f8d1 	bl	80001d0 <__aeabi_dsub>
 800502e:	4642      	mov	r2, r8
 8005030:	464b      	mov	r3, r9
 8005032:	f7fb f8cd 	bl	80001d0 <__aeabi_dsub>
 8005036:	460b      	mov	r3, r1
 8005038:	4602      	mov	r2, r0
 800503a:	4939      	ldr	r1, [pc, #228]	; (8005120 <__ieee754_pow+0xa40>)
 800503c:	2000      	movs	r0, #0
 800503e:	f7fb f8c7 	bl	80001d0 <__aeabi_dsub>
 8005042:	ec41 0b10 	vmov	d0, r0, r1
 8005046:	ee10 3a90 	vmov	r3, s1
 800504a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800504e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005052:	da2b      	bge.n	80050ac <__ieee754_pow+0x9cc>
 8005054:	4650      	mov	r0, sl
 8005056:	f000 f86f 	bl	8005138 <scalbn>
 800505a:	ec51 0b10 	vmov	r0, r1, d0
 800505e:	ec53 2b18 	vmov	r2, r3, d8
 8005062:	f7ff bbee 	b.w	8004842 <__ieee754_pow+0x162>
 8005066:	4b2f      	ldr	r3, [pc, #188]	; (8005124 <__ieee754_pow+0xa44>)
 8005068:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800506c:	429e      	cmp	r6, r3
 800506e:	f77f af0d 	ble.w	8004e8c <__ieee754_pow+0x7ac>
 8005072:	4b2d      	ldr	r3, [pc, #180]	; (8005128 <__ieee754_pow+0xa48>)
 8005074:	440b      	add	r3, r1
 8005076:	4303      	orrs	r3, r0
 8005078:	d009      	beq.n	800508e <__ieee754_pow+0x9ae>
 800507a:	ec51 0b18 	vmov	r0, r1, d8
 800507e:	2200      	movs	r2, #0
 8005080:	2300      	movs	r3, #0
 8005082:	f7fb fccf 	bl	8000a24 <__aeabi_dcmplt>
 8005086:	3800      	subs	r0, #0
 8005088:	bf18      	it	ne
 800508a:	2001      	movne	r0, #1
 800508c:	e448      	b.n	8004920 <__ieee754_pow+0x240>
 800508e:	4622      	mov	r2, r4
 8005090:	462b      	mov	r3, r5
 8005092:	f7fb f89d 	bl	80001d0 <__aeabi_dsub>
 8005096:	4642      	mov	r2, r8
 8005098:	464b      	mov	r3, r9
 800509a:	f7fb fcd7 	bl	8000a4c <__aeabi_dcmpge>
 800509e:	2800      	cmp	r0, #0
 80050a0:	f43f aef4 	beq.w	8004e8c <__ieee754_pow+0x7ac>
 80050a4:	e7e9      	b.n	800507a <__ieee754_pow+0x99a>
 80050a6:	f04f 0a00 	mov.w	sl, #0
 80050aa:	e71a      	b.n	8004ee2 <__ieee754_pow+0x802>
 80050ac:	ec51 0b10 	vmov	r0, r1, d0
 80050b0:	4619      	mov	r1, r3
 80050b2:	e7d4      	b.n	800505e <__ieee754_pow+0x97e>
 80050b4:	491a      	ldr	r1, [pc, #104]	; (8005120 <__ieee754_pow+0xa40>)
 80050b6:	2000      	movs	r0, #0
 80050b8:	f7ff bb31 	b.w	800471e <__ieee754_pow+0x3e>
 80050bc:	2000      	movs	r0, #0
 80050be:	2100      	movs	r1, #0
 80050c0:	f7ff bb2d 	b.w	800471e <__ieee754_pow+0x3e>
 80050c4:	4630      	mov	r0, r6
 80050c6:	4639      	mov	r1, r7
 80050c8:	f7ff bb29 	b.w	800471e <__ieee754_pow+0x3e>
 80050cc:	9204      	str	r2, [sp, #16]
 80050ce:	f7ff bb7b 	b.w	80047c8 <__ieee754_pow+0xe8>
 80050d2:	2300      	movs	r3, #0
 80050d4:	f7ff bb65 	b.w	80047a2 <__ieee754_pow+0xc2>
 80050d8:	00000000 	.word	0x00000000
 80050dc:	3fe62e43 	.word	0x3fe62e43
 80050e0:	fefa39ef 	.word	0xfefa39ef
 80050e4:	3fe62e42 	.word	0x3fe62e42
 80050e8:	0ca86c39 	.word	0x0ca86c39
 80050ec:	be205c61 	.word	0xbe205c61
 80050f0:	72bea4d0 	.word	0x72bea4d0
 80050f4:	3e663769 	.word	0x3e663769
 80050f8:	c5d26bf1 	.word	0xc5d26bf1
 80050fc:	3ebbbd41 	.word	0x3ebbbd41
 8005100:	af25de2c 	.word	0xaf25de2c
 8005104:	3f11566a 	.word	0x3f11566a
 8005108:	16bebd93 	.word	0x16bebd93
 800510c:	3f66c16c 	.word	0x3f66c16c
 8005110:	5555553e 	.word	0x5555553e
 8005114:	3fc55555 	.word	0x3fc55555
 8005118:	3fe00000 	.word	0x3fe00000
 800511c:	fff00000 	.word	0xfff00000
 8005120:	3ff00000 	.word	0x3ff00000
 8005124:	4090cbff 	.word	0x4090cbff
 8005128:	3f6f3400 	.word	0x3f6f3400
 800512c:	652b82fe 	.word	0x652b82fe
 8005130:	3c971547 	.word	0x3c971547
 8005134:	00000000 	.word	0x00000000

08005138 <scalbn>:
 8005138:	b570      	push	{r4, r5, r6, lr}
 800513a:	ec55 4b10 	vmov	r4, r5, d0
 800513e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8005142:	4606      	mov	r6, r0
 8005144:	462b      	mov	r3, r5
 8005146:	b999      	cbnz	r1, 8005170 <scalbn+0x38>
 8005148:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800514c:	4323      	orrs	r3, r4
 800514e:	d03f      	beq.n	80051d0 <scalbn+0x98>
 8005150:	4b35      	ldr	r3, [pc, #212]	; (8005228 <scalbn+0xf0>)
 8005152:	4629      	mov	r1, r5
 8005154:	ee10 0a10 	vmov	r0, s0
 8005158:	2200      	movs	r2, #0
 800515a:	f7fb f9f1 	bl	8000540 <__aeabi_dmul>
 800515e:	4b33      	ldr	r3, [pc, #204]	; (800522c <scalbn+0xf4>)
 8005160:	429e      	cmp	r6, r3
 8005162:	4604      	mov	r4, r0
 8005164:	460d      	mov	r5, r1
 8005166:	da10      	bge.n	800518a <scalbn+0x52>
 8005168:	a327      	add	r3, pc, #156	; (adr r3, 8005208 <scalbn+0xd0>)
 800516a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516e:	e01f      	b.n	80051b0 <scalbn+0x78>
 8005170:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005174:	4291      	cmp	r1, r2
 8005176:	d10c      	bne.n	8005192 <scalbn+0x5a>
 8005178:	ee10 2a10 	vmov	r2, s0
 800517c:	4620      	mov	r0, r4
 800517e:	4629      	mov	r1, r5
 8005180:	f7fb f828 	bl	80001d4 <__adddf3>
 8005184:	4604      	mov	r4, r0
 8005186:	460d      	mov	r5, r1
 8005188:	e022      	b.n	80051d0 <scalbn+0x98>
 800518a:	460b      	mov	r3, r1
 800518c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005190:	3936      	subs	r1, #54	; 0x36
 8005192:	f24c 3250 	movw	r2, #50000	; 0xc350
 8005196:	4296      	cmp	r6, r2
 8005198:	dd0d      	ble.n	80051b6 <scalbn+0x7e>
 800519a:	2d00      	cmp	r5, #0
 800519c:	a11c      	add	r1, pc, #112	; (adr r1, 8005210 <scalbn+0xd8>)
 800519e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051a2:	da02      	bge.n	80051aa <scalbn+0x72>
 80051a4:	a11c      	add	r1, pc, #112	; (adr r1, 8005218 <scalbn+0xe0>)
 80051a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051aa:	a319      	add	r3, pc, #100	; (adr r3, 8005210 <scalbn+0xd8>)
 80051ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b0:	f7fb f9c6 	bl	8000540 <__aeabi_dmul>
 80051b4:	e7e6      	b.n	8005184 <scalbn+0x4c>
 80051b6:	1872      	adds	r2, r6, r1
 80051b8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80051bc:	428a      	cmp	r2, r1
 80051be:	dcec      	bgt.n	800519a <scalbn+0x62>
 80051c0:	2a00      	cmp	r2, #0
 80051c2:	dd08      	ble.n	80051d6 <scalbn+0x9e>
 80051c4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80051c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80051cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80051d0:	ec45 4b10 	vmov	d0, r4, r5
 80051d4:	bd70      	pop	{r4, r5, r6, pc}
 80051d6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80051da:	da08      	bge.n	80051ee <scalbn+0xb6>
 80051dc:	2d00      	cmp	r5, #0
 80051de:	a10a      	add	r1, pc, #40	; (adr r1, 8005208 <scalbn+0xd0>)
 80051e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051e4:	dac0      	bge.n	8005168 <scalbn+0x30>
 80051e6:	a10e      	add	r1, pc, #56	; (adr r1, 8005220 <scalbn+0xe8>)
 80051e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051ec:	e7bc      	b.n	8005168 <scalbn+0x30>
 80051ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80051f2:	3236      	adds	r2, #54	; 0x36
 80051f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80051f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80051fc:	4620      	mov	r0, r4
 80051fe:	4b0c      	ldr	r3, [pc, #48]	; (8005230 <scalbn+0xf8>)
 8005200:	2200      	movs	r2, #0
 8005202:	e7d5      	b.n	80051b0 <scalbn+0x78>
 8005204:	f3af 8000 	nop.w
 8005208:	c2f8f359 	.word	0xc2f8f359
 800520c:	01a56e1f 	.word	0x01a56e1f
 8005210:	8800759c 	.word	0x8800759c
 8005214:	7e37e43c 	.word	0x7e37e43c
 8005218:	8800759c 	.word	0x8800759c
 800521c:	fe37e43c 	.word	0xfe37e43c
 8005220:	c2f8f359 	.word	0xc2f8f359
 8005224:	81a56e1f 	.word	0x81a56e1f
 8005228:	43500000 	.word	0x43500000
 800522c:	ffff3cb0 	.word	0xffff3cb0
 8005230:	3c900000 	.word	0x3c900000

08005234 <with_errno>:
 8005234:	b570      	push	{r4, r5, r6, lr}
 8005236:	4604      	mov	r4, r0
 8005238:	460d      	mov	r5, r1
 800523a:	4616      	mov	r6, r2
 800523c:	f000 f832 	bl	80052a4 <__errno>
 8005240:	4629      	mov	r1, r5
 8005242:	6006      	str	r6, [r0, #0]
 8005244:	4620      	mov	r0, r4
 8005246:	bd70      	pop	{r4, r5, r6, pc}

08005248 <xflow>:
 8005248:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800524a:	4614      	mov	r4, r2
 800524c:	461d      	mov	r5, r3
 800524e:	b108      	cbz	r0, 8005254 <xflow+0xc>
 8005250:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005254:	e9cd 2300 	strd	r2, r3, [sp]
 8005258:	e9dd 2300 	ldrd	r2, r3, [sp]
 800525c:	4620      	mov	r0, r4
 800525e:	4629      	mov	r1, r5
 8005260:	f7fb f96e 	bl	8000540 <__aeabi_dmul>
 8005264:	2222      	movs	r2, #34	; 0x22
 8005266:	b003      	add	sp, #12
 8005268:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800526c:	f7ff bfe2 	b.w	8005234 <with_errno>

08005270 <__math_uflow>:
 8005270:	b508      	push	{r3, lr}
 8005272:	2200      	movs	r2, #0
 8005274:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005278:	f7ff ffe6 	bl	8005248 <xflow>
 800527c:	ec41 0b10 	vmov	d0, r0, r1
 8005280:	bd08      	pop	{r3, pc}

08005282 <__math_oflow>:
 8005282:	b508      	push	{r3, lr}
 8005284:	2200      	movs	r2, #0
 8005286:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800528a:	f7ff ffdd 	bl	8005248 <xflow>
 800528e:	ec41 0b10 	vmov	d0, r0, r1
 8005292:	bd08      	pop	{r3, pc}

08005294 <memset>:
 8005294:	4402      	add	r2, r0
 8005296:	4603      	mov	r3, r0
 8005298:	4293      	cmp	r3, r2
 800529a:	d100      	bne.n	800529e <memset+0xa>
 800529c:	4770      	bx	lr
 800529e:	f803 1b01 	strb.w	r1, [r3], #1
 80052a2:	e7f9      	b.n	8005298 <memset+0x4>

080052a4 <__errno>:
 80052a4:	4b01      	ldr	r3, [pc, #4]	; (80052ac <__errno+0x8>)
 80052a6:	6818      	ldr	r0, [r3, #0]
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	20000074 	.word	0x20000074

080052b0 <__libc_init_array>:
 80052b0:	b570      	push	{r4, r5, r6, lr}
 80052b2:	4d0d      	ldr	r5, [pc, #52]	; (80052e8 <__libc_init_array+0x38>)
 80052b4:	4c0d      	ldr	r4, [pc, #52]	; (80052ec <__libc_init_array+0x3c>)
 80052b6:	1b64      	subs	r4, r4, r5
 80052b8:	10a4      	asrs	r4, r4, #2
 80052ba:	2600      	movs	r6, #0
 80052bc:	42a6      	cmp	r6, r4
 80052be:	d109      	bne.n	80052d4 <__libc_init_array+0x24>
 80052c0:	4d0b      	ldr	r5, [pc, #44]	; (80052f0 <__libc_init_array+0x40>)
 80052c2:	4c0c      	ldr	r4, [pc, #48]	; (80052f4 <__libc_init_array+0x44>)
 80052c4:	f000 f818 	bl	80052f8 <_init>
 80052c8:	1b64      	subs	r4, r4, r5
 80052ca:	10a4      	asrs	r4, r4, #2
 80052cc:	2600      	movs	r6, #0
 80052ce:	42a6      	cmp	r6, r4
 80052d0:	d105      	bne.n	80052de <__libc_init_array+0x2e>
 80052d2:	bd70      	pop	{r4, r5, r6, pc}
 80052d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80052d8:	4798      	blx	r3
 80052da:	3601      	adds	r6, #1
 80052dc:	e7ee      	b.n	80052bc <__libc_init_array+0xc>
 80052de:	f855 3b04 	ldr.w	r3, [r5], #4
 80052e2:	4798      	blx	r3
 80052e4:	3601      	adds	r6, #1
 80052e6:	e7f2      	b.n	80052ce <__libc_init_array+0x1e>
 80052e8:	080053a0 	.word	0x080053a0
 80052ec:	080053a0 	.word	0x080053a0
 80052f0:	080053a0 	.word	0x080053a0
 80052f4:	080053a4 	.word	0x080053a4

080052f8 <_init>:
 80052f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fa:	bf00      	nop
 80052fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052fe:	bc08      	pop	{r3}
 8005300:	469e      	mov	lr, r3
 8005302:	4770      	bx	lr

08005304 <_fini>:
 8005304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005306:	bf00      	nop
 8005308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800530a:	bc08      	pop	{r3}
 800530c:	469e      	mov	lr, r3
 800530e:	4770      	bx	lr
