
Autonomous.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009abc  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  08009c44  08009c44  0000ac44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0cc  0800a0cc  0000c070  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0cc  0800a0cc  0000b0cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0d4  0800a0d4  0000c070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800a0d4  0800a0d4  0000b0d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0e0  0800a0e0  0000b0e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800a0e4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c070  2**0
                  CONTENTS
 10 .bss          00000e74  20000070  20000070  0000c070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000ee4  20000ee4  0000c070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019701  00000000  00000000  0000c0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000318a  00000000  00000000  000257a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001368  00000000  00000000  00028930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f55  00000000  00000000  00029c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024a6c  00000000  00000000  0002abed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000165e1  00000000  00000000  0004f659  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d49cf  00000000  00000000  00065c3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013a609  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000589c  00000000  00000000  0013a64c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  0013fee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009c2c 	.word	0x08009c2c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08009c2c 	.word	0x08009c2c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a28:	f000 b96a 	b.w	8000d00 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9d08      	ldr	r5, [sp, #32]
 8000a4a:	460c      	mov	r4, r1
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d14e      	bne.n	8000aee <__udivmoddi4+0xaa>
 8000a50:	4694      	mov	ip, r2
 8000a52:	458c      	cmp	ip, r1
 8000a54:	4686      	mov	lr, r0
 8000a56:	fab2 f282 	clz	r2, r2
 8000a5a:	d962      	bls.n	8000b22 <__udivmoddi4+0xde>
 8000a5c:	b14a      	cbz	r2, 8000a72 <__udivmoddi4+0x2e>
 8000a5e:	f1c2 0320 	rsb	r3, r2, #32
 8000a62:	4091      	lsls	r1, r2
 8000a64:	fa20 f303 	lsr.w	r3, r0, r3
 8000a68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a6c:	4319      	orrs	r1, r3
 8000a6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a76:	fa1f f68c 	uxth.w	r6, ip
 8000a7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a82:	fb07 1114 	mls	r1, r7, r4, r1
 8000a86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a8a:	fb04 f106 	mul.w	r1, r4, r6
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	d90a      	bls.n	8000aa8 <__udivmoddi4+0x64>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000a9a:	f080 8112 	bcs.w	8000cc2 <__udivmoddi4+0x27e>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 810f 	bls.w	8000cc2 <__udivmoddi4+0x27e>
 8000aa4:	3c02      	subs	r4, #2
 8000aa6:	4463      	add	r3, ip
 8000aa8:	1a59      	subs	r1, r3, r1
 8000aaa:	fa1f f38e 	uxth.w	r3, lr
 8000aae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ab2:	fb07 1110 	mls	r1, r7, r0, r1
 8000ab6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aba:	fb00 f606 	mul.w	r6, r0, r6
 8000abe:	429e      	cmp	r6, r3
 8000ac0:	d90a      	bls.n	8000ad8 <__udivmoddi4+0x94>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000aca:	f080 80fc 	bcs.w	8000cc6 <__udivmoddi4+0x282>
 8000ace:	429e      	cmp	r6, r3
 8000ad0:	f240 80f9 	bls.w	8000cc6 <__udivmoddi4+0x282>
 8000ad4:	4463      	add	r3, ip
 8000ad6:	3802      	subs	r0, #2
 8000ad8:	1b9b      	subs	r3, r3, r6
 8000ada:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ade:	2100      	movs	r1, #0
 8000ae0:	b11d      	cbz	r5, 8000aea <__udivmoddi4+0xa6>
 8000ae2:	40d3      	lsrs	r3, r2
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	e9c5 3200 	strd	r3, r2, [r5]
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d905      	bls.n	8000afe <__udivmoddi4+0xba>
 8000af2:	b10d      	cbz	r5, 8000af8 <__udivmoddi4+0xb4>
 8000af4:	e9c5 0100 	strd	r0, r1, [r5]
 8000af8:	2100      	movs	r1, #0
 8000afa:	4608      	mov	r0, r1
 8000afc:	e7f5      	b.n	8000aea <__udivmoddi4+0xa6>
 8000afe:	fab3 f183 	clz	r1, r3
 8000b02:	2900      	cmp	r1, #0
 8000b04:	d146      	bne.n	8000b94 <__udivmoddi4+0x150>
 8000b06:	42a3      	cmp	r3, r4
 8000b08:	d302      	bcc.n	8000b10 <__udivmoddi4+0xcc>
 8000b0a:	4290      	cmp	r0, r2
 8000b0c:	f0c0 80f0 	bcc.w	8000cf0 <__udivmoddi4+0x2ac>
 8000b10:	1a86      	subs	r6, r0, r2
 8000b12:	eb64 0303 	sbc.w	r3, r4, r3
 8000b16:	2001      	movs	r0, #1
 8000b18:	2d00      	cmp	r5, #0
 8000b1a:	d0e6      	beq.n	8000aea <__udivmoddi4+0xa6>
 8000b1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b20:	e7e3      	b.n	8000aea <__udivmoddi4+0xa6>
 8000b22:	2a00      	cmp	r2, #0
 8000b24:	f040 8090 	bne.w	8000c48 <__udivmoddi4+0x204>
 8000b28:	eba1 040c 	sub.w	r4, r1, ip
 8000b2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b30:	fa1f f78c 	uxth.w	r7, ip
 8000b34:	2101      	movs	r1, #1
 8000b36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b46:	fb07 f006 	mul.w	r0, r7, r6
 8000b4a:	4298      	cmp	r0, r3
 8000b4c:	d908      	bls.n	8000b60 <__udivmoddi4+0x11c>
 8000b4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b52:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0x11a>
 8000b58:	4298      	cmp	r0, r3
 8000b5a:	f200 80cd 	bhi.w	8000cf8 <__udivmoddi4+0x2b4>
 8000b5e:	4626      	mov	r6, r4
 8000b60:	1a1c      	subs	r4, r3, r0
 8000b62:	fa1f f38e 	uxth.w	r3, lr
 8000b66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b72:	fb00 f707 	mul.w	r7, r0, r7
 8000b76:	429f      	cmp	r7, r3
 8000b78:	d908      	bls.n	8000b8c <__udivmoddi4+0x148>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000b82:	d202      	bcs.n	8000b8a <__udivmoddi4+0x146>
 8000b84:	429f      	cmp	r7, r3
 8000b86:	f200 80b0 	bhi.w	8000cea <__udivmoddi4+0x2a6>
 8000b8a:	4620      	mov	r0, r4
 8000b8c:	1bdb      	subs	r3, r3, r7
 8000b8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b92:	e7a5      	b.n	8000ae0 <__udivmoddi4+0x9c>
 8000b94:	f1c1 0620 	rsb	r6, r1, #32
 8000b98:	408b      	lsls	r3, r1
 8000b9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b9e:	431f      	orrs	r7, r3
 8000ba0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ba4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ba8:	ea43 030c 	orr.w	r3, r3, ip
 8000bac:	40f4      	lsrs	r4, r6
 8000bae:	fa00 f801 	lsl.w	r8, r0, r1
 8000bb2:	0c38      	lsrs	r0, r7, #16
 8000bb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bbc:	fa1f fc87 	uxth.w	ip, r7
 8000bc0:	fb00 441e 	mls	r4, r0, lr, r4
 8000bc4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bc8:	fb0e f90c 	mul.w	r9, lr, ip
 8000bcc:	45a1      	cmp	r9, r4
 8000bce:	fa02 f201 	lsl.w	r2, r2, r1
 8000bd2:	d90a      	bls.n	8000bea <__udivmoddi4+0x1a6>
 8000bd4:	193c      	adds	r4, r7, r4
 8000bd6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000bda:	f080 8084 	bcs.w	8000ce6 <__udivmoddi4+0x2a2>
 8000bde:	45a1      	cmp	r9, r4
 8000be0:	f240 8081 	bls.w	8000ce6 <__udivmoddi4+0x2a2>
 8000be4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000be8:	443c      	add	r4, r7
 8000bea:	eba4 0409 	sub.w	r4, r4, r9
 8000bee:	fa1f f983 	uxth.w	r9, r3
 8000bf2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bf6:	fb00 4413 	mls	r4, r0, r3, r4
 8000bfa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bfe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c02:	45a4      	cmp	ip, r4
 8000c04:	d907      	bls.n	8000c16 <__udivmoddi4+0x1d2>
 8000c06:	193c      	adds	r4, r7, r4
 8000c08:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c0c:	d267      	bcs.n	8000cde <__udivmoddi4+0x29a>
 8000c0e:	45a4      	cmp	ip, r4
 8000c10:	d965      	bls.n	8000cde <__udivmoddi4+0x29a>
 8000c12:	3b02      	subs	r3, #2
 8000c14:	443c      	add	r4, r7
 8000c16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c1e:	eba4 040c 	sub.w	r4, r4, ip
 8000c22:	429c      	cmp	r4, r3
 8000c24:	46ce      	mov	lr, r9
 8000c26:	469c      	mov	ip, r3
 8000c28:	d351      	bcc.n	8000cce <__udivmoddi4+0x28a>
 8000c2a:	d04e      	beq.n	8000cca <__udivmoddi4+0x286>
 8000c2c:	b155      	cbz	r5, 8000c44 <__udivmoddi4+0x200>
 8000c2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c32:	eb64 040c 	sbc.w	r4, r4, ip
 8000c36:	fa04 f606 	lsl.w	r6, r4, r6
 8000c3a:	40cb      	lsrs	r3, r1
 8000c3c:	431e      	orrs	r6, r3
 8000c3e:	40cc      	lsrs	r4, r1
 8000c40:	e9c5 6400 	strd	r6, r4, [r5]
 8000c44:	2100      	movs	r1, #0
 8000c46:	e750      	b.n	8000aea <__udivmoddi4+0xa6>
 8000c48:	f1c2 0320 	rsb	r3, r2, #32
 8000c4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c54:	fa24 f303 	lsr.w	r3, r4, r3
 8000c58:	4094      	lsls	r4, r2
 8000c5a:	430c      	orrs	r4, r1
 8000c5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c64:	fa1f f78c 	uxth.w	r7, ip
 8000c68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c70:	0c23      	lsrs	r3, r4, #16
 8000c72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c76:	fb00 f107 	mul.w	r1, r0, r7
 8000c7a:	4299      	cmp	r1, r3
 8000c7c:	d908      	bls.n	8000c90 <__udivmoddi4+0x24c>
 8000c7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c82:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000c86:	d22c      	bcs.n	8000ce2 <__udivmoddi4+0x29e>
 8000c88:	4299      	cmp	r1, r3
 8000c8a:	d92a      	bls.n	8000ce2 <__udivmoddi4+0x29e>
 8000c8c:	3802      	subs	r0, #2
 8000c8e:	4463      	add	r3, ip
 8000c90:	1a5b      	subs	r3, r3, r1
 8000c92:	b2a4      	uxth	r4, r4
 8000c94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c98:	fb08 3311 	mls	r3, r8, r1, r3
 8000c9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca0:	fb01 f307 	mul.w	r3, r1, r7
 8000ca4:	42a3      	cmp	r3, r4
 8000ca6:	d908      	bls.n	8000cba <__udivmoddi4+0x276>
 8000ca8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cac:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000cb0:	d213      	bcs.n	8000cda <__udivmoddi4+0x296>
 8000cb2:	42a3      	cmp	r3, r4
 8000cb4:	d911      	bls.n	8000cda <__udivmoddi4+0x296>
 8000cb6:	3902      	subs	r1, #2
 8000cb8:	4464      	add	r4, ip
 8000cba:	1ae4      	subs	r4, r4, r3
 8000cbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cc0:	e739      	b.n	8000b36 <__udivmoddi4+0xf2>
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	e6f0      	b.n	8000aa8 <__udivmoddi4+0x64>
 8000cc6:	4608      	mov	r0, r1
 8000cc8:	e706      	b.n	8000ad8 <__udivmoddi4+0x94>
 8000cca:	45c8      	cmp	r8, r9
 8000ccc:	d2ae      	bcs.n	8000c2c <__udivmoddi4+0x1e8>
 8000cce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cd6:	3801      	subs	r0, #1
 8000cd8:	e7a8      	b.n	8000c2c <__udivmoddi4+0x1e8>
 8000cda:	4631      	mov	r1, r6
 8000cdc:	e7ed      	b.n	8000cba <__udivmoddi4+0x276>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	e799      	b.n	8000c16 <__udivmoddi4+0x1d2>
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	e7d4      	b.n	8000c90 <__udivmoddi4+0x24c>
 8000ce6:	46d6      	mov	lr, sl
 8000ce8:	e77f      	b.n	8000bea <__udivmoddi4+0x1a6>
 8000cea:	4463      	add	r3, ip
 8000cec:	3802      	subs	r0, #2
 8000cee:	e74d      	b.n	8000b8c <__udivmoddi4+0x148>
 8000cf0:	4606      	mov	r6, r0
 8000cf2:	4623      	mov	r3, r4
 8000cf4:	4608      	mov	r0, r1
 8000cf6:	e70f      	b.n	8000b18 <__udivmoddi4+0xd4>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	e730      	b.n	8000b60 <__udivmoddi4+0x11c>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_idiv0>:
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop

08000d04 <_ZN14BufferedSerialC1ER20__UART_HandleTypeDef>:

// Create Serial Buffer with UART2:
BufferedSerial buff_serial(huart2);

// Constructor:
BufferedSerial::BufferedSerial(UART_HandleTypeDef &huart_)
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  : huart(huart_) {}
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	683a      	ldr	r2, [r7, #0]
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2200      	movs	r2, #0
 8000d18:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2200      	movs	r2, #0
 8000d28:	f8a3 2408 	strh.w	r2, [r3, #1032]	@ 0x408
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d32:	f8a3 240a 	strh.w	r2, [r3, #1034]	@ 0x40a
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <_ZN14BufferedSerial4initEv>:

// Init:
void BufferedSerial::init(void) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  reset_rx_buffer();
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f000 f91f 	bl	8000f90 <_ZN14BufferedSerial15reset_rx_bufferEv>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <_ZN14BufferedSerial4readEv>:

// Read new char in RX buffer:
int BufferedSerial::read(void) {
 8000d5a:	b480      	push	{r7}
 8000d5c:	b085      	sub	sp, #20
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
  // Get DMA head:
  uint16_t dma_head = (RX_BUF_SIZE - huart.hdmarx->Instance->NDTR) & rx_buf_mask;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d78:	81fb      	strh	r3, [r7, #14]

  // Quit if no new character:
  if (dma_head == rx_tail) return -1;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
 8000d80:	89fa      	ldrh	r2, [r7, #14]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d102      	bne.n	8000d8c <_ZN14BufferedSerial4readEv+0x32>
 8000d86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d8a:	e016      	b.n	8000dba <_ZN14BufferedSerial4readEv+0x60>

  // Get next char in buffer:
  int c = (int) rx_buf[rx_tail++];
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
 8000d92:	1c5a      	adds	r2, r3, #1
 8000d94:	b291      	uxth	r1, r2
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	f8a2 1404 	strh.w	r1, [r2, #1028]	@ 0x404
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4413      	add	r3, r2
 8000da2:	791b      	ldrb	r3, [r3, #4]
 8000da4:	60bb      	str	r3, [r7, #8]

  // Wrap around if rx_tail > RX_BUF_SIZE:
  rx_tail &= rx_buf_mask;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
 8000dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404

  return c;
 8000db8:	68bb      	ldr	r3, [r7, #8]
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3714      	adds	r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <_ZN14BufferedSerial5writeEPKhi>:

// Prepare data and send it:
void BufferedSerial::write(const uint8_t *data, const int length) {
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b084      	sub	sp, #16
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	60f8      	str	r0, [r7, #12]
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607a      	str	r2, [r7, #4]
  // If data can fit at the end of the buffer:
  if (tx_head + length < TX_BUF_SIZE) {
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	@ 0x406
 8000dd8:	461a      	mov	r2, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000de2:	da25      	bge.n	8000e30 <_ZN14BufferedSerial5writeEPKhi+0x6a>
    memcpy(&(tx_buf[tx_head]), data, length);
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	@ 0x406
 8000dea:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	4413      	add	r3, r2
 8000df2:	3304      	adds	r3, #4
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	68b9      	ldr	r1, [r7, #8]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f008 feb7 	bl	8009b6c <memcpy>
    tx_head += length; // ) & tx_buf_mask
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	4413      	add	r3, r2
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
    if (tx_head > tx_end) tx_end = tx_head; // Avoids "wrong checksum for topic id and msg" in rosserial logs
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	@ 0x40a
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d921      	bls.n	8000e66 <_ZN14BufferedSerial5writeEPKhi+0xa0>
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f8a3 240a 	strh.w	r2, [r3, #1034]	@ 0x40a
 8000e2e:	e01a      	b.n	8000e66 <_ZN14BufferedSerial5writeEPKhi+0xa0>
  }
  // Else data is copied at the beginning of TX buffer:
  else {
    memcpy(tx_buf, data, length);
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	68b9      	ldr	r1, [r7, #8]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f008 fe96 	bl	8009b6c <memcpy>
    if (tx_head > tx_tail) tx_end = tx_head; // Avoids tx_end > tx_tail
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	@ 0x408
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d905      	bls.n	8000e5c <_ZN14BufferedSerial5writeEPKhi+0x96>
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	f8a3 240a 	strh.w	r2, [r3, #1034]	@ 0x40a
    tx_head = length;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	b29a      	uxth	r2, r3
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
  }

  // Send data:
  flush_tx_buffer();
 8000e66:	68f8      	ldr	r0, [r7, #12]
 8000e68:	f000 f804 	bl	8000e74 <_ZN14BufferedSerial15flush_tx_bufferEv>
}
 8000e6c:	bf00      	nop
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <_ZN14BufferedSerial15flush_tx_bufferEv>:

// Send data:
void BufferedSerial::flush_tx_buffer(void) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  static bool mutex = false;

  // Reset indexes if they are at the same position:
  if (tx_head != 0 && tx_head == tx_tail) {   // Can be removed (just for better memory management)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	@ 0x406
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d00f      	beq.n	8000ea6 <_ZN14BufferedSerial15flush_tx_bufferEv+0x32>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	@ 0x408
 8000e92:	429a      	cmp	r2, r3
 8000e94:	d107      	bne.n	8000ea6 <_ZN14BufferedSerial15flush_tx_bufferEv+0x32>
     tx_head = 0;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
     tx_tail = 0;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f8a3 2408 	strh.w	r2, [r3, #1032]	@ 0x408
   }

  // Quit if UART not ready to transmit data or no data to send:
  if (huart.gState != HAL_UART_STATE_READY || tx_head == tx_tail || mutex) return;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	2b20      	cmp	r3, #32
 8000eb2:	d10b      	bne.n	8000ecc <_ZN14BufferedSerial15flush_tx_bufferEv+0x58>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	@ 0x408
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d003      	beq.n	8000ecc <_ZN14BufferedSerial15flush_tx_bufferEv+0x58>
 8000ec4:	4b31      	ldr	r3, [pc, #196]	@ (8000f8c <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <_ZN14BufferedSerial15flush_tx_bufferEv+0x5c>
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e000      	b.n	8000ed2 <_ZN14BufferedSerial15flush_tx_bufferEv+0x5e>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d156      	bne.n	8000f84 <_ZN14BufferedSerial15flush_tx_bufferEv+0x110>
  mutex = true;
 8000ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8000f8c <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	701a      	strb	r2, [r3, #0]

  // Reset flush index if already sent complete TX buffer:
  if (tx_tail == tx_end) tx_tail = 0;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f8b3 2408 	ldrh.w	r2, [r3, #1032]	@ 0x408
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	@ 0x40a
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d103      	bne.n	8000ef4 <_ZN14BufferedSerial15flush_tx_bufferEv+0x80>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f8a3 2408 	strh.w	r2, [r3, #1032]	@ 0x408

  // Send data behind head:
  if (tx_tail < tx_head) {
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f8b3 2408 	ldrh.w	r2, [r3, #1032]	@ 0x408
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	@ 0x406
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d21c      	bcs.n	8000f3e <_ZN14BufferedSerial15flush_tx_bufferEv+0xca>
    uint16_t length = tx_head - tx_tail;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	@ 0x408
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	81bb      	strh	r3, [r7, #12]
    HAL_UART_Transmit_DMA(&huart, &(tx_buf[tx_tail]), length);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6818      	ldr	r0, [r3, #0]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	@ 0x408
 8000f1e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	3304      	adds	r3, #4
 8000f28:	89ba      	ldrh	r2, [r7, #12]
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	f007 fb60 	bl	80085f0 <HAL_UART_Transmit_DMA>
    tx_tail = tx_head;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f8a3 2408 	strh.w	r2, [r3, #1032]	@ 0x408
 8000f3c:	e01e      	b.n	8000f7c <_ZN14BufferedSerial15flush_tx_bufferEv+0x108>
  }
  // Else end the buffer before resetting tail index:
  else {
    uint16_t length = tx_end - tx_tail;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f8b3 240a 	ldrh.w	r2, [r3, #1034]	@ 0x40a
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	@ 0x408
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	81fb      	strh	r3, [r7, #14]
    HAL_UART_Transmit_DMA(&huart, &(tx_buf[tx_tail]), length);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6818      	ldr	r0, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	@ 0x408
 8000f58:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	4413      	add	r3, r2
 8000f60:	3304      	adds	r3, #4
 8000f62:	89fa      	ldrh	r2, [r7, #14]
 8000f64:	4619      	mov	r1, r3
 8000f66:	f007 fb43 	bl	80085f0 <HAL_UART_Transmit_DMA>

    // Reset indexes:
    tx_end = TX_BUF_SIZE;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f70:	f8a3 240a 	strh.w	r2, [r3, #1034]	@ 0x40a
    tx_tail = 0;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2200      	movs	r2, #0
 8000f78:	f8a3 2408 	strh.w	r2, [r3, #1032]	@ 0x408
  }

  mutex = false;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	@ (8000f8c <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	701a      	strb	r2, [r3, #0]
 8000f82:	e000      	b.n	8000f86 <_ZN14BufferedSerial15flush_tx_bufferEv+0x112>
  if (huart.gState != HAL_UART_STATE_READY || tx_head == tx_tail || mutex) return;
 8000f84:	bf00      	nop
}
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000498 	.word	0x20000498

08000f90 <_ZN14BufferedSerial15reset_rx_bufferEv>:


// Reset DMA to the beginning of the RX buffer:
inline void BufferedSerial::reset_rx_buffer(void) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_DMA(&huart, rx_buf, RX_BUF_SIZE);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6818      	ldr	r0, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3304      	adds	r3, #4
 8000fa0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f007 fba1 	bl	80086ec <HAL_UART_Receive_DMA>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <_ZN14BufferedSerial10get_handleEv>:

// Get UART Handle:
UART_HandleTypeDef* const BufferedSerial::get_handle(void) { return &huart; }
 8000fb2:	b480      	push	{r7}
 8000fb4:	b083      	sub	sp, #12
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
	...

08000fcc <HAL_UART_TxCpltCallback>:


// DMA callbacks:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart) {
 8000fcc:	b590      	push	{r4, r7, lr}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  // Comparing pointers: (remove equality if only one UART is used)
  if (huart->Instance == buff_serial.get_handle()->Instance) {
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681c      	ldr	r4, [r3, #0]
 8000fd8:	4809      	ldr	r0, [pc, #36]	@ (8001000 <HAL_UART_TxCpltCallback+0x34>)
 8000fda:	f7ff ffea 	bl	8000fb2 <_ZN14BufferedSerial10get_handleEv>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	429c      	cmp	r4, r3
 8000fe4:	bf0c      	ite	eq
 8000fe6:	2301      	moveq	r3, #1
 8000fe8:	2300      	movne	r3, #0
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d002      	beq.n	8000ff6 <HAL_UART_TxCpltCallback+0x2a>
    buff_serial.flush_tx_buffer();
 8000ff0:	4803      	ldr	r0, [pc, #12]	@ (8001000 <HAL_UART_TxCpltCallback+0x34>)
 8000ff2:	f7ff ff3f 	bl	8000e74 <_ZN14BufferedSerial15flush_tx_bufferEv>
  }
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd90      	pop	{r4, r7, pc}
 8000ffe:	bf00      	nop
 8001000:	2000008c 	.word	0x2000008c

08001004 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  buff_serial.reset_rx_buffer();  // Can be commented if DMA mode for RX is Circular
 800100c:	4803      	ldr	r0, [pc, #12]	@ (800101c <HAL_UART_RxCpltCallback+0x18>)
 800100e:	f7ff ffbf 	bl	8000f90 <_ZN14BufferedSerial15reset_rx_bufferEv>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	2000008c 	.word	0x2000008c

08001020 <_Z41__static_initialization_and_destruction_0ii>:
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d108      	bne.n	8001042 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001036:	4293      	cmp	r3, r2
 8001038:	d103      	bne.n	8001042 <_Z41__static_initialization_and_destruction_0ii+0x22>
BufferedSerial buff_serial(huart2);
 800103a:	4904      	ldr	r1, [pc, #16]	@ (800104c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 800103c:	4804      	ldr	r0, [pc, #16]	@ (8001050 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800103e:	f7ff fe61 	bl	8000d04 <_ZN14BufferedSerialC1ER20__UART_HandleTypeDef>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200005f8 	.word	0x200005f8
 8001050:	2000008c 	.word	0x2000008c

08001054 <_GLOBAL__sub_I_buff_serial>:
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
 8001058:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800105c:	2001      	movs	r0, #1
 800105e:	f7ff ffdf 	bl	8001020 <_Z41__static_initialization_and_destruction_0ii>
 8001062:	bd80      	pop	{r7, pc}

08001064 <MPU9250_Writebyte>:

/**********************
 *   GLOBAL FUNCTIONS
 **********************/
void MPU9250_Writebyte(uint8_t device_addr,uint8_t reg_addr, uint8_t val)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af04      	add	r7, sp, #16
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
 800106e:	460b      	mov	r3, r1
 8001070:	71bb      	strb	r3, [r7, #6]
 8001072:	4613      	mov	r3, r2
 8001074:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, device_addr, reg_addr, I2C_MEMADD_SIZE_8BIT, &val, 1, 1);
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	b299      	uxth	r1, r3
 800107a:	79bb      	ldrb	r3, [r7, #6]
 800107c:	b29a      	uxth	r2, r3
 800107e:	2301      	movs	r3, #1
 8001080:	9302      	str	r3, [sp, #8]
 8001082:	2301      	movs	r3, #1
 8001084:	9301      	str	r3, [sp, #4]
 8001086:	1d7b      	adds	r3, r7, #5
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	2301      	movs	r3, #1
 800108c:	4803      	ldr	r0, [pc, #12]	@ (800109c <MPU9250_Writebyte+0x38>)
 800108e:	f004 ff79 	bl	8005f84 <HAL_I2C_Mem_Write>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	200004b4 	.word	0x200004b4

080010a0 <MPU9250_Readbyte>:
{
	HAL_I2C_Mem_Write(&hi2c1, device_addr, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 1);
}

void MPU9250_Readbyte(uint8_t device_addr,uint8_t reg_addr, uint8_t* data)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af04      	add	r7, sp, #16
 80010a6:	4603      	mov	r3, r0
 80010a8:	603a      	str	r2, [r7, #0]
 80010aa:	71fb      	strb	r3, [r7, #7]
 80010ac:	460b      	mov	r3, r1
 80010ae:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c1, device_addr, reg_addr, I2C_MEMADD_SIZE_8BIT, data, 1, 1);
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	b299      	uxth	r1, r3
 80010b4:	79bb      	ldrb	r3, [r7, #6]
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	2301      	movs	r3, #1
 80010ba:	9302      	str	r3, [sp, #8]
 80010bc:	2301      	movs	r3, #1
 80010be:	9301      	str	r3, [sp, #4]
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2301      	movs	r3, #1
 80010c6:	4803      	ldr	r0, [pc, #12]	@ (80010d4 <MPU9250_Readbyte+0x34>)
 80010c8:	f005 f856 	bl	8006178 <HAL_I2C_Mem_Read>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200004b4 	.word	0x200004b4

080010d8 <MPU9250_Readbytes>:

void MPU9250_Readbytes(uint8_t device_addr,uint8_t reg_addr, uint8_t len, uint8_t* data)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af04      	add	r7, sp, #16
 80010de:	603b      	str	r3, [r7, #0]
 80010e0:	4603      	mov	r3, r0
 80010e2:	71fb      	strb	r3, [r7, #7]
 80010e4:	460b      	mov	r3, r1
 80010e6:	71bb      	strb	r3, [r7, #6]
 80010e8:	4613      	mov	r3, r2
 80010ea:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(&hi2c1, device_addr, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 1);
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	b299      	uxth	r1, r3
 80010f0:	79bb      	ldrb	r3, [r7, #6]
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	797b      	ldrb	r3, [r7, #5]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	2001      	movs	r0, #1
 80010fa:	9002      	str	r0, [sp, #8]
 80010fc:	9301      	str	r3, [sp, #4]
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	2301      	movs	r3, #1
 8001104:	4803      	ldr	r0, [pc, #12]	@ (8001114 <MPU9250_Readbytes+0x3c>)
 8001106:	f005 f837 	bl	8006178 <HAL_I2C_Mem_Read>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200004b4 	.word	0x200004b4

08001118 <start_imu>:
/// @brief
/// @param
void start_imu(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 800111e:	2032      	movs	r0, #50	@ 0x32
 8001120:	f003 fefe 	bl	8004f20 <HAL_Delay>
	uint8_t who_am_i = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	717b      	strb	r3, [r7, #5]
	uint8_t who_am_i_AK8963 = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	713b      	strb	r3, [r7, #4]

	MPU9250_Readbyte(MPU9250_ADDR, MPU9250_WHO_AM_I, &who_am_i);
 800112c:	1d7b      	adds	r3, r7, #5
 800112e:	461a      	mov	r2, r3
 8001130:	2175      	movs	r1, #117	@ 0x75
 8001132:	20d0      	movs	r0, #208	@ 0xd0
 8001134:	f7ff ffb4 	bl	80010a0 <MPU9250_Readbyte>
	if (who_am_i == 0x71)
 8001138:	797b      	ldrb	r3, [r7, #5]
 800113a:	2b71      	cmp	r3, #113	@ 0x71
 800113c:	d151      	bne.n	80011e2 <start_imu+0xca>
	{
		error = 20;
 800113e:	4b7c      	ldr	r3, [pc, #496]	@ (8001330 <start_imu+0x218>)
 8001140:	2214      	movs	r2, #20
 8001142:	801a      	strh	r2, [r3, #0]
		while (1)
			;
	}

	// Reset the whole module before initialization
	MPU9250_Writebyte(MPU9250_ADDR, MPU9250_PWR_MGMT_1, 0x1 << 7);
 8001144:	2280      	movs	r2, #128	@ 0x80
 8001146:	216b      	movs	r1, #107	@ 0x6b
 8001148:	20d0      	movs	r0, #208	@ 0xd0
 800114a:	f7ff ff8b 	bl	8001064 <MPU9250_Writebyte>
	HAL_Delay(100);
 800114e:	2064      	movs	r0, #100	@ 0x64
 8001150:	f003 fee6 	bl	8004f20 <HAL_Delay>

	// Power Management setting
	/* Default is sleep mode
	 * necessary to wake up MPU9250*/
	MPU9250_Writebyte(MPU9250_ADDR, MPU9250_PWR_MGMT_1, 0x00);
 8001154:	2200      	movs	r2, #0
 8001156:	216b      	movs	r1, #107	@ 0x6b
 8001158:	20d0      	movs	r0, #208	@ 0xd0
 800115a:	f7ff ff83 	bl	8001064 <MPU9250_Writebyte>
	HAL_Delay(50);
 800115e:	2032      	movs	r0, #50	@ 0x32
 8001160:	f003 fede 	bl	8004f20 <HAL_Delay>

	// Sample rate divider
	/*Sample Rate = Gyroscope Output Rate / (1 + SMPRT_DIV) */
	//	MPU9250_Writebyte(MPU9250_SMPRT_DIV, 0x00); // ACC output rate is 1kHz, GYRO output rate is 8kHz
	MPU9250_Writebyte(MPU9250_ADDR, MPU9250_SMPRT_DIV, 39); // Sample Rate = 200Hz		//**********************
 8001164:	2227      	movs	r2, #39	@ 0x27
 8001166:	2119      	movs	r1, #25
 8001168:	20d0      	movs	r0, #208	@ 0xd0
 800116a:	f7ff ff7b 	bl	8001064 <MPU9250_Writebyte>
	HAL_Delay(50);
 800116e:	2032      	movs	r0, #50	@ 0x32
 8001170:	f003 fed6 	bl	8004f20 <HAL_Delay>

	// FSYNC and DLPF setting
	/*DLPF is set to 0*/
	MPU9250_Writebyte(MPU9250_ADDR, MPU9250_CONFIG, 0x00); //**********************
 8001174:	2200      	movs	r2, #0
 8001176:	211a      	movs	r1, #26
 8001178:	20d0      	movs	r0, #208	@ 0xd0
 800117a:	f7ff ff73 	bl	8001064 <MPU9250_Writebyte>
	HAL_Delay(50);
 800117e:	2032      	movs	r0, #50	@ 0x32
 8001180:	f003 fece 	bl	8004f20 <HAL_Delay>
	/*FS_SEL  Full Scale Range
	  0    	+-250 degree/s
	  1		+-500 degree/s
	  2		+-1000 degree/s
	  3		+-2000 degree/s	*/
	uint8_t FS_SCALE_GYRO = 0x03;
 8001184:	2303      	movs	r3, #3
 8001186:	71fb      	strb	r3, [r7, #7]
	MPU9250_Writebyte(MPU9250_ADDR, MPU9250_GYRO_CONFIG, FS_SCALE_GYRO << 3);
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	b2db      	uxtb	r3, r3
 800118e:	461a      	mov	r2, r3
 8001190:	211b      	movs	r1, #27
 8001192:	20d0      	movs	r0, #208	@ 0xd0
 8001194:	f7ff ff66 	bl	8001064 <MPU9250_Writebyte>
	HAL_Delay(50);
 8001198:	2032      	movs	r0, #50	@ 0x32
 800119a:	f003 fec1 	bl	8004f20 <HAL_Delay>
	/*FS_SEL  Full Scale Range
	  0    	+-2g
	  1		+-4g
	  2		+-8g
	  3		+-16g	*/
	uint8_t FS_SCALE_ACC = 0x00;
 800119e:	2300      	movs	r3, #0
 80011a0:	71bb      	strb	r3, [r7, #6]
	MPU9250_Writebyte(MPU9250_ADDR, MPU9250_ACCEL_CONFIG, FS_SCALE_ACC << 3);
 80011a2:	79bb      	ldrb	r3, [r7, #6]
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	461a      	mov	r2, r3
 80011aa:	211c      	movs	r1, #28
 80011ac:	20d0      	movs	r0, #208	@ 0xd0
 80011ae:	f7ff ff59 	bl	8001064 <MPU9250_Writebyte>
	HAL_Delay(50);
 80011b2:	2032      	movs	r0, #50	@ 0x32
 80011b4:	f003 feb4 	bl	8004f20 <HAL_Delay>

	MPU9250_Get_LSB_Sensitivity(FS_SCALE_GYRO, FS_SCALE_ACC);
 80011b8:	79ba      	ldrb	r2, [r7, #6]
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	4611      	mov	r1, r2
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 f8c2 	bl	8001348 <MPU9250_Get_LSB_Sensitivity>

	//enable Mag bypass
	MPU9250_Writebyte(MPU9250_ADDR, MPU9250_INT_PIN_CFG, 0x02);
 80011c4:	2202      	movs	r2, #2
 80011c6:	2137      	movs	r1, #55	@ 0x37
 80011c8:	20d0      	movs	r0, #208	@ 0xd0
 80011ca:	f7ff ff4b 	bl	8001064 <MPU9250_Writebyte>
	/* Magnetometer Device Connection Check */
	MPU9250_Readbyte(AK8963_ADDRESS, AK8963_WHO_AM_I, &who_am_i_AK8963);
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	461a      	mov	r2, r3
 80011d2:	2100      	movs	r1, #0
 80011d4:	2018      	movs	r0, #24
 80011d6:	f7ff ff63 	bl	80010a0 <MPU9250_Readbyte>
	if(who_am_i_AK8963 == 0x48)		//default value is 0x48
 80011da:	793b      	ldrb	r3, [r7, #4]
 80011dc:	2b48      	cmp	r3, #72	@ 0x48
 80011de:	d10a      	bne.n	80011f6 <start_imu+0xde>
 80011e0:	e005      	b.n	80011ee <start_imu+0xd6>
		error = 404;
 80011e2:	4b53      	ldr	r3, [pc, #332]	@ (8001330 <start_imu+0x218>)
 80011e4:	f44f 72ca 	mov.w	r2, #404	@ 0x194
 80011e8:	801a      	strh	r2, [r3, #0]
		while (1)
 80011ea:	bf00      	nop
 80011ec:	e7fd      	b.n	80011ea <start_imu+0xd2>
	{
		error = 1;			// who_am_i_AK8963 correct
 80011ee:	4b50      	ldr	r3, [pc, #320]	@ (8001330 <start_imu+0x218>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	801a      	strh	r2, [r3, #0]
 80011f4:	e004      	b.n	8001200 <start_imu+0xe8>
	}
	else
	{
		error = 0;			// who_am_i_AK8963 incorrect
 80011f6:	4b4e      	ldr	r3, [pc, #312]	@ (8001330 <start_imu+0x218>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	801a      	strh	r2, [r3, #0]
		while(1);
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <start_imu+0xe4>
	}
	/* Magnetometer Power Down */
	MPU9250_Writebyte(AK8963_ADDRESS, AK8963_CNTL1, 0x00);
 8001200:	2200      	movs	r2, #0
 8001202:	210a      	movs	r1, #10
 8001204:	2018      	movs	r0, #24
 8001206:	f7ff ff2d 	bl	8001064 <MPU9250_Writebyte>
	HAL_Delay(50);
 800120a:	2032      	movs	r0, #50	@ 0x32
 800120c:	f003 fe88 	bl	8004f20 <HAL_Delay>
	//Enter Fuse ROM access mode
	MPU9250_Writebyte(AK8963_ADDRESS, AK8963_CNTL1, 0x0F);
 8001210:	220f      	movs	r2, #15
 8001212:	210a      	movs	r1, #10
 8001214:	2018      	movs	r0, #24
 8001216:	f7ff ff25 	bl	8001064 <MPU9250_Writebyte>
	HAL_Delay(50);
 800121a:	2032      	movs	r0, #50	@ 0x32
 800121c:	f003 fe80 	bl	8004f20 <HAL_Delay>
	uint8_t raw_data[3];
	// Read the x-, y-, and z-axis calibration values
	MPU9250_Readbytes(AK8963_ADDRESS, AK8963_ASAX, 3, &raw_data[0]);
 8001220:	463b      	mov	r3, r7
 8001222:	2203      	movs	r2, #3
 8001224:	2110      	movs	r1, #16
 8001226:	2018      	movs	r0, #24
 8001228:	f7ff ff56 	bl	80010d8 <MPU9250_Readbytes>
	mag_bias_factory[0] = (float)((raw_data[0] - 128) / 256. + 1.) * Magnetometer_Sensitivity_Scale_Factor;  // Return x-axis sensitivity adjustment values, etc.
 800122c:	783b      	ldrb	r3, [r7, #0]
 800122e:	3b80      	subs	r3, #128	@ 0x80
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f923 	bl	800047c <__aeabi_i2d>
 8001236:	f04f 0200 	mov.w	r2, #0
 800123a:	4b3e      	ldr	r3, [pc, #248]	@ (8001334 <start_imu+0x21c>)
 800123c:	f7ff fab2 	bl	80007a4 <__aeabi_ddiv>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4610      	mov	r0, r2
 8001246:	4619      	mov	r1, r3
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	4b3a      	ldr	r3, [pc, #232]	@ (8001338 <start_imu+0x220>)
 800124e:	f7fe ffc9 	bl	80001e4 <__adddf3>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4610      	mov	r0, r2
 8001258:	4619      	mov	r1, r3
 800125a:	f7ff fb8b 	bl	8000974 <__aeabi_d2f>
 800125e:	ee07 0a10 	vmov	s14, r0
 8001262:	eddf 7a36 	vldr	s15, [pc, #216]	@ 800133c <start_imu+0x224>
 8001266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800126a:	4b35      	ldr	r3, [pc, #212]	@ (8001340 <start_imu+0x228>)
 800126c:	edc3 7a00 	vstr	s15, [r3]
	mag_bias_factory[1] = (float)((raw_data[1] - 128) / 256. + 1.) * Magnetometer_Sensitivity_Scale_Factor;
 8001270:	787b      	ldrb	r3, [r7, #1]
 8001272:	3b80      	subs	r3, #128	@ 0x80
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f901 	bl	800047c <__aeabi_i2d>
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	4b2d      	ldr	r3, [pc, #180]	@ (8001334 <start_imu+0x21c>)
 8001280:	f7ff fa90 	bl	80007a4 <__aeabi_ddiv>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	4b29      	ldr	r3, [pc, #164]	@ (8001338 <start_imu+0x220>)
 8001292:	f7fe ffa7 	bl	80001e4 <__adddf3>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4610      	mov	r0, r2
 800129c:	4619      	mov	r1, r3
 800129e:	f7ff fb69 	bl	8000974 <__aeabi_d2f>
 80012a2:	ee07 0a10 	vmov	s14, r0
 80012a6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800133c <start_imu+0x224>
 80012aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ae:	4b24      	ldr	r3, [pc, #144]	@ (8001340 <start_imu+0x228>)
 80012b0:	edc3 7a01 	vstr	s15, [r3, #4]
	mag_bias_factory[2] = (float)((raw_data[2] - 128) / 256. + 1.) * Magnetometer_Sensitivity_Scale_Factor;
 80012b4:	78bb      	ldrb	r3, [r7, #2]
 80012b6:	3b80      	subs	r3, #128	@ 0x80
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff f8df 	bl	800047c <__aeabi_i2d>
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001334 <start_imu+0x21c>)
 80012c4:	f7ff fa6e 	bl	80007a4 <__aeabi_ddiv>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4610      	mov	r0, r2
 80012ce:	4619      	mov	r1, r3
 80012d0:	f04f 0200 	mov.w	r2, #0
 80012d4:	4b18      	ldr	r3, [pc, #96]	@ (8001338 <start_imu+0x220>)
 80012d6:	f7fe ff85 	bl	80001e4 <__adddf3>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	f7ff fb47 	bl	8000974 <__aeabi_d2f>
 80012e6:	ee07 0a10 	vmov	s14, r0
 80012ea:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800133c <start_imu+0x224>
 80012ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f2:	4b13      	ldr	r3, [pc, #76]	@ (8001340 <start_imu+0x228>)
 80012f4:	edc3 7a02 	vstr	s15, [r3, #8]
	HAL_Delay(50);
 80012f8:	2032      	movs	r0, #50	@ 0x32
 80012fa:	f003 fe11 	bl	8004f20 <HAL_Delay>
	//Power down magnetometer
	MPU9250_Writebyte(AK8963_ADDRESS, AK8963_CNTL1, 0x00);
 80012fe:	2200      	movs	r2, #0
 8001300:	210a      	movs	r1, #10
 8001302:	2018      	movs	r0, #24
 8001304:	f7ff feae 	bl	8001064 <MPU9250_Writebyte>
	HAL_Delay(50);
 8001308:	2032      	movs	r0, #50	@ 0x32
 800130a:	f003 fe09 	bl	8004f20 <HAL_Delay>
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition MAG_MODE (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	// Set magnetometer data resolution and sample ODR
	MPU9250_Writebyte(AK8963_ADDRESS, AK8963_CNTL1, Mscale << 4 | 0x02);
 800130e:	4b0d      	ldr	r3, [pc, #52]	@ (8001344 <start_imu+0x22c>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	011b      	lsls	r3, r3, #4
 8001314:	b25b      	sxtb	r3, r3
 8001316:	f043 0302 	orr.w	r3, r3, #2
 800131a:	b25b      	sxtb	r3, r3
 800131c:	b2db      	uxtb	r3, r3
 800131e:	461a      	mov	r2, r3
 8001320:	210a      	movs	r1, #10
 8001322:	2018      	movs	r0, #24
 8001324:	f7ff fe9e 	bl	8001064 <MPU9250_Writebyte>
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	200004b0 	.word	0x200004b0
 8001334:	40700000 	.word	0x40700000
 8001338:	3ff00000 	.word	0x3ff00000
 800133c:	3e19999a 	.word	0x3e19999a
 8001340:	200004a4 	.word	0x200004a4
 8001344:	20000000 	.word	0x20000000

08001348 <MPU9250_Get_LSB_Sensitivity>:

void MPU9250_Get_LSB_Sensitivity(uint8_t FS_SCALE_GYRO, uint8_t FS_SCALE_ACC)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	460a      	mov	r2, r1
 8001352:	71fb      	strb	r3, [r7, #7]
 8001354:	4613      	mov	r3, r2
 8001356:	71bb      	strb	r3, [r7, #6]
	switch (FS_SCALE_GYRO)
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	2b03      	cmp	r3, #3
 800135c:	d81a      	bhi.n	8001394 <MPU9250_Get_LSB_Sensitivity+0x4c>
 800135e:	a201      	add	r2, pc, #4	@ (adr r2, 8001364 <MPU9250_Get_LSB_Sensitivity+0x1c>)
 8001360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001364:	08001375 	.word	0x08001375
 8001368:	0800137d 	.word	0x0800137d
 800136c:	08001385 	.word	0x08001385
 8001370:	0800138d 	.word	0x0800138d
	{
	case 0:
		LSB_Sensitivity_GYRO = 131.f;
 8001374:	4b1b      	ldr	r3, [pc, #108]	@ (80013e4 <MPU9250_Get_LSB_Sensitivity+0x9c>)
 8001376:	4a1c      	ldr	r2, [pc, #112]	@ (80013e8 <MPU9250_Get_LSB_Sensitivity+0xa0>)
 8001378:	601a      	str	r2, [r3, #0]
		break;
 800137a:	e00b      	b.n	8001394 <MPU9250_Get_LSB_Sensitivity+0x4c>
	case 1:
		LSB_Sensitivity_GYRO = 65.5f;
 800137c:	4b19      	ldr	r3, [pc, #100]	@ (80013e4 <MPU9250_Get_LSB_Sensitivity+0x9c>)
 800137e:	4a1b      	ldr	r2, [pc, #108]	@ (80013ec <MPU9250_Get_LSB_Sensitivity+0xa4>)
 8001380:	601a      	str	r2, [r3, #0]
		break;
 8001382:	e007      	b.n	8001394 <MPU9250_Get_LSB_Sensitivity+0x4c>
	case 2:
		LSB_Sensitivity_GYRO = 32.8f;
 8001384:	4b17      	ldr	r3, [pc, #92]	@ (80013e4 <MPU9250_Get_LSB_Sensitivity+0x9c>)
 8001386:	4a1a      	ldr	r2, [pc, #104]	@ (80013f0 <MPU9250_Get_LSB_Sensitivity+0xa8>)
 8001388:	601a      	str	r2, [r3, #0]
		break;
 800138a:	e003      	b.n	8001394 <MPU9250_Get_LSB_Sensitivity+0x4c>
	case 3:
		LSB_Sensitivity_GYRO = 16.4f;
 800138c:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <MPU9250_Get_LSB_Sensitivity+0x9c>)
 800138e:	4a19      	ldr	r2, [pc, #100]	@ (80013f4 <MPU9250_Get_LSB_Sensitivity+0xac>)
 8001390:	601a      	str	r2, [r3, #0]
		break;
 8001392:	bf00      	nop
	}
	switch (FS_SCALE_ACC)
 8001394:	79bb      	ldrb	r3, [r7, #6]
 8001396:	2b03      	cmp	r3, #3
 8001398:	d81e      	bhi.n	80013d8 <MPU9250_Get_LSB_Sensitivity+0x90>
 800139a:	a201      	add	r2, pc, #4	@ (adr r2, 80013a0 <MPU9250_Get_LSB_Sensitivity+0x58>)
 800139c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a0:	080013b1 	.word	0x080013b1
 80013a4:	080013bb 	.word	0x080013bb
 80013a8:	080013c5 	.word	0x080013c5
 80013ac:	080013cf 	.word	0x080013cf
	{
	case 0:
		LSB_Sensitivity_ACC = 16384.f;
 80013b0:	4b11      	ldr	r3, [pc, #68]	@ (80013f8 <MPU9250_Get_LSB_Sensitivity+0xb0>)
 80013b2:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 80013b6:	601a      	str	r2, [r3, #0]
		break;
 80013b8:	e00e      	b.n	80013d8 <MPU9250_Get_LSB_Sensitivity+0x90>
	case 1:
		LSB_Sensitivity_ACC = 8192.f;
 80013ba:	4b0f      	ldr	r3, [pc, #60]	@ (80013f8 <MPU9250_Get_LSB_Sensitivity+0xb0>)
 80013bc:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 80013c0:	601a      	str	r2, [r3, #0]
		break;
 80013c2:	e009      	b.n	80013d8 <MPU9250_Get_LSB_Sensitivity+0x90>
	case 2:
		LSB_Sensitivity_ACC = 4096.f;
 80013c4:	4b0c      	ldr	r3, [pc, #48]	@ (80013f8 <MPU9250_Get_LSB_Sensitivity+0xb0>)
 80013c6:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 80013ca:	601a      	str	r2, [r3, #0]
		break;
 80013cc:	e004      	b.n	80013d8 <MPU9250_Get_LSB_Sensitivity+0x90>
	case 3:
		LSB_Sensitivity_ACC = 2048.f;
 80013ce:	4b0a      	ldr	r3, [pc, #40]	@ (80013f8 <MPU9250_Get_LSB_Sensitivity+0xb0>)
 80013d0:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 80013d4:	601a      	str	r2, [r3, #0]
		break;
 80013d6:	bf00      	nop
	}
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	200004a0 	.word	0x200004a0
 80013e8:	43030000 	.word	0x43030000
 80013ec:	42830000 	.word	0x42830000
 80013f0:	42033333 	.word	0x42033333
 80013f4:	41833333 	.word	0x41833333
 80013f8:	2000049c 	.word	0x2000049c

080013fc <MPU9250_ProcessData>:

void MPU9250_ProcessData(imu_9250_t *mpu9250)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	MPU9250_Get6AxisRawData(mpu9250);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 f80a 	bl	800141e <MPU9250_Get6AxisRawData>
	MPU9250_GetMagRawData(mpu9250);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 f856 	bl	80014bc <MPU9250_GetMagRawData>
	MPU9250_DataConvert(mpu9250);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f000 f8c1 	bl	8001598 <MPU9250_DataConvert>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <MPU9250_Get6AxisRawData>:

void MPU9250_Get6AxisRawData(imu_9250_t *mpu9250)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b086      	sub	sp, #24
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
	uint8_t data[14];
	MPU9250_Readbytes(MPU9250_ADDR, MPU9250_ACCEL_XOUT_H, 14, data);
 8001426:	f107 0308 	add.w	r3, r7, #8
 800142a:	220e      	movs	r2, #14
 800142c:	213b      	movs	r1, #59	@ 0x3b
 800142e:	20d0      	movs	r0, #208	@ 0xd0
 8001430:	f7ff fe52 	bl	80010d8 <MPU9250_Readbytes>

	mpu9250->pt1_p.acc_x_raw = (data[0] << 8) | data[1];
 8001434:	7a3b      	ldrb	r3, [r7, #8]
 8001436:	021b      	lsls	r3, r3, #8
 8001438:	b21a      	sxth	r2, r3
 800143a:	7a7b      	ldrb	r3, [r7, #9]
 800143c:	b21b      	sxth	r3, r3
 800143e:	4313      	orrs	r3, r2
 8001440:	b21a      	sxth	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	809a      	strh	r2, [r3, #4]
	mpu9250->pt1_p.acc_y_raw = (data[2] << 8) | data[3];
 8001446:	7abb      	ldrb	r3, [r7, #10]
 8001448:	021b      	lsls	r3, r3, #8
 800144a:	b21a      	sxth	r2, r3
 800144c:	7afb      	ldrb	r3, [r7, #11]
 800144e:	b21b      	sxth	r3, r3
 8001450:	4313      	orrs	r3, r2
 8001452:	b21a      	sxth	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	80da      	strh	r2, [r3, #6]
	mpu9250->pt1_p.acc_z_raw = (data[4] << 8) | data[5];
 8001458:	7b3b      	ldrb	r3, [r7, #12]
 800145a:	021b      	lsls	r3, r3, #8
 800145c:	b21a      	sxth	r2, r3
 800145e:	7b7b      	ldrb	r3, [r7, #13]
 8001460:	b21b      	sxth	r3, r3
 8001462:	4313      	orrs	r3, r2
 8001464:	b21a      	sxth	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	811a      	strh	r2, [r3, #8]

	mpu9250->pt1_p.temperature_raw = (data[6] << 8) | data[7];
 800146a:	7bbb      	ldrb	r3, [r7, #14]
 800146c:	021b      	lsls	r3, r3, #8
 800146e:	b21a      	sxth	r2, r3
 8001470:	7bfb      	ldrb	r3, [r7, #15]
 8001472:	b21b      	sxth	r3, r3
 8001474:	4313      	orrs	r3, r2
 8001476:	b21a      	sxth	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	815a      	strh	r2, [r3, #10]

	mpu9250->pt1_p.gyro_x_raw = ((data[8] << 8) | data[9]);
 800147c:	7c3b      	ldrb	r3, [r7, #16]
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	b21a      	sxth	r2, r3
 8001482:	7c7b      	ldrb	r3, [r7, #17]
 8001484:	b21b      	sxth	r3, r3
 8001486:	4313      	orrs	r3, r2
 8001488:	b21a      	sxth	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	819a      	strh	r2, [r3, #12]
	mpu9250->pt1_p.gyro_y_raw = ((data[10] << 8) | data[11]);
 800148e:	7cbb      	ldrb	r3, [r7, #18]
 8001490:	021b      	lsls	r3, r3, #8
 8001492:	b21a      	sxth	r2, r3
 8001494:	7cfb      	ldrb	r3, [r7, #19]
 8001496:	b21b      	sxth	r3, r3
 8001498:	4313      	orrs	r3, r2
 800149a:	b21a      	sxth	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	81da      	strh	r2, [r3, #14]
	mpu9250->pt1_p.gyro_z_raw = ((data[12] << 8) | data[13]);
 80014a0:	7d3b      	ldrb	r3, [r7, #20]
 80014a2:	021b      	lsls	r3, r3, #8
 80014a4:	b21a      	sxth	r2, r3
 80014a6:	7d7b      	ldrb	r3, [r7, #21]
 80014a8:	b21b      	sxth	r3, r3
 80014aa:	4313      	orrs	r3, r2
 80014ac:	b21a      	sxth	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	821a      	strh	r2, [r3, #16]
}
 80014b2:	bf00      	nop
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <MPU9250_GetMagRawData>:

void MPU9250_GetMagRawData(imu_9250_t *mpu9250)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	uint8_t readData = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	75bb      	strb	r3, [r7, #22]
	MPU9250_Readbyte(AK8963_ADDRESS, AK8963_ST1, &readData);
 80014c8:	f107 0316 	add.w	r3, r7, #22
 80014cc:	461a      	mov	r2, r3
 80014ce:	2102      	movs	r1, #2
 80014d0:	2018      	movs	r0, #24
 80014d2:	f7ff fde5 	bl	80010a0 <MPU9250_Readbyte>
	if (readData & 0x01) {                                                    // wait for magnetometer data ready bit to be set
 80014d6:	7dbb      	ldrb	r3, [r7, #22]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d055      	beq.n	800158c <MPU9250_GetMagRawData+0xd0>
		uint8_t raw_data[7];                                             // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
		MPU9250_Readbytes(AK8963_ADDRESS, AK8963_XOUT_L, 7, &raw_data[0]);      // Read the six raw data and ST2 registers sequentially into data array
 80014e0:	f107 030c 	add.w	r3, r7, #12
 80014e4:	2207      	movs	r2, #7
 80014e6:	2103      	movs	r1, #3
 80014e8:	2018      	movs	r0, #24
 80014ea:	f7ff fdf5 	bl	80010d8 <MPU9250_Readbytes>

		uint8_t c = raw_data[6];                                         // End data read by reading ST2 register
 80014ee:	7cbb      	ldrb	r3, [r7, #18]
 80014f0:	75fb      	strb	r3, [r7, #23]
		if (!(c & 0x08)) {                                               // Check if magnetic sensor overflow set, if not then report data
 80014f2:	7dfb      	ldrb	r3, [r7, #23]
 80014f4:	f003 0308 	and.w	r3, r3, #8
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d147      	bne.n	800158c <MPU9250_GetMagRawData+0xd0>
			mpu9250->pt1_p.mag_x_raw = ((int16_t)raw_data[1] << 8) | raw_data[0];  // Turn the MSB and LSB into a signed 16-bit value
 80014fc:	7b7b      	ldrb	r3, [r7, #13]
 80014fe:	021b      	lsls	r3, r3, #8
 8001500:	b21a      	sxth	r2, r3
 8001502:	7b3b      	ldrb	r3, [r7, #12]
 8001504:	b21b      	sxth	r3, r3
 8001506:	4313      	orrs	r3, r2
 8001508:	b21a      	sxth	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	825a      	strh	r2, [r3, #18]
			mpu9250->pt1_p.mag_y_raw = ((int16_t)raw_data[3] << 8) | raw_data[2];  // Data stored as little Endian
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	021b      	lsls	r3, r3, #8
 8001512:	b21a      	sxth	r2, r3
 8001514:	7bbb      	ldrb	r3, [r7, #14]
 8001516:	b21b      	sxth	r3, r3
 8001518:	4313      	orrs	r3, r2
 800151a:	b21a      	sxth	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	829a      	strh	r2, [r3, #20]
			mpu9250->pt1_p.mag_z_raw = ((int16_t)raw_data[5] << 8) | raw_data[4];
 8001520:	7c7b      	ldrb	r3, [r7, #17]
 8001522:	021b      	lsls	r3, r3, #8
 8001524:	b21a      	sxth	r2, r3
 8001526:	7c3b      	ldrb	r3, [r7, #16]
 8001528:	b21b      	sxth	r3, r3
 800152a:	4313      	orrs	r3, r2
 800152c:	b21a      	sxth	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	82da      	strh	r2, [r3, #22]

			mpu9250->pt1_p.mag_x = mpu9250->pt1_p.mag_x_raw * mag_bias_factory[0];
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001538:	ee07 3a90 	vmov	s15, r3
 800153c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001540:	4b14      	ldr	r3, [pc, #80]	@ (8001594 <MPU9250_GetMagRawData+0xd8>)
 8001542:	edd3 7a00 	vldr	s15, [r3]
 8001546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
			mpu9250->pt1_p.mag_y = mpu9250->pt1_p.mag_y_raw * mag_bias_factory[1];
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001556:	ee07 3a90 	vmov	s15, r3
 800155a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800155e:	4b0d      	ldr	r3, [pc, #52]	@ (8001594 <MPU9250_GetMagRawData+0xd8>)
 8001560:	edd3 7a01 	vldr	s15, [r3, #4]
 8001564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
			mpu9250->pt1_p.mag_z = mpu9250->pt1_p.mag_z_raw * mag_bias_factory[2];
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001574:	ee07 3a90 	vmov	s15, r3
 8001578:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800157c:	4b05      	ldr	r3, [pc, #20]	@ (8001594 <MPU9250_GetMagRawData+0xd8>)
 800157e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
		}
	}
}
 800158c:	bf00      	nop
 800158e:	3718      	adds	r7, #24
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	200004a4 	.word	0x200004a4

08001598 <MPU9250_DataConvert>:

void MPU9250_DataConvert(imu_9250_t *mpu9250)
{
 8001598:	b5b0      	push	{r4, r5, r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	// printf("LSB_Sensitivity_GYRO: %f, LSB_Sensitivity_ACC: %f\n",LSB_Sensitivity_GYRO,LSB_Sensitivity_ACC);
	mpu9250->pt1_p.acc_x = 9.8 * mpu9250->pt1_p.acc_x_raw / LSB_Sensitivity_ACC;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7fe ff68 	bl	800047c <__aeabi_i2d>
 80015ac:	a35e      	add	r3, pc, #376	@ (adr r3, 8001728 <MPU9250_DataConvert+0x190>)
 80015ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b2:	f7fe ffcd 	bl	8000550 <__aeabi_dmul>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4614      	mov	r4, r2
 80015bc:	461d      	mov	r5, r3
 80015be:	4b5e      	ldr	r3, [pc, #376]	@ (8001738 <MPU9250_DataConvert+0x1a0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe ff6c 	bl	80004a0 <__aeabi_f2d>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4620      	mov	r0, r4
 80015ce:	4629      	mov	r1, r5
 80015d0:	f7ff f8e8 	bl	80007a4 <__aeabi_ddiv>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	f7ff f9ca 	bl	8000974 <__aeabi_d2f>
 80015e0:	4602      	mov	r2, r0
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	619a      	str	r2, [r3, #24]
	mpu9250->pt1_p.acc_y = 9.8 * mpu9250->pt1_p.acc_y_raw / LSB_Sensitivity_ACC;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe ff45 	bl	800047c <__aeabi_i2d>
 80015f2:	a34d      	add	r3, pc, #308	@ (adr r3, 8001728 <MPU9250_DataConvert+0x190>)
 80015f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f8:	f7fe ffaa 	bl	8000550 <__aeabi_dmul>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4614      	mov	r4, r2
 8001602:	461d      	mov	r5, r3
 8001604:	4b4c      	ldr	r3, [pc, #304]	@ (8001738 <MPU9250_DataConvert+0x1a0>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f7fe ff49 	bl	80004a0 <__aeabi_f2d>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	4620      	mov	r0, r4
 8001614:	4629      	mov	r1, r5
 8001616:	f7ff f8c5 	bl	80007a4 <__aeabi_ddiv>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4610      	mov	r0, r2
 8001620:	4619      	mov	r1, r3
 8001622:	f7ff f9a7 	bl	8000974 <__aeabi_d2f>
 8001626:	4602      	mov	r2, r0
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	61da      	str	r2, [r3, #28]
	mpu9250->pt1_p.acc_z = 9.8 * mpu9250->pt1_p.acc_z_raw / LSB_Sensitivity_ACC;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001632:	4618      	mov	r0, r3
 8001634:	f7fe ff22 	bl	800047c <__aeabi_i2d>
 8001638:	a33b      	add	r3, pc, #236	@ (adr r3, 8001728 <MPU9250_DataConvert+0x190>)
 800163a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163e:	f7fe ff87 	bl	8000550 <__aeabi_dmul>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4614      	mov	r4, r2
 8001648:	461d      	mov	r5, r3
 800164a:	4b3b      	ldr	r3, [pc, #236]	@ (8001738 <MPU9250_DataConvert+0x1a0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe ff26 	bl	80004a0 <__aeabi_f2d>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4620      	mov	r0, r4
 800165a:	4629      	mov	r1, r5
 800165c:	f7ff f8a2 	bl	80007a4 <__aeabi_ddiv>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4610      	mov	r0, r2
 8001666:	4619      	mov	r1, r3
 8001668:	f7ff f984 	bl	8000974 <__aeabi_d2f>
 800166c:	4602      	mov	r2, r0
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	621a      	str	r2, [r3, #32]

	mpu9250->pt1_p.temperature = (float)(mpu9250->pt1_p.temperature_raw) / 340 + 36.53;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001678:	ee07 3a90 	vmov	s15, r3
 800167c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001680:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 800173c <MPU9250_DataConvert+0x1a4>
 8001684:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001688:	ee16 0a90 	vmov	r0, s13
 800168c:	f7fe ff08 	bl	80004a0 <__aeabi_f2d>
 8001690:	a327      	add	r3, pc, #156	@ (adr r3, 8001730 <MPU9250_DataConvert+0x198>)
 8001692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001696:	f7fe fda5 	bl	80001e4 <__adddf3>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	f7ff f967 	bl	8000974 <__aeabi_d2f>
 80016a6:	4602      	mov	r2, r0
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	625a      	str	r2, [r3, #36]	@ 0x24

	mpu9250->pt1_p.gyro_x = DEG_TO_RAD * (mpu9250->pt1_p.gyro_x_raw) / LSB_Sensitivity_GYRO;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80016b2:	ee07 3a90 	vmov	s15, r3
 80016b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ba:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001740 <MPU9250_DataConvert+0x1a8>
 80016be:	ee67 6a87 	vmul.f32	s13, s15, s14
 80016c2:	4b20      	ldr	r3, [pc, #128]	@ (8001744 <MPU9250_DataConvert+0x1ac>)
 80016c4:	ed93 7a00 	vldr	s14, [r3]
 80016c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	mpu9250->pt1_p.gyro_y = DEG_TO_RAD * (mpu9250->pt1_p.gyro_y_raw) / LSB_Sensitivity_GYRO;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80016d8:	ee07 3a90 	vmov	s15, r3
 80016dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016e0:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001740 <MPU9250_DataConvert+0x1a8>
 80016e4:	ee67 6a87 	vmul.f32	s13, s15, s14
 80016e8:	4b16      	ldr	r3, [pc, #88]	@ (8001744 <MPU9250_DataConvert+0x1ac>)
 80016ea:	ed93 7a00 	vldr	s14, [r3]
 80016ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	mpu9250->pt1_p.gyro_z = DEG_TO_RAD * (mpu9250->pt1_p.gyro_z_raw) / LSB_Sensitivity_GYRO;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80016fe:	ee07 3a90 	vmov	s15, r3
 8001702:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001706:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001740 <MPU9250_DataConvert+0x1a8>
 800170a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800170e:	4b0d      	ldr	r3, [pc, #52]	@ (8001744 <MPU9250_DataConvert+0x1ac>)
 8001710:	ed93 7a00 	vldr	s14, [r3]
 8001714:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	//mpu9250->pt1_p.gyro_z = (mpu9250->pt1_p.gyro_z_raw - mpu9250->pt1_p.cal_gyz) / (LSB_Sensitivity_GYRO * 10);
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bdb0      	pop	{r4, r5, r7, pc}
 8001726:	bf00      	nop
 8001728:	9999999a 	.word	0x9999999a
 800172c:	40239999 	.word	0x40239999
 8001730:	0a3d70a4 	.word	0x0a3d70a4
 8001734:	404243d7 	.word	0x404243d7
 8001738:	2000049c 	.word	0x2000049c
 800173c:	43aa0000 	.word	0x43aa0000
 8001740:	3c8efa33 	.word	0x3c8efa33
 8001744:	200004a0 	.word	0x200004a0

08001748 <calibrateGyro>:

void calibrateGyro(imu_9250_t *mpu9250, uint16_t numCalPoints)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	807b      	strh	r3, [r7, #2]
	// Init
	int32_t xx = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
	int32_t yy = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	613b      	str	r3, [r7, #16]
	int32_t zz = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]

	// Zero guard
	if (numCalPoints == 0)
 8001760:	887b      	ldrh	r3, [r7, #2]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d101      	bne.n	800176a <calibrateGyro+0x22>
	{
		numCalPoints = 1;
 8001766:	2301      	movs	r3, #1
 8001768:	807b      	strh	r3, [r7, #2]
	}

	// Save specified number of points
	for (uint16_t ii = 0; ii < numCalPoints; ii++)
 800176a:	2300      	movs	r3, #0
 800176c:	817b      	strh	r3, [r7, #10]
 800176e:	e01d      	b.n	80017ac <calibrateGyro+0x64>
	{
		MPU9250_Get6AxisRawData(mpu9250);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7ff fe54 	bl	800141e <MPU9250_Get6AxisRawData>
		xx += mpu9250->pt1_p.gyro_x_raw;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800177c:	461a      	mov	r2, r3
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	4413      	add	r3, r2
 8001782:	617b      	str	r3, [r7, #20]
		yy += mpu9250->pt1_p.gyro_y_raw;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800178a:	461a      	mov	r2, r3
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	4413      	add	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
		zz += mpu9250->pt1_p.gyro_z_raw;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001798:	461a      	mov	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4413      	add	r3, r2
 800179e:	60fb      	str	r3, [r7, #12]
		HAL_Delay(3);
 80017a0:	2003      	movs	r0, #3
 80017a2:	f003 fbbd 	bl	8004f20 <HAL_Delay>
	for (uint16_t ii = 0; ii < numCalPoints; ii++)
 80017a6:	897b      	ldrh	r3, [r7, #10]
 80017a8:	3301      	adds	r3, #1
 80017aa:	817b      	strh	r3, [r7, #10]
 80017ac:	897a      	ldrh	r2, [r7, #10]
 80017ae:	887b      	ldrh	r3, [r7, #2]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d3dd      	bcc.n	8001770 <calibrateGyro+0x28>
	}

	// Average the saved data points to find the gyroscope offset
	mpu9250->pt1_p.cal_gyx = (float)xx / (float)numCalPoints;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	ee07 3a90 	vmov	s15, r3
 80017ba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017be:	887b      	ldrh	r3, [r7, #2]
 80017c0:	ee07 3a90 	vmov	s15, r3
 80017c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
	mpu9250->pt1_p.cal_gyy = (float)yy / (float)numCalPoints;
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	ee07 3a90 	vmov	s15, r3
 80017d8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017dc:	887b      	ldrh	r3, [r7, #2]
 80017de:	ee07 3a90 	vmov	s15, r3
 80017e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
	mpu9250->pt1_p.cal_gyz = (float)zz / (float)numCalPoints;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	ee07 3a90 	vmov	s15, r3
 80017f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017fa:	887b      	ldrh	r3, [r7, #2]
 80017fc:	ee07 3a90 	vmov	s15, r3
 8001800:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001804:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
}
 800180e:	bf00      	nop
 8001810:	3718      	adds	r7, #24
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <IMU_9250_Init>:

void IMU_9250_Init(imu_9250_t *imu_p, void (*get_data_func)(imu_9250_t *imu_p))
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	6039      	str	r1, [r7, #0]
	imu_p->get_data = get_data_func;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	601a      	str	r2, [r3, #0]
	start_imu();
 8001826:	f7ff fc77 	bl	8001118 <start_imu>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <IMU_9250_Create>:
 * The function creates and initializes a new instance of the IMU_9250 structure.
 *
 * @return a pointer to a structure of type imu_9250_t.
 */
imu_9250_t *IMU_9250_Create()
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
	imu_9250_t *imu_p = malloc(sizeof(imu_9250_t));
 800183a:	2064      	movs	r0, #100	@ 0x64
 800183c:	f008 f866 	bl	800990c <malloc>
 8001840:	4603      	mov	r3, r0
 8001842:	607b      	str	r3, [r7, #4]
	if (imu_p != NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <IMU_9250_Create+0x1e>
	{
		IMU_9250_Init(imu_p, MPU9250_ProcessData);
 800184a:	4904      	ldr	r1, [pc, #16]	@ (800185c <IMU_9250_Create+0x28>)
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff ffe2 	bl	8001816 <IMU_9250_Init>
	}
	return imu_p;
 8001852:	687b      	ldr	r3, [r7, #4]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	080013fd 	.word	0x080013fd

08001860 <HAL_TIM_IC_CaptureCallback>:
imu_9250_t* imu_9250_0;
Struct_Angle Angle;
motor_t* motor_0;
int timer;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a0e      	ldr	r2, [pc, #56]	@ (80018a4 <HAL_TIM_IC_CaptureCallback+0x44>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d113      	bne.n	8001898 <HAL_TIM_IC_CaptureCallback+0x38>
	{
		motor_0->Prop_p.timer_counter = __HAL_TIM_GET_COUNTER(&htim2);
 8001870:	4b0c      	ldr	r3, [pc, #48]	@ (80018a4 <HAL_TIM_IC_CaptureCallback+0x44>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001876:	4b0c      	ldr	r3, [pc, #48]	@ (80018a8 <HAL_TIM_IC_CaptureCallback+0x48>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	b212      	sxth	r2, r2
 800187c:	80da      	strh	r2, [r3, #6]
		motor_0->Prop_p.measure_speed = motor_0->Prop_p.timer_counter /4;
 800187e:	4b0a      	ldr	r3, [pc, #40]	@ (80018a8 <HAL_TIM_IC_CaptureCallback+0x48>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 8001886:	4b08      	ldr	r3, [pc, #32]	@ (80018a8 <HAL_TIM_IC_CaptureCallback+0x48>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	460b      	mov	r3, r1
 800188c:	2b00      	cmp	r3, #0
 800188e:	da00      	bge.n	8001892 <HAL_TIM_IC_CaptureCallback+0x32>
 8001890:	3303      	adds	r3, #3
 8001892:	109b      	asrs	r3, r3, #2
 8001894:	b21b      	sxth	r3, r3
 8001896:	8113      	strh	r3, [r2, #8]
	}
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	20000550 	.word	0x20000550
 80018a8:	20000700 	.word	0x20000700

080018ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018b0:	f003 fac4 	bl	8004e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018b4:	f000 f828 	bl	8001908 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018b8:	f000 fa1a 	bl	8001cf0 <MX_GPIO_Init>
  MX_DMA_Init();
 80018bc:	f000 f9da 	bl	8001c74 <MX_DMA_Init>
  MX_I2C1_Init();
 80018c0:	f000 f88c 	bl	80019dc <MX_I2C1_Init>
  MX_TIM1_Init();
 80018c4:	f000 f8b8 	bl	8001a38 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80018c8:	f000 f9aa 	bl	8001c20 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80018cc:	f000 f954 	bl	8001b78 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  imu_9250_0 = IMU_9250_Create();
 80018d0:	f7ff ffb0 	bl	8001834 <IMU_9250_Create>
 80018d4:	4603      	mov	r3, r0
 80018d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001904 <main+0x58>)
 80018d8:	6013      	str	r3, [r2, #0]
  calibrateGyro(imu_9250_0, 500);
 80018da:	4b0a      	ldr	r3, [pc, #40]	@ (8001904 <main+0x58>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff ff30 	bl	8001748 <calibrateGyro>
//  motor_0 = MOTOR_Create();
//  motor_0->Prop_p.out_speed = 20;
  setup();
 80018e8:	f002 f920 	bl	8003b2c <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  imu_9250_0->get_data(imu_9250_0);			// pointer store address of MPU9250_ProcessData function
 80018ec:	4b05      	ldr	r3, [pc, #20]	@ (8001904 <main+0x58>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a04      	ldr	r2, [pc, #16]	@ (8001904 <main+0x58>)
 80018f4:	6812      	ldr	r2, [r2, #0]
 80018f6:	4610      	mov	r0, r2
 80018f8:	4798      	blx	r3
//	  CalculateGyroAngle(&Angle, imu_9250_0);
//	  motor_0->control_speed(motor_0);
//	  timer++;
	  loop();
 80018fa:	f002 f939 	bl	8003b70 <loop>
	  imu_9250_0->get_data(imu_9250_0);			// pointer store address of MPU9250_ProcessData function
 80018fe:	bf00      	nop
 8001900:	e7f4      	b.n	80018ec <main+0x40>
 8001902:	bf00      	nop
 8001904:	200006fc 	.word	0x200006fc

08001908 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b094      	sub	sp, #80	@ 0x50
 800190c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800190e:	f107 0320 	add.w	r3, r7, #32
 8001912:	2230      	movs	r2, #48	@ 0x30
 8001914:	2100      	movs	r1, #0
 8001916:	4618      	mov	r0, r3
 8001918:	f008 f8e4 	bl	8009ae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800192c:	2300      	movs	r3, #0
 800192e:	60bb      	str	r3, [r7, #8]
 8001930:	4b28      	ldr	r3, [pc, #160]	@ (80019d4 <SystemClock_Config+0xcc>)
 8001932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001934:	4a27      	ldr	r2, [pc, #156]	@ (80019d4 <SystemClock_Config+0xcc>)
 8001936:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800193a:	6413      	str	r3, [r2, #64]	@ 0x40
 800193c:	4b25      	ldr	r3, [pc, #148]	@ (80019d4 <SystemClock_Config+0xcc>)
 800193e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001940:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001948:	2300      	movs	r3, #0
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	4b22      	ldr	r3, [pc, #136]	@ (80019d8 <SystemClock_Config+0xd0>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a21      	ldr	r2, [pc, #132]	@ (80019d8 <SystemClock_Config+0xd0>)
 8001952:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001956:	6013      	str	r3, [r2, #0]
 8001958:	4b1f      	ldr	r3, [pc, #124]	@ (80019d8 <SystemClock_Config+0xd0>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001960:	607b      	str	r3, [r7, #4]
 8001962:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001964:	2301      	movs	r3, #1
 8001966:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001968:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800196c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800196e:	2302      	movs	r3, #2
 8001970:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001972:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001976:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001978:	2308      	movs	r3, #8
 800197a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800197c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001980:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001982:	2302      	movs	r3, #2
 8001984:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001986:	2307      	movs	r3, #7
 8001988:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800198a:	f107 0320 	add.w	r3, r7, #32
 800198e:	4618      	mov	r0, r3
 8001990:	f005 f974 	bl	8006c7c <HAL_RCC_OscConfig>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800199a:	f000 f9fb 	bl	8001d94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800199e:	230f      	movs	r3, #15
 80019a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019a2:	2302      	movs	r3, #2
 80019a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019aa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80019ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019b6:	f107 030c 	add.w	r3, r7, #12
 80019ba:	2105      	movs	r1, #5
 80019bc:	4618      	mov	r0, r3
 80019be:	f005 fbd5 	bl	800716c <HAL_RCC_ClockConfig>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80019c8:	f000 f9e4 	bl	8001d94 <Error_Handler>
  }
}
 80019cc:	bf00      	nop
 80019ce:	3750      	adds	r7, #80	@ 0x50
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40007000 	.word	0x40007000

080019dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019e0:	4b12      	ldr	r3, [pc, #72]	@ (8001a2c <MX_I2C1_Init+0x50>)
 80019e2:	4a13      	ldr	r2, [pc, #76]	@ (8001a30 <MX_I2C1_Init+0x54>)
 80019e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80019e6:	4b11      	ldr	r3, [pc, #68]	@ (8001a2c <MX_I2C1_Init+0x50>)
 80019e8:	4a12      	ldr	r2, [pc, #72]	@ (8001a34 <MX_I2C1_Init+0x58>)
 80019ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019ec:	4b0f      	ldr	r3, [pc, #60]	@ (8001a2c <MX_I2C1_Init+0x50>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019f2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a2c <MX_I2C1_Init+0x50>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019f8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a2c <MX_I2C1_Init+0x50>)
 80019fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a00:	4b0a      	ldr	r3, [pc, #40]	@ (8001a2c <MX_I2C1_Init+0x50>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a06:	4b09      	ldr	r3, [pc, #36]	@ (8001a2c <MX_I2C1_Init+0x50>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a0c:	4b07      	ldr	r3, [pc, #28]	@ (8001a2c <MX_I2C1_Init+0x50>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a12:	4b06      	ldr	r3, [pc, #24]	@ (8001a2c <MX_I2C1_Init+0x50>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a18:	4804      	ldr	r0, [pc, #16]	@ (8001a2c <MX_I2C1_Init+0x50>)
 8001a1a:	f004 f96f 	bl	8005cfc <HAL_I2C_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a24:	f000 f9b6 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	200004b4 	.word	0x200004b4
 8001a30:	40005400 	.word	0x40005400
 8001a34:	00061a80 	.word	0x00061a80

08001a38 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b096      	sub	sp, #88	@ 0x58
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a3e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	609a      	str	r2, [r3, #8]
 8001a4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a4c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
 8001a62:	60da      	str	r2, [r3, #12]
 8001a64:	611a      	str	r2, [r3, #16]
 8001a66:	615a      	str	r2, [r3, #20]
 8001a68:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a6a:	1d3b      	adds	r3, r7, #4
 8001a6c:	2220      	movs	r2, #32
 8001a6e:	2100      	movs	r1, #0
 8001a70:	4618      	mov	r0, r3
 8001a72:	f008 f837 	bl	8009ae4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a76:	4b3e      	ldr	r3, [pc, #248]	@ (8001b70 <MX_TIM1_Init+0x138>)
 8001a78:	4a3e      	ldr	r2, [pc, #248]	@ (8001b74 <MX_TIM1_Init+0x13c>)
 8001a7a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8001a7c:	4b3c      	ldr	r3, [pc, #240]	@ (8001b70 <MX_TIM1_Init+0x138>)
 8001a7e:	22a7      	movs	r2, #167	@ 0xa7
 8001a80:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a82:	4b3b      	ldr	r3, [pc, #236]	@ (8001b70 <MX_TIM1_Init+0x138>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001a88:	4b39      	ldr	r3, [pc, #228]	@ (8001b70 <MX_TIM1_Init+0x138>)
 8001a8a:	2263      	movs	r2, #99	@ 0x63
 8001a8c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a8e:	4b38      	ldr	r3, [pc, #224]	@ (8001b70 <MX_TIM1_Init+0x138>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a94:	4b36      	ldr	r3, [pc, #216]	@ (8001b70 <MX_TIM1_Init+0x138>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a9a:	4b35      	ldr	r3, [pc, #212]	@ (8001b70 <MX_TIM1_Init+0x138>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001aa0:	4833      	ldr	r0, [pc, #204]	@ (8001b70 <MX_TIM1_Init+0x138>)
 8001aa2:	f005 fd83 	bl	80075ac <HAL_TIM_Base_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001aac:	f000 f972 	bl	8001d94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ab0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ab4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ab6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001aba:	4619      	mov	r1, r3
 8001abc:	482c      	ldr	r0, [pc, #176]	@ (8001b70 <MX_TIM1_Init+0x138>)
 8001abe:	f006 f88d 	bl	8007bdc <HAL_TIM_ConfigClockSource>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001ac8:	f000 f964 	bl	8001d94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001acc:	4828      	ldr	r0, [pc, #160]	@ (8001b70 <MX_TIM1_Init+0x138>)
 8001ace:	f005 fdbc 	bl	800764a <HAL_TIM_PWM_Init>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001ad8:	f000 f95c 	bl	8001d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001adc:	2300      	movs	r3, #0
 8001ade:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ae4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4821      	ldr	r0, [pc, #132]	@ (8001b70 <MX_TIM1_Init+0x138>)
 8001aec:	f006 fc50 	bl	8008390 <HAL_TIMEx_MasterConfigSynchronization>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001af6:	f000 f94d 	bl	8001d94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001afa:	2360      	movs	r3, #96	@ 0x60
 8001afc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b02:	2300      	movs	r3, #0
 8001b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b06:	2300      	movs	r3, #0
 8001b08:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b12:	2300      	movs	r3, #0
 8001b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4814      	ldr	r0, [pc, #80]	@ (8001b70 <MX_TIM1_Init+0x138>)
 8001b20:	f005 ff9a 	bl	8007a58 <HAL_TIM_PWM_ConfigChannel>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001b2a:	f000 f933 	bl	8001d94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b46:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4807      	ldr	r0, [pc, #28]	@ (8001b70 <MX_TIM1_Init+0x138>)
 8001b52:	f006 fc99 	bl	8008488 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001b5c:	f000 f91a 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b60:	4803      	ldr	r0, [pc, #12]	@ (8001b70 <MX_TIM1_Init+0x138>)
 8001b62:	f002 ff7b 	bl	8004a5c <HAL_TIM_MspPostInit>

}
 8001b66:	bf00      	nop
 8001b68:	3758      	adds	r7, #88	@ 0x58
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000508 	.word	0x20000508
 8001b74:	40010000 	.word	0x40010000

08001b78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08c      	sub	sp, #48	@ 0x30
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b7e:	f107 030c 	add.w	r3, r7, #12
 8001b82:	2224      	movs	r2, #36	@ 0x24
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f007 ffac 	bl	8009ae4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b94:	4b21      	ldr	r3, [pc, #132]	@ (8001c1c <MX_TIM2_Init+0xa4>)
 8001b96:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b9c:	4b1f      	ldr	r3, [pc, #124]	@ (8001c1c <MX_TIM2_Init+0xa4>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c1c <MX_TIM2_Init+0xa4>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001ba8:	4b1c      	ldr	r3, [pc, #112]	@ (8001c1c <MX_TIM2_Init+0xa4>)
 8001baa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001bae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c1c <MX_TIM2_Init+0xa4>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb6:	4b19      	ldr	r3, [pc, #100]	@ (8001c1c <MX_TIM2_Init+0xa4>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001be0:	f107 030c 	add.w	r3, r7, #12
 8001be4:	4619      	mov	r1, r3
 8001be6:	480d      	ldr	r0, [pc, #52]	@ (8001c1c <MX_TIM2_Init+0xa4>)
 8001be8:	f005 fd88 	bl	80076fc <HAL_TIM_Encoder_Init>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001bf2:	f000 f8cf 	bl	8001d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bfe:	1d3b      	adds	r3, r7, #4
 8001c00:	4619      	mov	r1, r3
 8001c02:	4806      	ldr	r0, [pc, #24]	@ (8001c1c <MX_TIM2_Init+0xa4>)
 8001c04:	f006 fbc4 	bl	8008390 <HAL_TIMEx_MasterConfigSynchronization>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001c0e:	f000 f8c1 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c12:	bf00      	nop
 8001c14:	3730      	adds	r7, #48	@ 0x30
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000550 	.word	0x20000550

08001c20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c24:	4b11      	ldr	r3, [pc, #68]	@ (8001c6c <MX_USART2_UART_Init+0x4c>)
 8001c26:	4a12      	ldr	r2, [pc, #72]	@ (8001c70 <MX_USART2_UART_Init+0x50>)
 8001c28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c2a:	4b10      	ldr	r3, [pc, #64]	@ (8001c6c <MX_USART2_UART_Init+0x4c>)
 8001c2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c32:	4b0e      	ldr	r3, [pc, #56]	@ (8001c6c <MX_USART2_UART_Init+0x4c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c38:	4b0c      	ldr	r3, [pc, #48]	@ (8001c6c <MX_USART2_UART_Init+0x4c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c6c <MX_USART2_UART_Init+0x4c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c44:	4b09      	ldr	r3, [pc, #36]	@ (8001c6c <MX_USART2_UART_Init+0x4c>)
 8001c46:	220c      	movs	r2, #12
 8001c48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c4a:	4b08      	ldr	r3, [pc, #32]	@ (8001c6c <MX_USART2_UART_Init+0x4c>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c50:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <MX_USART2_UART_Init+0x4c>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c56:	4805      	ldr	r0, [pc, #20]	@ (8001c6c <MX_USART2_UART_Init+0x4c>)
 8001c58:	f006 fc7c 	bl	8008554 <HAL_UART_Init>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c62:	f000 f897 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	200005f8 	.word	0x200005f8
 8001c70:	40004400 	.word	0x40004400

08001c74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	607b      	str	r3, [r7, #4]
 8001c7e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cec <MX_DMA_Init+0x78>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c82:	4a1a      	ldr	r2, [pc, #104]	@ (8001cec <MX_DMA_Init+0x78>)
 8001c84:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c8a:	4b18      	ldr	r3, [pc, #96]	@ (8001cec <MX_DMA_Init+0x78>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c92:	607b      	str	r3, [r7, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	603b      	str	r3, [r7, #0]
 8001c9a:	4b14      	ldr	r3, [pc, #80]	@ (8001cec <MX_DMA_Init+0x78>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9e:	4a13      	ldr	r2, [pc, #76]	@ (8001cec <MX_DMA_Init+0x78>)
 8001ca0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca6:	4b11      	ldr	r3, [pc, #68]	@ (8001cec <MX_DMA_Init+0x78>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001caa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	2010      	movs	r0, #16
 8001cb8:	f003 fa31 	bl	800511e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001cbc:	2010      	movs	r0, #16
 8001cbe:	f003 fa4a 	bl	8005156 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	2011      	movs	r0, #17
 8001cc8:	f003 fa29 	bl	800511e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001ccc:	2011      	movs	r0, #17
 8001cce:	f003 fa42 	bl	8005156 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	2039      	movs	r0, #57	@ 0x39
 8001cd8:	f003 fa21 	bl	800511e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001cdc:	2039      	movs	r0, #57	@ 0x39
 8001cde:	f003 fa3a 	bl	8005156 <HAL_NVIC_EnableIRQ>

}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800

08001cf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b087      	sub	sp, #28
 8001cf4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
 8001cfa:	4b25      	ldr	r3, [pc, #148]	@ (8001d90 <MX_GPIO_Init+0xa0>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfe:	4a24      	ldr	r2, [pc, #144]	@ (8001d90 <MX_GPIO_Init+0xa0>)
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d06:	4b22      	ldr	r3, [pc, #136]	@ (8001d90 <MX_GPIO_Init+0xa0>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	f003 0304 	and.w	r3, r3, #4
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	4b1e      	ldr	r3, [pc, #120]	@ (8001d90 <MX_GPIO_Init+0xa0>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1a:	4a1d      	ldr	r2, [pc, #116]	@ (8001d90 <MX_GPIO_Init+0xa0>)
 8001d1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d22:	4b1b      	ldr	r3, [pc, #108]	@ (8001d90 <MX_GPIO_Init+0xa0>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	4b17      	ldr	r3, [pc, #92]	@ (8001d90 <MX_GPIO_Init+0xa0>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d36:	4a16      	ldr	r2, [pc, #88]	@ (8001d90 <MX_GPIO_Init+0xa0>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d3e:	4b14      	ldr	r3, [pc, #80]	@ (8001d90 <MX_GPIO_Init+0xa0>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60bb      	str	r3, [r7, #8]
 8001d4e:	4b10      	ldr	r3, [pc, #64]	@ (8001d90 <MX_GPIO_Init+0xa0>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d52:	4a0f      	ldr	r2, [pc, #60]	@ (8001d90 <MX_GPIO_Init+0xa0>)
 8001d54:	f043 0310 	orr.w	r3, r3, #16
 8001d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d90 <MX_GPIO_Init+0xa0>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5e:	f003 0310 	and.w	r3, r3, #16
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	4b09      	ldr	r3, [pc, #36]	@ (8001d90 <MX_GPIO_Init+0xa0>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6e:	4a08      	ldr	r2, [pc, #32]	@ (8001d90 <MX_GPIO_Init+0xa0>)
 8001d70:	f043 0302 	orr.w	r3, r3, #2
 8001d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d76:	4b06      	ldr	r3, [pc, #24]	@ (8001d90 <MX_GPIO_Init+0xa0>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	607b      	str	r3, [r7, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d82:	bf00      	nop
 8001d84:	371c      	adds	r7, #28
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800

08001d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d98:	b672      	cpsid	i
}
 8001d9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d9c:	bf00      	nop
 8001d9e:	e7fd      	b.n	8001d9c <Error_Handler+0x8>

08001da0 <_ZN13STM32HardwareC1Ev>:
// Create Serial Buffer with UART2:
extern BufferedSerial buff_serial;

class STM32Hardware {
 public:
  STM32Hardware() : serial(&buff_serial) {}
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a04      	ldr	r2, [pc, #16]	@ (8001dbc <_ZN13STM32HardwareC1Ev+0x1c>)
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4618      	mov	r0, r3
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	2000008c 	.word	0x2000008c

08001dc0 <_ZN13STM32Hardware4initEv>:

  // Any initialization code necessary to use the serial port:
  void init() { serial->init(); }
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe ffb9 	bl	8000d44 <_ZN14BufferedSerial4initEv>
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <_ZN13STM32Hardware4readEv>:

  // Read a byte from the serial port. -1 = failure:
  int read() { return serial->read(); }
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7fe ffb7 	bl	8000d5a <_ZN14BufferedSerial4readEv>
 8001dec:	4603      	mov	r3, r0
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <_ZN13STM32Hardware5writeEPhi>:

  // Write data to the connection to ROS:
  void write(uint8_t* data, int length) { serial->write(data, length); }
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b084      	sub	sp, #16
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	60f8      	str	r0, [r7, #12]
 8001dfe:	60b9      	str	r1, [r7, #8]
 8001e00:	607a      	str	r2, [r7, #4]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	68b9      	ldr	r1, [r7, #8]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe ffdb 	bl	8000dc6 <_ZN14BufferedSerial5writeEPKhi>
 8001e10:	bf00      	nop
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <_ZN13STM32Hardware4timeEv>:

  // Returns milliseconds since start of program:
  unsigned long time() { return HAL_GetTick(); };
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	f003 f872 	bl	8004f08 <HAL_GetTick>
 8001e24:	4603      	mov	r3, r0
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <_ZN3ros3Msg19serializeAvrFloat64EPhf>:
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 8001e2e:	b480      	push	{r7}
 8001e30:	b087      	sub	sp, #28
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
 8001e36:	ed87 0a00 	vstr	s0, [r7]
  {
    int32_t val;
    memcpy(&val, &f, sizeof(val));
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	60fb      	str	r3, [r7, #12]

    int16_t exp = ((val >> 23) & 255);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	15db      	asrs	r3, r3, #23
 8001e42:	b21b      	sxth	r3, r3
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	82fb      	strh	r3, [r7, #22]
    uint32_t mantissa = val & 0x7FFFFF;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8001e4e:	613b      	str	r3, [r7, #16]

    if (exp == 255)
 8001e50:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001e54:	2bff      	cmp	r3, #255	@ 0xff
 8001e56:	d103      	bne.n	8001e60 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x32>
    {
      exp = 2047; // Special value for NaN, infinity etc.
 8001e58:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001e5c:	82fb      	strh	r3, [r7, #22]
 8001e5e:	e02a      	b.n	8001eb6 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else if (exp != 0)
 8001e60:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d005      	beq.n	8001e74 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x46>
    {
      exp += 1023 - 127; // Normal case
 8001e68:	8afb      	ldrh	r3, [r7, #22]
 8001e6a:	f503 7360 	add.w	r3, r3, #896	@ 0x380
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	82fb      	strh	r3, [r7, #22]
 8001e72:	e020      	b.n	8001eb6 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else if (!mantissa)
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d102      	bne.n	8001e80 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x52>
    {
      exp = 0; // Zero
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	82fb      	strh	r3, [r7, #22]
 8001e7e:	e01a      	b.n	8001eb6 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else
    {
      // Denormalized value in float, will fit as normalized value in double
      exp += 1023 - 127;
 8001e80:	8afb      	ldrh	r3, [r7, #22]
 8001e82:	f503 7360 	add.w	r3, r3, #896	@ 0x380
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	82fb      	strh	r3, [r7, #22]
      mantissa <<= 1;
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	613b      	str	r3, [r7, #16]
      while (!(mantissa & 0x800000))
 8001e90:	e008      	b.n	8001ea4 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x76>
      {
          mantissa <<= 1;
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	613b      	str	r3, [r7, #16]
          exp--;
 8001e98:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	82fb      	strh	r3, [r7, #22]
      while (!(mantissa & 0x800000))
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f1      	beq.n	8001e92 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x64>
      }
      mantissa &= 0x7FFFFF;
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8001eb4:	613b      	str	r3, [r7, #16]
    }

    *(outbuffer++) = 0;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	1c5a      	adds	r2, r3, #1
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	1c5a      	adds	r2, r3, #1
 8001ec4:	607a      	str	r2, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	1c5a      	adds	r2, r3, #1
 8001ece:	607a      	str	r2, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa << 5) & 0xff;
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	1c59      	adds	r1, r3, #1
 8001edc:	6079      	str	r1, [r7, #4]
 8001ede:	0152      	lsls	r2, r2, #5
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa >> 3) & 0xff;
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	08d9      	lsrs	r1, r3, #3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	1c5a      	adds	r2, r3, #1
 8001eec:	607a      	str	r2, [r7, #4]
 8001eee:	b2ca      	uxtb	r2, r1
 8001ef0:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa >> 11) & 0xff;
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	0ad9      	lsrs	r1, r3, #11
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	1c5a      	adds	r2, r3, #1
 8001efa:	607a      	str	r2, [r7, #4]
 8001efc:	b2ca      	uxtb	r2, r1
 8001efe:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((mantissa >> 19) & 0x0F);
 8001f00:	8afb      	ldrh	r3, [r7, #22]
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	011b      	lsls	r3, r3, #4
 8001f06:	b2d9      	uxtb	r1, r3
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	0cdb      	lsrs	r3, r3, #19
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	1c58      	adds	r0, r3, #1
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (exp >> 4) & 0x7F;
 8001f20:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001f24:	111b      	asrs	r3, r3, #4
 8001f26:	b21b      	sxth	r3, r3
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	1c59      	adds	r1, r3, #1
 8001f2e:	6079      	str	r1, [r7, #4]
 8001f30:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	701a      	strb	r2, [r3, #0]

    // Mark negative bit as necessary.
    if (f < 0)
 8001f38:	edd7 7a00 	vldr	s15, [r7]
 8001f3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f44:	d508      	bpl.n	8001f58 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x12a>
    {
      *(outbuffer - 1) |= 0x80;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	781a      	ldrb	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	701a      	strb	r2, [r3, #0]
    }

    return 8;
 8001f58:	2308      	movs	r3, #8
  }
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	371c      	adds	r7, #28
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>:
   * @param[in] inbuffer pointer for buffer to deserialize from.
   * @param[out] f pointer to place the deserialized value in.
   *
   * @return number of bytes to advance the buffer pointer.
   */
  static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 8001f66:	b480      	push	{r7}
 8001f68:	b087      	sub	sp, #28
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	6039      	str	r1, [r7, #0]
  {
    int16_t exp;
    uint32_t mantissa;

    // Skip lowest 24 bits
    inbuffer += 3;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3303      	adds	r3, #3
 8001f74:	607b      	str	r3, [r7, #4]

    // Copy truncated mantissa.
    mantissa = ((uint32_t)(*(inbuffer++)) >> 4 & 0x0F);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	1c5a      	adds	r2, r3, #1
 8001f7a:	607a      	str	r2, [r7, #4]
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	091b      	lsrs	r3, r3, #4
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*(inbuffer++)) & 0xff) << 4;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	1c5a      	adds	r2, r3, #1
 8001f8c:	607a      	str	r2, [r7, #4]
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	011b      	lsls	r3, r3, #4
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*(inbuffer++)) & 0xff) << 12;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	607a      	str	r2, [r7, #4]
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	031b      	lsls	r3, r3, #12
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*inbuffer) & 0x0f) << 20;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	051b      	lsls	r3, r3, #20
 8001fae:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]

    // Copy exponent.
    exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	607a      	str	r2, [r7, #4]
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	091b      	lsrs	r3, r3, #4
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	b21b      	sxth	r3, r3
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	82fb      	strh	r3, [r7, #22]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	011b      	lsls	r3, r3, #4
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	8afb      	ldrh	r3, [r7, #22]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	82fb      	strh	r3, [r7, #22]

    if (exp == 2047)
 8001fe2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001fe6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d102      	bne.n	8001ff4 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0x8e>
    {
      exp = 255; // NaN, infinity etc.
 8001fee:	23ff      	movs	r3, #255	@ 0xff
 8001ff0:	82fb      	strh	r3, [r7, #22]
 8001ff2:	e02c      	b.n	800204e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xe8>
    }
    else if (exp - 1023 > 127)
 8001ff4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ff8:	f240 427e 	movw	r2, #1150	@ 0x47e
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	dd04      	ble.n	800200a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xa4>
    {
      exp = 255;
 8002000:	23ff      	movs	r3, #255	@ 0xff
 8002002:	82fb      	strh	r3, [r7, #22]
      mantissa = 0; // Too large for float, convert to infinity
 8002004:	2300      	movs	r3, #0
 8002006:	613b      	str	r3, [r7, #16]
 8002008:	e021      	b.n	800204e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xe8>
    }
    else if (exp - 1023 >= -126)
 800200a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800200e:	f5b3 7f60 	cmp.w	r3, #896	@ 0x380
 8002012:	dd05      	ble.n	8002020 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xba>
    {
      exp -= 1023 - 127; // Normal case
 8002014:	8afb      	ldrh	r3, [r7, #22]
 8002016:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 800201a:	b29b      	uxth	r3, r3
 800201c:	82fb      	strh	r3, [r7, #22]
 800201e:	e016      	b.n	800204e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xe8>
    }
    else if (exp - 1023 < -150)
 8002020:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002024:	f5b3 7f5a 	cmp.w	r3, #872	@ 0x368
 8002028:	dc02      	bgt.n	8002030 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xca>
    {
      exp = 0; // Too small or zero
 800202a:	2300      	movs	r3, #0
 800202c:	82fb      	strh	r3, [r7, #22]
 800202e:	e00e      	b.n	800204e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xe8>
    }
    else
    {
      // Have to convert to denormalized representation for float
      mantissa |= 0x1000000;
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002036:	613b      	str	r3, [r7, #16]
      mantissa >>= ((-126 + 1023) - exp);
 8002038:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800203c:	f5c3 7360 	rsb	r3, r3, #896	@ 0x380
 8002040:	3301      	adds	r3, #1
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	fa22 f303 	lsr.w	r3, r2, r3
 8002048:	613b      	str	r3, [r7, #16]
      exp = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	82fb      	strh	r3, [r7, #22]
    }

    // Round off mantissa
    if (mantissa != 0xFFFFFF)
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8002054:	4293      	cmp	r3, r2
 8002056:	d002      	beq.n	800205e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xf8>
      mantissa += 1;
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	3301      	adds	r3, #1
 800205c:	613b      	str	r3, [r7, #16]

    mantissa >>= 1;
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	085b      	lsrs	r3, r3, #1
 8002062:	613b      	str	r3, [r7, #16]

    // Put mantissa and exponent into place
    uint32_t val = mantissa;
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	60fb      	str	r3, [r7, #12]
    val |= static_cast<uint32_t>(exp) << 23;
 8002068:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800206c:	05da      	lsls	r2, r3, #23
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	4313      	orrs	r3, r2
 8002072:	60fb      	str	r3, [r7, #12]

    // Copy negative sign.
    val |= (static_cast<uint32_t>(*(inbuffer++)) & 0x80) << 24;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	1c5a      	adds	r2, r3, #1
 8002078:	607a      	str	r2, [r7, #4]
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	061b      	lsls	r3, r3, #24
 800207e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	4313      	orrs	r3, r2
 8002086:	60fb      	str	r3, [r7, #12]

    memcpy(f, &val, sizeof(val));
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	601a      	str	r2, [r3, #0]
    return 8;
 800208e:	2308      	movs	r3, #8
  }
 8002090:	4618      	mov	r0, r3
 8002092:	371c      	adds	r7, #28
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4618      	mov	r0, r3
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
	...

080020c0 <_ZN3ros3MsgC1Ev>:
class Msg
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	4a04      	ldr	r2, [pc, #16]	@ (80020dc <_ZN3ros3MsgC1Ev+0x1c>)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4618      	mov	r0, r3
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	0800a09c 	.word	0x0800a09c

080020e0 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
      data()
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff ffe8 	bl	80020c0 <_ZN3ros3MsgC1Ev>
 80020f0:	4a06      	ldr	r2, [pc, #24]	@ (800210c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	3304      	adds	r3, #4
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff ffce 	bl	800209c <_ZN3ros4TimeC1Ev>
    {
    }
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4618      	mov	r0, r3
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	0800a084 	.word	0x0800a084

08002110 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6859      	ldr	r1, [r3, #4]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	4413      	add	r3, r2
 8002128:	b2ca      	uxtb	r2, r1
 800212a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	0a19      	lsrs	r1, r3, #8
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	3301      	adds	r3, #1
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	4413      	add	r3, r2
 800213a:	b2ca      	uxtb	r2, r1
 800213c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	0c19      	lsrs	r1, r3, #16
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	3302      	adds	r3, #2
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	4413      	add	r3, r2
 800214c:	b2ca      	uxtb	r2, r1
 800214e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	0e19      	lsrs	r1, r3, #24
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	3303      	adds	r3, #3
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	4413      	add	r3, r2
 800215e:	b2ca      	uxtb	r2, r1
 8002160:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	3304      	adds	r3, #4
 8002166:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6899      	ldr	r1, [r3, #8]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	4413      	add	r3, r2
 8002172:	b2ca      	uxtb	r2, r1
 8002174:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	0a19      	lsrs	r1, r3, #8
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	3301      	adds	r3, #1
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	4413      	add	r3, r2
 8002184:	b2ca      	uxtb	r2, r1
 8002186:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	0c19      	lsrs	r1, r3, #16
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	3302      	adds	r3, #2
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	4413      	add	r3, r2
 8002196:	b2ca      	uxtb	r2, r1
 8002198:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	0e19      	lsrs	r1, r3, #24
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	3303      	adds	r3, #3
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	4413      	add	r3, r2
 80021a8:	b2ca      	uxtb	r2, r1
 80021aa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	3304      	adds	r3, #4
 80021b0:	60fb      	str	r3, [r7, #12]
      return offset;
 80021b2:	68fb      	ldr	r3, [r7, #12]
    }
 80021b4:	4618      	mov	r0, r3
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	4413      	add	r3, r2
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	461a      	mov	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	3301      	adds	r3, #1
 80021e4:	6839      	ldr	r1, [r7, #0]
 80021e6:	440b      	add	r3, r1
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	021b      	lsls	r3, r3, #8
 80021ec:	431a      	orrs	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	3302      	adds	r3, #2
 80021fa:	6839      	ldr	r1, [r7, #0]
 80021fc:	440b      	add	r3, r1
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	041b      	lsls	r3, r3, #16
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	3303      	adds	r3, #3
 8002210:	6839      	ldr	r1, [r7, #0]
 8002212:	440b      	add	r3, r1
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	061b      	lsls	r3, r3, #24
 8002218:	431a      	orrs	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	3304      	adds	r3, #4
 8002222:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	4413      	add	r3, r2
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	461a      	mov	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689a      	ldr	r2, [r3, #8]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	3301      	adds	r3, #1
 800223a:	6839      	ldr	r1, [r7, #0]
 800223c:	440b      	add	r3, r1
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	021b      	lsls	r3, r3, #8
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	3302      	adds	r3, #2
 8002250:	6839      	ldr	r1, [r7, #0]
 8002252:	440b      	add	r3, r1
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	041b      	lsls	r3, r3, #16
 8002258:	431a      	orrs	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	3303      	adds	r3, #3
 8002266:	6839      	ldr	r1, [r7, #0]
 8002268:	440b      	add	r3, r1
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	061b      	lsls	r3, r3, #24
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	3304      	adds	r3, #4
 8002278:	60fb      	str	r3, [r7, #12]
     return offset;
 800227a:	68fb      	ldr	r3, [r7, #12]
    }
 800227c:	4618      	mov	r0, r3
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	4b03      	ldr	r3, [pc, #12]	@ (80022a0 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8002292:	4618      	mov	r0, r3
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	08009c44 	.word	0x08009c44

080022a4 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	4b03      	ldr	r3, [pc, #12]	@ (80022bc <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80022ae:	4618      	mov	r0, r3
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	08009c54 	.word	0x08009c54

080022c0 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff fef8 	bl	80020c0 <_ZN3ros3MsgC1Ev>
 80022d0:	4a0b      	ldr	r2, [pc, #44]	@ (8002300 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	601a      	str	r2, [r3, #0]
      topic_id(0),
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a09      	ldr	r2, [pc, #36]	@ (8002304 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80022e0:	609a      	str	r2, [r3, #8]
      message_type(""),
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a07      	ldr	r2, [pc, #28]	@ (8002304 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80022e6:	60da      	str	r2, [r3, #12]
      md5sum(""),
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a06      	ldr	r2, [pc, #24]	@ (8002304 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80022ec:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	615a      	str	r2, [r3, #20]
    {
    }
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	0800a06c 	.word	0x0800a06c
 8002304:	08009c78 	.word	0x08009c78

08002308 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002308:	b580      	push	{r7, lr}
 800230a:	b088      	sub	sp, #32
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002312:	2300      	movs	r3, #0
 8002314:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	8899      	ldrh	r1, [r3, #4]
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	4413      	add	r3, r2
 8002320:	b2ca      	uxtb	r2, r1
 8002322:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	889b      	ldrh	r3, [r3, #4]
 8002328:	0a1b      	lsrs	r3, r3, #8
 800232a:	b299      	uxth	r1, r3
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	3301      	adds	r3, #1
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	4413      	add	r3, r2
 8002334:	b2ca      	uxtb	r2, r1
 8002336:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	3302      	adds	r3, #2
 800233c:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	4618      	mov	r0, r3
 8002344:	f7fd ff40 	bl	80001c8 <strlen>
 8002348:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	4413      	add	r3, r2
 8002350:	69b9      	ldr	r1, [r7, #24]
 8002352:	4618      	mov	r0, r3
 8002354:	f001 fc8c 	bl	8003c70 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	3304      	adds	r3, #4
 800235c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	18d0      	adds	r0, r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4619      	mov	r1, r3
 800236c:	f007 fbfe 	bl	8009b6c <memcpy>
      offset += length_topic_name;
 8002370:	69fa      	ldr	r2, [r7, #28]
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	4413      	add	r3, r2
 8002376:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	4618      	mov	r0, r3
 800237e:	f7fd ff23 	bl	80001c8 <strlen>
 8002382:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	4413      	add	r3, r2
 800238a:	6979      	ldr	r1, [r7, #20]
 800238c:	4618      	mov	r0, r3
 800238e:	f001 fc6f 	bl	8003c70 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3304      	adds	r3, #4
 8002396:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	18d0      	adds	r0, r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	4619      	mov	r1, r3
 80023a6:	f007 fbe1 	bl	8009b6c <memcpy>
      offset += length_message_type;
 80023aa:	69fa      	ldr	r2, [r7, #28]
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	4413      	add	r3, r2
 80023b0:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fd ff06 	bl	80001c8 <strlen>
 80023bc:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	4413      	add	r3, r2
 80023c4:	6939      	ldr	r1, [r7, #16]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f001 fc52 	bl	8003c70 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	3304      	adds	r3, #4
 80023d0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	18d0      	adds	r0, r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	4619      	mov	r1, r3
 80023e0:	f007 fbc4 	bl	8009b6c <memcpy>
      offset += length_md5sum;
 80023e4:	69fa      	ldr	r2, [r7, #28]
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	4413      	add	r3, r2
 80023ea:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80023f2:	68f9      	ldr	r1, [r7, #12]
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	4413      	add	r3, r2
 80023fa:	b2ca      	uxtb	r2, r1
 80023fc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	0a19      	lsrs	r1, r3, #8
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3301      	adds	r3, #1
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	4413      	add	r3, r2
 800240a:	b2ca      	uxtb	r2, r1
 800240c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	0c19      	lsrs	r1, r3, #16
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3302      	adds	r3, #2
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	4413      	add	r3, r2
 800241a:	b2ca      	uxtb	r2, r1
 800241c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	0e19      	lsrs	r1, r3, #24
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	3303      	adds	r3, #3
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	4413      	add	r3, r2
 800242a:	b2ca      	uxtb	r2, r1
 800242c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3304      	adds	r3, #4
 8002432:	61fb      	str	r3, [r7, #28]
      return offset;
 8002434:	69fb      	ldr	r3, [r7, #28]
    }
 8002436:	4618      	mov	r0, r3
 8002438:	3720      	adds	r7, #32
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800243e:	b580      	push	{r7, lr}
 8002440:	b08a      	sub	sp, #40	@ 0x28
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
 8002446:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002448:	2300      	movs	r3, #0
 800244a:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	4413      	add	r3, r2
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	461a      	mov	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	889b      	ldrh	r3, [r3, #4]
 800245e:	b21a      	sxth	r2, r3
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	3301      	adds	r3, #1
 8002464:	6839      	ldr	r1, [r7, #0]
 8002466:	440b      	add	r3, r1
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	021b      	lsls	r3, r3, #8
 800246c:	b21b      	sxth	r3, r3
 800246e:	4313      	orrs	r3, r2
 8002470:	b21b      	sxth	r3, r3
 8002472:	b29a      	uxth	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	3302      	adds	r3, #2
 800247c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	441a      	add	r2, r3
 8002484:	f107 0314 	add.w	r3, r7, #20
 8002488:	4611      	mov	r1, r2
 800248a:	4618      	mov	r0, r3
 800248c:	f001 fc0f 	bl	8003cae <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	3304      	adds	r3, #4
 8002494:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	627b      	str	r3, [r7, #36]	@ 0x24
 800249a:	e00b      	b.n	80024b4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a0:	441a      	add	r2, r3
 80024a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a4:	3b01      	subs	r3, #1
 80024a6:	6839      	ldr	r1, [r7, #0]
 80024a8:	440b      	add	r3, r1
 80024aa:	7812      	ldrb	r2, [r2, #0]
 80024ac:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80024ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b0:	3301      	adds	r3, #1
 80024b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	4413      	add	r3, r2
 80024ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024bc:	429a      	cmp	r2, r3
 80024be:	d3ed      	bcc.n	800249c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	4413      	add	r3, r2
 80024c6:	3b01      	subs	r3, #1
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	4413      	add	r3, r2
 80024cc:	2200      	movs	r2, #0
 80024ce:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	441a      	add	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	4413      	add	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	441a      	add	r2, r3
 80024ea:	f107 0310 	add.w	r3, r7, #16
 80024ee:	4611      	mov	r1, r2
 80024f0:	4618      	mov	r0, r3
 80024f2:	f001 fbdc 	bl	8003cae <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	3304      	adds	r3, #4
 80024fa:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	623b      	str	r3, [r7, #32]
 8002500:	e00b      	b.n	800251a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	441a      	add	r2, r3
 8002508:	6a3b      	ldr	r3, [r7, #32]
 800250a:	3b01      	subs	r3, #1
 800250c:	6839      	ldr	r1, [r7, #0]
 800250e:	440b      	add	r3, r1
 8002510:	7812      	ldrb	r2, [r2, #0]
 8002512:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002514:	6a3b      	ldr	r3, [r7, #32]
 8002516:	3301      	adds	r3, #1
 8002518:	623b      	str	r3, [r7, #32]
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4413      	add	r3, r2
 8002520:	6a3a      	ldr	r2, [r7, #32]
 8002522:	429a      	cmp	r2, r3
 8002524:	d3ed      	bcc.n	8002502 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4413      	add	r3, r2
 800252c:	3b01      	subs	r3, #1
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	4413      	add	r3, r2
 8002532:	2200      	movs	r2, #0
 8002534:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	3b01      	subs	r3, #1
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	441a      	add	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	4413      	add	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	441a      	add	r2, r3
 8002550:	f107 030c 	add.w	r3, r7, #12
 8002554:	4611      	mov	r1, r2
 8002556:	4618      	mov	r0, r3
 8002558:	f001 fba9 	bl	8003cae <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	3304      	adds	r3, #4
 8002560:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	61fb      	str	r3, [r7, #28]
 8002566:	e00b      	b.n	8002580 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	441a      	add	r2, r3
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3b01      	subs	r3, #1
 8002572:	6839      	ldr	r1, [r7, #0]
 8002574:	440b      	add	r3, r1
 8002576:	7812      	ldrb	r2, [r2, #0]
 8002578:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	3301      	adds	r3, #1
 800257e:	61fb      	str	r3, [r7, #28]
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	4413      	add	r3, r2
 8002586:	69fa      	ldr	r2, [r7, #28]
 8002588:	429a      	cmp	r2, r3
 800258a:	d3ed      	bcc.n	8002568 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	4413      	add	r3, r2
 8002592:	3b01      	subs	r3, #1
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	4413      	add	r3, r2
 8002598:	2200      	movs	r2, #0
 800259a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	3b01      	subs	r3, #1
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	441a      	add	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	4413      	add	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80025b0:	2300      	movs	r3, #0
 80025b2:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	6839      	ldr	r1, [r7, #0]
 80025ba:	440a      	add	r2, r1
 80025bc:	7812      	ldrb	r2, [r2, #0]
 80025be:	4313      	orrs	r3, r2
 80025c0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	3301      	adds	r3, #1
 80025c8:	6839      	ldr	r1, [r7, #0]
 80025ca:	440b      	add	r3, r1
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	021b      	lsls	r3, r3, #8
 80025d0:	4313      	orrs	r3, r2
 80025d2:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	3302      	adds	r3, #2
 80025da:	6839      	ldr	r1, [r7, #0]
 80025dc:	440b      	add	r3, r1
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	041b      	lsls	r3, r3, #16
 80025e2:	4313      	orrs	r3, r2
 80025e4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	3303      	adds	r3, #3
 80025ec:	6839      	ldr	r1, [r7, #0]
 80025ee:	440b      	add	r3, r1
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	061b      	lsls	r3, r3, #24
 80025f4:	4313      	orrs	r3, r2
 80025f6:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80025f8:	68ba      	ldr	r2, [r7, #8]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	3304      	adds	r3, #4
 8002602:	61bb      	str	r3, [r7, #24]
     return offset;
 8002604:	69bb      	ldr	r3, [r7, #24]
    }
 8002606:	4618      	mov	r0, r3
 8002608:	3728      	adds	r7, #40	@ 0x28
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
	...

08002610 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	4b03      	ldr	r3, [pc, #12]	@ (8002628 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800261a:	4618      	mov	r0, r3
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	08009c7c 	.word	0x08009c7c

0800262c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	4b03      	ldr	r3, [pc, #12]	@ (8002644 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8002636:	4618      	mov	r0, r3
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	08009c98 	.word	0x08009c98

08002648 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff fd34 	bl	80020c0 <_ZN3ros3MsgC1Ev>
 8002658:	4a06      	ldr	r2, [pc, #24]	@ (8002674 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	601a      	str	r2, [r3, #0]
      level(0),
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	711a      	strb	r2, [r3, #4]
      msg("")
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a04      	ldr	r2, [pc, #16]	@ (8002678 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002668:	609a      	str	r2, [r3, #8]
    {
    }
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4618      	mov	r0, r3
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	0800a054 	.word	0x0800a054
 8002678:	08009c78 	.word	0x08009c78

0800267c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	4413      	add	r3, r2
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	7912      	ldrb	r2, [r2, #4]
 8002694:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	3301      	adds	r3, #1
 800269a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7fd fd91 	bl	80001c8 <strlen>
 80026a6:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	4413      	add	r3, r2
 80026ae:	68b9      	ldr	r1, [r7, #8]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f001 fadd 	bl	8003c70 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	3304      	adds	r3, #4
 80026ba:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	18d0      	adds	r0, r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	4619      	mov	r1, r3
 80026ca:	f007 fa4f 	bl	8009b6c <memcpy>
      offset += length_msg;
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	4413      	add	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]
      return offset;
 80026d6:	68fb      	ldr	r3, [r7, #12]
    }
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80026ea:	2300      	movs	r3, #0
 80026ec:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	4413      	add	r3, r2
 80026f4:	781a      	ldrb	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	3301      	adds	r3, #1
 80026fe:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	441a      	add	r2, r3
 8002706:	f107 030c 	add.w	r3, r7, #12
 800270a:	4611      	mov	r1, r2
 800270c:	4618      	mov	r0, r3
 800270e:	f001 face 	bl	8003cae <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	3304      	adds	r3, #4
 8002716:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	617b      	str	r3, [r7, #20]
 800271c:	e00b      	b.n	8002736 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	441a      	add	r2, r3
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	3b01      	subs	r3, #1
 8002728:	6839      	ldr	r1, [r7, #0]
 800272a:	440b      	add	r3, r1
 800272c:	7812      	ldrb	r2, [r2, #0]
 800272e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	3301      	adds	r3, #1
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4413      	add	r3, r2
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	429a      	cmp	r2, r3
 8002740:	d3ed      	bcc.n	800271e <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4413      	add	r3, r2
 8002748:	3b01      	subs	r3, #1
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	4413      	add	r3, r2
 800274e:	2200      	movs	r2, #0
 8002750:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	3b01      	subs	r3, #1
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	441a      	add	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4413      	add	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
     return offset;
 8002766:	693b      	ldr	r3, [r7, #16]
    }
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	4b03      	ldr	r3, [pc, #12]	@ (8002788 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800277a:	4618      	mov	r0, r3
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	08009cbc 	.word	0x08009cbc

0800278c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	4b03      	ldr	r3, [pc, #12]	@ (80027a4 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002796:	4618      	mov	r0, r3
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	08009cd0 	.word	0x08009cd0

080027a8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff fc84 	bl	80020c0 <_ZN3ros3MsgC1Ev>
 80027b8:	4a11      	ldr	r2, [pc, #68]	@ (8002800 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	605a      	str	r2, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	609a      	str	r2, [r3, #8]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	611a      	str	r2, [r3, #16]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	615a      	str	r2, [r3, #20]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	61da      	str	r2, [r3, #28]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	621a      	str	r2, [r3, #32]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4618      	mov	r0, r3
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	0800a03c 	.word	0x0800a03c

08002804 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002804:	b580      	push	{r7, lr}
 8002806:	b08a      	sub	sp, #40	@ 0x28
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800280e:	2300      	movs	r3, #0
 8002810:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6859      	ldr	r1, [r3, #4]
 8002816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	4413      	add	r3, r2
 800281c:	b2ca      	uxtb	r2, r1
 800281e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	0a19      	lsrs	r1, r3, #8
 8002826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002828:	3301      	adds	r3, #1
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	4413      	add	r3, r2
 800282e:	b2ca      	uxtb	r2, r1
 8002830:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	0c19      	lsrs	r1, r3, #16
 8002838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283a:	3302      	adds	r3, #2
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	4413      	add	r3, r2
 8002840:	b2ca      	uxtb	r2, r1
 8002842:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	0e19      	lsrs	r1, r3, #24
 800284a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284c:	3303      	adds	r3, #3
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	4413      	add	r3, r2
 8002852:	b2ca      	uxtb	r2, r1
 8002854:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002858:	3304      	adds	r3, #4
 800285a:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800285c:	2300      	movs	r3, #0
 800285e:	623b      	str	r3, [r7, #32]
 8002860:	e02a      	b.n	80028b8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002870:	6939      	ldr	r1, [r7, #16]
 8002872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	4413      	add	r3, r2
 8002878:	b2ca      	uxtb	r2, r1
 800287a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	0a19      	lsrs	r1, r3, #8
 8002880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002882:	3301      	adds	r3, #1
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	4413      	add	r3, r2
 8002888:	b2ca      	uxtb	r2, r1
 800288a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	0c19      	lsrs	r1, r3, #16
 8002890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002892:	3302      	adds	r3, #2
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	4413      	add	r3, r2
 8002898:	b2ca      	uxtb	r2, r1
 800289a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	0e19      	lsrs	r1, r3, #24
 80028a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a2:	3303      	adds	r3, #3
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	4413      	add	r3, r2
 80028a8:	b2ca      	uxtb	r2, r1
 80028aa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80028ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ae:	3304      	adds	r3, #4
 80028b0:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80028b2:	6a3b      	ldr	r3, [r7, #32]
 80028b4:	3301      	adds	r3, #1
 80028b6:	623b      	str	r3, [r7, #32]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	6a3a      	ldr	r2, [r7, #32]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d3cf      	bcc.n	8002862 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6919      	ldr	r1, [r3, #16]
 80028c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	4413      	add	r3, r2
 80028cc:	b2ca      	uxtb	r2, r1
 80028ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	0a19      	lsrs	r1, r3, #8
 80028d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d8:	3301      	adds	r3, #1
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	4413      	add	r3, r2
 80028de:	b2ca      	uxtb	r2, r1
 80028e0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	0c19      	lsrs	r1, r3, #16
 80028e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ea:	3302      	adds	r3, #2
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	4413      	add	r3, r2
 80028f0:	b2ca      	uxtb	r2, r1
 80028f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	0e19      	lsrs	r1, r3, #24
 80028fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fc:	3303      	adds	r3, #3
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	4413      	add	r3, r2
 8002902:	b2ca      	uxtb	r2, r1
 8002904:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002908:	3304      	adds	r3, #4
 800290a:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800290c:	2300      	movs	r3, #0
 800290e:	61fb      	str	r3, [r7, #28]
 8002910:	e02a      	b.n	8002968 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699a      	ldr	r2, [r3, #24]
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002920:	68f9      	ldr	r1, [r7, #12]
 8002922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	4413      	add	r3, r2
 8002928:	b2ca      	uxtb	r2, r1
 800292a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	0a19      	lsrs	r1, r3, #8
 8002930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002932:	3301      	adds	r3, #1
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	4413      	add	r3, r2
 8002938:	b2ca      	uxtb	r2, r1
 800293a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	0c19      	lsrs	r1, r3, #16
 8002940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002942:	3302      	adds	r3, #2
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	4413      	add	r3, r2
 8002948:	b2ca      	uxtb	r2, r1
 800294a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	0e19      	lsrs	r1, r3, #24
 8002950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002952:	3303      	adds	r3, #3
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	4413      	add	r3, r2
 8002958:	b2ca      	uxtb	r2, r1
 800295a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 800295c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295e:	3304      	adds	r3, #4
 8002960:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	3301      	adds	r3, #1
 8002966:	61fb      	str	r3, [r7, #28]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	69fa      	ldr	r2, [r7, #28]
 800296e:	429a      	cmp	r2, r3
 8002970:	d3cf      	bcc.n	8002912 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69d9      	ldr	r1, [r3, #28]
 8002976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	4413      	add	r3, r2
 800297c:	b2ca      	uxtb	r2, r1
 800297e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	69db      	ldr	r3, [r3, #28]
 8002984:	0a19      	lsrs	r1, r3, #8
 8002986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002988:	3301      	adds	r3, #1
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	4413      	add	r3, r2
 800298e:	b2ca      	uxtb	r2, r1
 8002990:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	0c19      	lsrs	r1, r3, #16
 8002998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299a:	3302      	adds	r3, #2
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	4413      	add	r3, r2
 80029a0:	b2ca      	uxtb	r2, r1
 80029a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	0e19      	lsrs	r1, r3, #24
 80029aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ac:	3303      	adds	r3, #3
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	4413      	add	r3, r2
 80029b2:	b2ca      	uxtb	r2, r1
 80029b4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80029b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b8:	3304      	adds	r3, #4
 80029ba:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80029bc:	2300      	movs	r3, #0
 80029be:	61bb      	str	r3, [r7, #24]
 80029c0:	e027      	b.n	8002a12 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4413      	add	r3, r2
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7fd fbfa 	bl	80001c8 <strlen>
 80029d4:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80029d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	4413      	add	r3, r2
 80029dc:	6979      	ldr	r1, [r7, #20]
 80029de:	4618      	mov	r0, r3
 80029e0:	f001 f946 	bl	8003c70 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80029e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e6:	3304      	adds	r3, #4
 80029e8:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80029ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	18d0      	adds	r0, r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	4619      	mov	r1, r3
 8002a00:	f007 f8b4 	bl	8009b6c <memcpy>
      offset += length_stringsi;
 8002a04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	4413      	add	r3, r2
 8002a0a:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	61bb      	str	r3, [r7, #24]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d3d2      	bcc.n	80029c2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3728      	adds	r7, #40	@ 0x28
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b08e      	sub	sp, #56	@ 0x38
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
 8002a2e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a30:	2300      	movs	r3, #0
 8002a32:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	4413      	add	r3, r2
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a40:	3301      	adds	r3, #1
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	4413      	add	r3, r2
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	021b      	lsls	r3, r3, #8
 8002a4a:	6a3a      	ldr	r2, [r7, #32]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a52:	3302      	adds	r3, #2
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	4413      	add	r3, r2
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	041b      	lsls	r3, r3, #16
 8002a5c:	6a3a      	ldr	r2, [r7, #32]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002a62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a64:	3303      	adds	r3, #3
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	4413      	add	r3, r2
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	061b      	lsls	r3, r3, #24
 8002a6e:	6a3a      	ldr	r2, [r7, #32]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a76:	3304      	adds	r3, #4
 8002a78:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	6a3a      	ldr	r2, [r7, #32]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d90a      	bls.n	8002a9a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68da      	ldr	r2, [r3, #12]
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4610      	mov	r0, r2
 8002a90:	f006 fff2 	bl	8009a78 <realloc>
 8002a94:	4602      	mov	r2, r0
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a3a      	ldr	r2, [r7, #32]
 8002a9e:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	633b      	str	r3, [r7, #48]	@ 0x30
 8002aa4:	e035      	b.n	8002b12 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002aae:	6839      	ldr	r1, [r7, #0]
 8002ab0:	440a      	add	r2, r1
 8002ab2:	7812      	ldrb	r2, [r2, #0]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002abc:	3301      	adds	r3, #1
 8002abe:	6839      	ldr	r1, [r7, #0]
 8002ac0:	440b      	add	r3, r1
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	021b      	lsls	r3, r3, #8
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ace:	3302      	adds	r3, #2
 8002ad0:	6839      	ldr	r1, [r7, #0]
 8002ad2:	440b      	add	r3, r1
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	041b      	lsls	r3, r3, #16
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ae0:	3303      	adds	r3, #3
 8002ae2:	6839      	ldr	r1, [r7, #0]
 8002ae4:	440b      	add	r3, r1
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	061b      	lsls	r3, r3, #24
 8002aea:	4313      	orrs	r3, r2
 8002aec:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002af4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002af6:	3304      	adds	r3, #4
 8002af8:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	3208      	adds	r2, #8
 8002b08:	6812      	ldr	r2, [r2, #0]
 8002b0a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b0e:	3301      	adds	r3, #1
 8002b10:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d3c4      	bcc.n	8002aa6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	4413      	add	r3, r2
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002b26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b28:	3301      	adds	r3, #1
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	021b      	lsls	r3, r3, #8
 8002b32:	69fa      	ldr	r2, [r7, #28]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b3a:	3302      	adds	r3, #2
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	4413      	add	r3, r2
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	041b      	lsls	r3, r3, #16
 8002b44:	69fa      	ldr	r2, [r7, #28]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002b4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b4c:	3303      	adds	r3, #3
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	4413      	add	r3, r2
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	061b      	lsls	r3, r3, #24
 8002b56:	69fa      	ldr	r2, [r7, #28]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b5e:	3304      	adds	r3, #4
 8002b60:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	69fa      	ldr	r2, [r7, #28]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d90a      	bls.n	8002b82 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	699a      	ldr	r2, [r3, #24]
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4619      	mov	r1, r3
 8002b76:	4610      	mov	r0, r2
 8002b78:	f006 ff7e 	bl	8009a78 <realloc>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69fa      	ldr	r2, [r7, #28]
 8002b86:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002b88:	2300      	movs	r3, #0
 8002b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b8c:	e035      	b.n	8002bfa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b96:	6839      	ldr	r1, [r7, #0]
 8002b98:	440a      	add	r2, r1
 8002b9a:	7812      	ldrb	r2, [r2, #0]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	6839      	ldr	r1, [r7, #0]
 8002ba8:	440b      	add	r3, r1
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	021b      	lsls	r3, r3, #8
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bb6:	3302      	adds	r3, #2
 8002bb8:	6839      	ldr	r1, [r7, #0]
 8002bba:	440b      	add	r3, r1
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	041b      	lsls	r3, r3, #16
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bc8:	3303      	adds	r3, #3
 8002bca:	6839      	ldr	r1, [r7, #0]
 8002bcc:	440b      	add	r3, r1
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	061b      	lsls	r3, r3, #24
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bde:	3304      	adds	r3, #4
 8002be0:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	699a      	ldr	r2, [r3, #24]
 8002be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	3214      	adds	r2, #20
 8002bf0:	6812      	ldr	r2, [r2, #0]
 8002bf2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d3c4      	bcc.n	8002b8e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002c04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	4413      	add	r3, r2
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c10:	3301      	adds	r3, #1
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	4413      	add	r3, r2
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	021b      	lsls	r3, r3, #8
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c22:	3302      	adds	r3, #2
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	4413      	add	r3, r2
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	041b      	lsls	r3, r3, #16
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c34:	3303      	adds	r3, #3
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	4413      	add	r3, r2
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	061b      	lsls	r3, r3, #24
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002c44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c46:	3304      	adds	r3, #4
 8002c48:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d90a      	bls.n	8002c6a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4610      	mov	r0, r2
 8002c60:	f006 ff0a 	bl	8009a78 <realloc>
 8002c64:	4602      	mov	r2, r0
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002c70:	2300      	movs	r3, #0
 8002c72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c74:	e03e      	b.n	8002cf4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	441a      	add	r2, r3
 8002c7c:	f107 030c 	add.w	r3, r7, #12
 8002c80:	4611      	mov	r1, r2
 8002c82:	4618      	mov	r0, r3
 8002c84:	f001 f813 	bl	8003cae <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c8a:	3304      	adds	r3, #4
 8002c8c:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002c8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c90:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c92:	e00b      	b.n	8002cac <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c98:	441a      	add	r2, r3
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	6839      	ldr	r1, [r7, #0]
 8002ca0:	440b      	add	r3, r1
 8002ca2:	7812      	ldrb	r2, [r2, #0]
 8002ca4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca8:	3301      	adds	r3, #1
 8002caa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d3ed      	bcc.n	8002c94 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002cb8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	441a      	add	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002cd4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	4413      	add	r3, r2
 8002cda:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4413      	add	r3, r2
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	3220      	adds	r2, #32
 8002cea:	6812      	ldr	r2, [r2, #0]
 8002cec:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	69db      	ldr	r3, [r3, #28]
 8002cf8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d3bb      	bcc.n	8002c76 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8002cfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8002d00:	4618      	mov	r0, r3
 8002d02:	3738      	adds	r7, #56	@ 0x38
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	4b03      	ldr	r3, [pc, #12]	@ (8002d20 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002d12:	4618      	mov	r0, r3
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	08009f18 	.word	0x08009f18

08002d24 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	4b03      	ldr	r3, [pc, #12]	@ (8002d3c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002d2e:	4618      	mov	r0, r3
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	08009cf4 	.word	0x08009cf4

08002d40 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
 8002d4c:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	611a      	str	r2, [r3, #16]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4618      	mov	r0, r3
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b082      	sub	sp, #8
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
 8002d76:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68d8      	ldr	r0, [r3, #12]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6891      	ldr	r1, [r2, #8]
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	4798      	blx	r3
 8002d8c:	4603      	mov	r3, r0
  };
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
  }
 8002da2:	4618      	mov	r0, r3
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
	...

08002db0 <_ZN8std_msgs5EmptyC1Ev>:

  class Empty : public ros::Msg
  {
    public:

    Empty()
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
    {
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff f980 	bl	80020c0 <_ZN3ros3MsgC1Ev>
 8002dc0:	4a03      	ldr	r2, [pc, #12]	@ (8002dd0 <_ZN8std_msgs5EmptyC1Ev+0x20>)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	601a      	str	r2, [r3, #0]
    }
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	08009ff8 	.word	0x08009ff8

08002dd4 <_ZNK8std_msgs5Empty9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002dde:	2300      	movs	r3, #0
 8002de0:	60fb      	str	r3, [r7, #12]
      return offset;
 8002de2:	68fb      	ldr	r3, [r7, #12]
    }
 8002de4:	4618      	mov	r0, r3
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <_ZN8std_msgs5Empty11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60fb      	str	r3, [r7, #12]
     return offset;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
    }
 8002e00:	4618      	mov	r0, r3
 8002e02:	3714      	adds	r7, #20
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <_ZN8std_msgs5Empty7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Empty"; };
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	4b03      	ldr	r3, [pc, #12]	@ (8002e24 <_ZN8std_msgs5Empty7getTypeEv+0x18>)
 8002e16:	4618      	mov	r0, r3
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	08009d18 	.word	0x08009d18

08002e28 <_ZN8std_msgs5Empty6getMD5Ev>:
    virtual const char * getMD5() override { return "d41d8cd98f00b204e9800998ecf8427e"; };
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	4b03      	ldr	r3, [pc, #12]	@ (8002e40 <_ZN8std_msgs5Empty6getMD5Ev+0x18>)
 8002e32:	4618      	mov	r0, r3
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	08009d28 	.word	0x08009d28

08002e44 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
      data("")
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff f936 	bl	80020c0 <_ZN3ros3MsgC1Ev>
 8002e54:	4a05      	ldr	r2, [pc, #20]	@ (8002e6c <_ZN8std_msgs6StringC1Ev+0x28>)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a04      	ldr	r2, [pc, #16]	@ (8002e70 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8002e5e:	605a      	str	r2, [r3, #4]
    {
    }
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4618      	mov	r0, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	08009fe0 	.word	0x08009fe0
 8002e70:	08009c78 	.word	0x08009c78

08002e74 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7fd f99e 	bl	80001c8 <strlen>
 8002e8c:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	4413      	add	r3, r2
 8002e94:	68b9      	ldr	r1, [r7, #8]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 feea 	bl	8003c70 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	3304      	adds	r3, #4
 8002ea0:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	18d0      	adds	r0, r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	4619      	mov	r1, r3
 8002eb0:	f006 fe5c 	bl	8009b6c <memcpy>
      offset += length_data;
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	4413      	add	r3, r2
 8002eba:	60fb      	str	r3, [r7, #12]
      return offset;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
    }
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b086      	sub	sp, #24
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
 8002ece:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	441a      	add	r2, r3
 8002eda:	f107 030c 	add.w	r3, r7, #12
 8002ede:	4611      	mov	r1, r2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f000 fee4 	bl	8003cae <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	3304      	adds	r3, #4
 8002eea:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	617b      	str	r3, [r7, #20]
 8002ef0:	e00b      	b.n	8002f0a <_ZN8std_msgs6String11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	441a      	add	r2, r3
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	6839      	ldr	r1, [r7, #0]
 8002efe:	440b      	add	r3, r1
 8002f00:	7812      	ldrb	r2, [r2, #0]
 8002f02:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	3301      	adds	r3, #1
 8002f08:	617b      	str	r3, [r7, #20]
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4413      	add	r3, r2
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d3ed      	bcc.n	8002ef2 <_ZN8std_msgs6String11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_data-1]=0;
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	4413      	add	r3, r2
 8002f22:	2200      	movs	r2, #0
 8002f24:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	441a      	add	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4413      	add	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]
     return offset;
 8002f3a:	693b      	ldr	r3, [r7, #16]
    }
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	4b03      	ldr	r3, [pc, #12]	@ (8002f5c <_ZN8std_msgs6String7getTypeEv+0x18>)
 8002f4e:	4618      	mov	r0, r3
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	08009d4c 	.word	0x08009d4c

08002f60 <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	4b03      	ldr	r3, [pc, #12]	@ (8002f78 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	08009d5c 	.word	0x08009d5c

08002f7c <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff f89a 	bl	80020c0 <_ZN3ros3MsgC1Ev>
 8002f8c:	4a09      	ldr	r2, [pc, #36]	@ (8002fb4 <_ZN8std_msgs6HeaderC1Ev+0x38>)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	601a      	str	r2, [r3, #0]
      seq(0),
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	605a      	str	r2, [r3, #4]
      stamp(),
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3308      	adds	r3, #8
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff f87d 	bl	800209c <_ZN3ros4TimeC1Ev>
      frame_id("")
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a04      	ldr	r2, [pc, #16]	@ (8002fb8 <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 8002fa6:	611a      	str	r2, [r3, #16]
    {
    }
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4618      	mov	r0, r3
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	08009fc8 	.word	0x08009fc8
 8002fb8:	08009c78 	.word	0x08009c78

08002fbc <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6859      	ldr	r1, [r3, #4]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	b2ca      	uxtb	r2, r1
 8002fd6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	0a19      	lsrs	r1, r3, #8
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	b2ca      	uxtb	r2, r1
 8002fe8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	0c19      	lsrs	r1, r3, #16
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	3302      	adds	r3, #2
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	b2ca      	uxtb	r2, r1
 8002ffa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	0e19      	lsrs	r1, r3, #24
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	3303      	adds	r3, #3
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	4413      	add	r3, r2
 800300a:	b2ca      	uxtb	r2, r1
 800300c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	3304      	adds	r3, #4
 8003012:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6899      	ldr	r1, [r3, #8]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	4413      	add	r3, r2
 800301e:	b2ca      	uxtb	r2, r1
 8003020:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	0a19      	lsrs	r1, r3, #8
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	3301      	adds	r3, #1
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	4413      	add	r3, r2
 8003030:	b2ca      	uxtb	r2, r1
 8003032:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	0c19      	lsrs	r1, r3, #16
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	3302      	adds	r3, #2
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	4413      	add	r3, r2
 8003042:	b2ca      	uxtb	r2, r1
 8003044:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	0e19      	lsrs	r1, r3, #24
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	3303      	adds	r3, #3
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	4413      	add	r3, r2
 8003054:	b2ca      	uxtb	r2, r1
 8003056:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	3304      	adds	r3, #4
 800305c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68d9      	ldr	r1, [r3, #12]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	4413      	add	r3, r2
 8003068:	b2ca      	uxtb	r2, r1
 800306a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	0a19      	lsrs	r1, r3, #8
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	3301      	adds	r3, #1
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	4413      	add	r3, r2
 800307a:	b2ca      	uxtb	r2, r1
 800307c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	0c19      	lsrs	r1, r3, #16
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	3302      	adds	r3, #2
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	4413      	add	r3, r2
 800308c:	b2ca      	uxtb	r2, r1
 800308e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	0e19      	lsrs	r1, r3, #24
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	3303      	adds	r3, #3
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	4413      	add	r3, r2
 800309e:	b2ca      	uxtb	r2, r1
 80030a0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	3304      	adds	r3, #4
 80030a6:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7fd f88b 	bl	80001c8 <strlen>
 80030b2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	4413      	add	r3, r2
 80030ba:	68b9      	ldr	r1, [r7, #8]
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 fdd7 	bl	8003c70 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	3304      	adds	r3, #4
 80030c6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	18d0      	adds	r0, r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	4619      	mov	r1, r3
 80030d6:	f006 fd49 	bl	8009b6c <memcpy>
      offset += length_frame_id;
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	4413      	add	r3, r2
 80030e0:	60fb      	str	r3, [r7, #12]
      return offset;
 80030e2:	68fb      	ldr	r3, [r7, #12]
    }
 80030e4:	4618      	mov	r0, r3
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80030f6:	2300      	movs	r3, #0
 80030f8:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	4413      	add	r3, r2
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	461a      	mov	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	3301      	adds	r3, #1
 8003110:	6839      	ldr	r1, [r7, #0]
 8003112:	440b      	add	r3, r1
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	021b      	lsls	r3, r3, #8
 8003118:	431a      	orrs	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	3302      	adds	r3, #2
 8003126:	6839      	ldr	r1, [r7, #0]
 8003128:	440b      	add	r3, r1
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	041b      	lsls	r3, r3, #16
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	3303      	adds	r3, #3
 800313c:	6839      	ldr	r1, [r7, #0]
 800313e:	440b      	add	r3, r1
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	061b      	lsls	r3, r3, #24
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	3304      	adds	r3, #4
 800314e:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	4413      	add	r3, r2
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	461a      	mov	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689a      	ldr	r2, [r3, #8]
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	3301      	adds	r3, #1
 8003166:	6839      	ldr	r1, [r7, #0]
 8003168:	440b      	add	r3, r1
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	021b      	lsls	r3, r3, #8
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	3302      	adds	r3, #2
 800317c:	6839      	ldr	r1, [r7, #0]
 800317e:	440b      	add	r3, r1
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	041b      	lsls	r3, r3, #16
 8003184:	431a      	orrs	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689a      	ldr	r2, [r3, #8]
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	3303      	adds	r3, #3
 8003192:	6839      	ldr	r1, [r7, #0]
 8003194:	440b      	add	r3, r1
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	061b      	lsls	r3, r3, #24
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	3304      	adds	r3, #4
 80031a4:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	4413      	add	r3, r2
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	461a      	mov	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68da      	ldr	r2, [r3, #12]
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	3301      	adds	r3, #1
 80031bc:	6839      	ldr	r1, [r7, #0]
 80031be:	440b      	add	r3, r1
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	021b      	lsls	r3, r3, #8
 80031c4:	431a      	orrs	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	3302      	adds	r3, #2
 80031d2:	6839      	ldr	r1, [r7, #0]
 80031d4:	440b      	add	r3, r1
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	041b      	lsls	r3, r3, #16
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	3303      	adds	r3, #3
 80031e8:	6839      	ldr	r1, [r7, #0]
 80031ea:	440b      	add	r3, r1
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	061b      	lsls	r3, r3, #24
 80031f0:	431a      	orrs	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	3304      	adds	r3, #4
 80031fa:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	441a      	add	r2, r3
 8003202:	f107 030c 	add.w	r3, r7, #12
 8003206:	4611      	mov	r1, r2
 8003208:	4618      	mov	r0, r3
 800320a:	f000 fd50 	bl	8003cae <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	3304      	adds	r3, #4
 8003212:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	617b      	str	r3, [r7, #20]
 8003218:	e00b      	b.n	8003232 <_ZN8std_msgs6Header11deserializeEPh+0x146>
          inbuffer[k-1]=inbuffer[k];
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	441a      	add	r2, r3
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	3b01      	subs	r3, #1
 8003224:	6839      	ldr	r1, [r7, #0]
 8003226:	440b      	add	r3, r1
 8003228:	7812      	ldrb	r2, [r2, #0]
 800322a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	3301      	adds	r3, #1
 8003230:	617b      	str	r3, [r7, #20]
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4413      	add	r3, r2
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	429a      	cmp	r2, r3
 800323c:	d3ed      	bcc.n	800321a <_ZN8std_msgs6Header11deserializeEPh+0x12e>
      }
      inbuffer[offset+length_frame_id-1]=0;
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4413      	add	r3, r2
 8003244:	3b01      	subs	r3, #1
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	4413      	add	r3, r2
 800324a:	2200      	movs	r2, #0
 800324c:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	3b01      	subs	r3, #1
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	441a      	add	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4413      	add	r3, r2
 8003260:	613b      	str	r3, [r7, #16]
     return offset;
 8003262:	693b      	ldr	r3, [r7, #16]
    }
 8003264:	4618      	mov	r0, r3
 8003266:	3718      	adds	r7, #24
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <_ZN8std_msgs6Header7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Header"; };
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	4b03      	ldr	r3, [pc, #12]	@ (8003284 <_ZN8std_msgs6Header7getTypeEv+0x18>)
 8003276:	4618      	mov	r0, r3
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	08009d80 	.word	0x08009d80

08003288 <_ZN8std_msgs6Header6getMD5Ev>:
    virtual const char * getMD5() override { return "2176decaecbce78abc3b96ef049fabed"; };
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	4b03      	ldr	r3, [pc, #12]	@ (80032a0 <_ZN8std_msgs6Header6getMD5Ev+0x18>)
 8003292:	4618      	mov	r0, r3
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	08009d90 	.word	0x08009d90

080032a4 <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef float _z_type;
      _z_type z;
      typedef float _w_type;
      _w_type w;

    Quaternion():
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fe ff06 	bl	80020c0 <_ZN3ros3MsgC1Ev>
 80032b4:	4a0b      	ldr	r2, [pc, #44]	@ (80032e4 <_ZN13geometry_msgs10QuaternionC1Ev+0x40>)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	601a      	str	r2, [r3, #0]
      x(0),
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	605a      	str	r2, [r3, #4]
      y(0),
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	609a      	str	r2, [r3, #8]
      z(0),
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	60da      	str	r2, [r3, #12]
      w(0)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f04f 0200 	mov.w	r2, #0
 80032d8:	611a      	str	r2, [r3, #16]
    {
    }
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4618      	mov	r0, r3
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	08009fb0 	.word	0x08009fb0

080032e8 <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80032f2:	2300      	movs	r3, #0
 80032f4:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	441a      	add	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8003302:	eeb0 0a67 	vmov.f32	s0, s15
 8003306:	4610      	mov	r0, r2
 8003308:	f7fe fd91 	bl	8001e2e <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800330c:	4602      	mov	r2, r0
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	4413      	add	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	441a      	add	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003320:	eeb0 0a67 	vmov.f32	s0, s15
 8003324:	4610      	mov	r0, r2
 8003326:	f7fe fd82 	bl	8001e2e <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800332a:	4602      	mov	r2, r0
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4413      	add	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	441a      	add	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	edd3 7a03 	vldr	s15, [r3, #12]
 800333e:	eeb0 0a67 	vmov.f32	s0, s15
 8003342:	4610      	mov	r0, r2
 8003344:	f7fe fd73 	bl	8001e2e <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003348:	4602      	mov	r2, r0
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	4413      	add	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->w);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	441a      	add	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	edd3 7a04 	vldr	s15, [r3, #16]
 800335c:	eeb0 0a67 	vmov.f32	s0, s15
 8003360:	4610      	mov	r0, r2
 8003362:	f7fe fd64 	bl	8001e2e <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003366:	4602      	mov	r2, r0
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4413      	add	r3, r2
 800336c:	60fb      	str	r3, [r7, #12]
      return offset;
 800336e:	68fb      	ldr	r3, [r7, #12]
    }
 8003370:	4618      	mov	r0, r3
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003382:	2300      	movs	r3, #0
 8003384:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	441a      	add	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3304      	adds	r3, #4
 8003390:	4619      	mov	r1, r3
 8003392:	4610      	mov	r0, r2
 8003394:	f7fe fde7 	bl	8001f66 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003398:	4602      	mov	r2, r0
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4413      	add	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	441a      	add	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	3308      	adds	r3, #8
 80033aa:	4619      	mov	r1, r3
 80033ac:	4610      	mov	r0, r2
 80033ae:	f7fe fdda 	bl	8001f66 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80033b2:	4602      	mov	r2, r0
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4413      	add	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	441a      	add	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	330c      	adds	r3, #12
 80033c4:	4619      	mov	r1, r3
 80033c6:	4610      	mov	r0, r2
 80033c8:	f7fe fdcd 	bl	8001f66 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80033cc:	4602      	mov	r2, r0
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	4413      	add	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->w));
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	441a      	add	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	3310      	adds	r3, #16
 80033de:	4619      	mov	r1, r3
 80033e0:	4610      	mov	r0, r2
 80033e2:	f7fe fdc0 	bl	8001f66 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80033e6:	4602      	mov	r2, r0
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4413      	add	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]
     return offset;
 80033ee:	68fb      	ldr	r3, [r7, #12]
    }
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Quaternion"; };
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	4b03      	ldr	r3, [pc, #12]	@ (8003410 <_ZN13geometry_msgs10Quaternion7getTypeEv+0x18>)
 8003402:	4618      	mov	r0, r3
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	08009db4 	.word	0x08009db4

08003414 <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    virtual const char * getMD5() override { return "a779879fadf0160734f906b8c19c7004"; };
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	4b03      	ldr	r3, [pc, #12]	@ (800342c <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x18>)
 800341e:	4618      	mov	r0, r3
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	08009dd0 	.word	0x08009dd0

08003430 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef float _y_type;
      _y_type y;
      typedef float _z_type;
      _z_type z;

    Vector3():
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4618      	mov	r0, r3
 800343c:	f7fe fe40 	bl	80020c0 <_ZN3ros3MsgC1Ev>
 8003440:	4a09      	ldr	r2, [pc, #36]	@ (8003468 <_ZN13geometry_msgs7Vector3C1Ev+0x38>)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	601a      	str	r2, [r3, #0]
      x(0),
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	605a      	str	r2, [r3, #4]
      y(0),
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f04f 0200 	mov.w	r2, #0
 8003454:	609a      	str	r2, [r3, #8]
      z(0)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f04f 0200 	mov.w	r2, #0
 800345c:	60da      	str	r2, [r3, #12]
    {
    }
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	08009f98 	.word	0x08009f98

0800346c <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003476:	2300      	movs	r3, #0
 8003478:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	441a      	add	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	edd3 7a01 	vldr	s15, [r3, #4]
 8003486:	eeb0 0a67 	vmov.f32	s0, s15
 800348a:	4610      	mov	r0, r2
 800348c:	f7fe fccf 	bl	8001e2e <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003490:	4602      	mov	r2, r0
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	4413      	add	r3, r2
 8003496:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	441a      	add	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80034a4:	eeb0 0a67 	vmov.f32	s0, s15
 80034a8:	4610      	mov	r0, r2
 80034aa:	f7fe fcc0 	bl	8001e2e <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80034ae:	4602      	mov	r2, r0
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4413      	add	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	441a      	add	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	edd3 7a03 	vldr	s15, [r3, #12]
 80034c2:	eeb0 0a67 	vmov.f32	s0, s15
 80034c6:	4610      	mov	r0, r2
 80034c8:	f7fe fcb1 	bl	8001e2e <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80034cc:	4602      	mov	r2, r0
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	4413      	add	r3, r2
 80034d2:	60fb      	str	r3, [r7, #12]
      return offset;
 80034d4:	68fb      	ldr	r3, [r7, #12]
    }
 80034d6:	4618      	mov	r0, r3
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80034de:	b580      	push	{r7, lr}
 80034e0:	b084      	sub	sp, #16
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
 80034e6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80034e8:	2300      	movs	r3, #0
 80034ea:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	441a      	add	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	3304      	adds	r3, #4
 80034f6:	4619      	mov	r1, r3
 80034f8:	4610      	mov	r0, r2
 80034fa:	f7fe fd34 	bl	8001f66 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80034fe:	4602      	mov	r2, r0
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4413      	add	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	441a      	add	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3308      	adds	r3, #8
 8003510:	4619      	mov	r1, r3
 8003512:	4610      	mov	r0, r2
 8003514:	f7fe fd27 	bl	8001f66 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003518:	4602      	mov	r2, r0
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	4413      	add	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	441a      	add	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	330c      	adds	r3, #12
 800352a:	4619      	mov	r1, r3
 800352c:	4610      	mov	r0, r2
 800352e:	f7fe fd1a 	bl	8001f66 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003532:	4602      	mov	r2, r0
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4413      	add	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]
     return offset;
 800353a:	68fb      	ldr	r3, [r7, #12]
    }
 800353c:	4618      	mov	r0, r3
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	4b03      	ldr	r3, [pc, #12]	@ (800355c <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 800354e:	4618      	mov	r0, r3
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	08009df4 	.word	0x08009df4

08003560 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	4b03      	ldr	r3, [pc, #12]	@ (8003578 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 800356a:	4618      	mov	r0, r3
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	08009e0c 	.word	0x08009e0c

0800357c <_ZN11sensor_msgs3ImuC1Ev>:
      float angular_velocity_covariance[9];
      typedef geometry_msgs::Vector3 _linear_acceleration_type;
      _linear_acceleration_type linear_acceleration;
      float linear_acceleration_covariance[9];

    Imu():
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
      orientation(),
      orientation_covariance(),
      angular_velocity(),
      angular_velocity_covariance(),
      linear_acceleration(),
      linear_acceleration_covariance()
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4618      	mov	r0, r3
 8003588:	f7fe fd9a 	bl	80020c0 <_ZN3ros3MsgC1Ev>
 800358c:	4a1f      	ldr	r2, [pc, #124]	@ (800360c <_ZN11sensor_msgs3ImuC1Ev+0x90>)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	601a      	str	r2, [r3, #0]
      header(),
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	3304      	adds	r3, #4
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff fcf0 	bl	8002f7c <_ZN8std_msgs6HeaderC1Ev>
      orientation(),
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3318      	adds	r3, #24
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff fe7f 	bl	80032a4 <_ZN13geometry_msgs10QuaternionC1Ev>
      orientation_covariance(),
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 80035ac:	2308      	movs	r3, #8
 80035ae:	e004      	b.n	80035ba <_ZN11sensor_msgs3ImuC1Ev+0x3e>
 80035b0:	f04f 0100 	mov.w	r1, #0
 80035b4:	6011      	str	r1, [r2, #0]
 80035b6:	3b01      	subs	r3, #1
 80035b8:	3204      	adds	r2, #4
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	daf8      	bge.n	80035b0 <_ZN11sensor_msgs3ImuC1Ev+0x34>
      angular_velocity(),
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	3350      	adds	r3, #80	@ 0x50
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7ff ff34 	bl	8003430 <_ZN13geometry_msgs7Vector3C1Ev>
      angular_velocity_covariance(),
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 80035ce:	2308      	movs	r3, #8
 80035d0:	e004      	b.n	80035dc <_ZN11sensor_msgs3ImuC1Ev+0x60>
 80035d2:	f04f 0100 	mov.w	r1, #0
 80035d6:	6011      	str	r1, [r2, #0]
 80035d8:	3b01      	subs	r3, #1
 80035da:	3204      	adds	r2, #4
 80035dc:	2b00      	cmp	r3, #0
 80035de:	daf8      	bge.n	80035d2 <_ZN11sensor_msgs3ImuC1Ev+0x56>
      linear_acceleration(),
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3384      	adds	r3, #132	@ 0x84
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff ff23 	bl	8003430 <_ZN13geometry_msgs7Vector3C1Ev>
      linear_acceleration_covariance()
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f103 0294 	add.w	r2, r3, #148	@ 0x94
 80035f0:	2308      	movs	r3, #8
 80035f2:	e004      	b.n	80035fe <_ZN11sensor_msgs3ImuC1Ev+0x82>
 80035f4:	f04f 0100 	mov.w	r1, #0
 80035f8:	6011      	str	r1, [r2, #0]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	3204      	adds	r2, #4
 80035fe:	2b00      	cmp	r3, #0
 8003600:	daf8      	bge.n	80035f4 <_ZN11sensor_msgs3ImuC1Ev+0x78>
    {
    }
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4618      	mov	r0, r3
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	08009f80 	.word	0x08009f80

08003610 <_ZNK11sensor_msgs3Imu9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800361a:	2300      	movs	r3, #0
 800361c:	617b      	str	r3, [r7, #20]
      offset += this->header.serialize(outbuffer + offset);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	1d18      	adds	r0, r3, #4
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	4413      	add	r3, r2
 8003628:	4619      	mov	r1, r3
 800362a:	f7ff fcc7 	bl	8002fbc <_ZNK8std_msgs6Header9serializeEPh>
 800362e:	4602      	mov	r2, r0
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	4413      	add	r3, r2
 8003634:	617b      	str	r3, [r7, #20]
      offset += this->orientation.serialize(outbuffer + offset);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f103 0018 	add.w	r0, r3, #24
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	4413      	add	r3, r2
 8003642:	4619      	mov	r1, r3
 8003644:	f7ff fe50 	bl	80032e8 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8003648:	4602      	mov	r2, r0
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	4413      	add	r3, r2
 800364e:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 8003650:	2300      	movs	r3, #0
 8003652:	613b      	str	r3, [r7, #16]
 8003654:	e016      	b.n	8003684 <_ZNK11sensor_msgs3Imu9serializeEPh+0x74>
      offset += serializeAvrFloat64(outbuffer + offset, this->orientation_covariance[i]);
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	18d1      	adds	r1, r2, r3
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	330a      	adds	r3, #10
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	3304      	adds	r3, #4
 8003668:	edd3 7a00 	vldr	s15, [r3]
 800366c:	eeb0 0a67 	vmov.f32	s0, s15
 8003670:	4608      	mov	r0, r1
 8003672:	f7fe fbdc 	bl	8001e2e <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003676:	4602      	mov	r2, r0
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	4413      	add	r3, r2
 800367c:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	3301      	adds	r3, #1
 8003682:	613b      	str	r3, [r7, #16]
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	2b08      	cmp	r3, #8
 8003688:	d9e5      	bls.n	8003656 <_ZNK11sensor_msgs3Imu9serializeEPh+0x46>
      }
      offset += this->angular_velocity.serialize(outbuffer + offset);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	4413      	add	r3, r2
 8003696:	4619      	mov	r1, r3
 8003698:	f7ff fee8 	bl	800346c <_ZNK13geometry_msgs7Vector39serializeEPh>
 800369c:	4602      	mov	r2, r0
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	4413      	add	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 80036a4:	2300      	movs	r3, #0
 80036a6:	60fb      	str	r3, [r7, #12]
 80036a8:	e015      	b.n	80036d6 <_ZNK11sensor_msgs3Imu9serializeEPh+0xc6>
      offset += serializeAvrFloat64(outbuffer + offset, this->angular_velocity_covariance[i]);
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	18d1      	adds	r1, r2, r3
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	3318      	adds	r3, #24
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	edd3 7a00 	vldr	s15, [r3]
 80036be:	eeb0 0a67 	vmov.f32	s0, s15
 80036c2:	4608      	mov	r0, r1
 80036c4:	f7fe fbb3 	bl	8001e2e <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80036c8:	4602      	mov	r2, r0
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	4413      	add	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	3301      	adds	r3, #1
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2b08      	cmp	r3, #8
 80036da:	d9e6      	bls.n	80036aa <_ZNK11sensor_msgs3Imu9serializeEPh+0x9a>
      }
      offset += this->linear_acceleration.serialize(outbuffer + offset);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f103 0084 	add.w	r0, r3, #132	@ 0x84
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	4413      	add	r3, r2
 80036e8:	4619      	mov	r1, r3
 80036ea:	f7ff febf 	bl	800346c <_ZNK13geometry_msgs7Vector39serializeEPh>
 80036ee:	4602      	mov	r2, r0
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	4413      	add	r3, r2
 80036f4:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 80036f6:	2300      	movs	r3, #0
 80036f8:	60bb      	str	r3, [r7, #8]
 80036fa:	e016      	b.n	800372a <_ZNK11sensor_msgs3Imu9serializeEPh+0x11a>
      offset += serializeAvrFloat64(outbuffer + offset, this->linear_acceleration_covariance[i]);
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	18d1      	adds	r1, r2, r3
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	3324      	adds	r3, #36	@ 0x24
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4413      	add	r3, r2
 800370c:	3304      	adds	r3, #4
 800370e:	edd3 7a00 	vldr	s15, [r3]
 8003712:	eeb0 0a67 	vmov.f32	s0, s15
 8003716:	4608      	mov	r0, r1
 8003718:	f7fe fb89 	bl	8001e2e <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800371c:	4602      	mov	r2, r0
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	4413      	add	r3, r2
 8003722:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	3301      	adds	r3, #1
 8003728:	60bb      	str	r3, [r7, #8]
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2b08      	cmp	r3, #8
 800372e:	d9e5      	bls.n	80036fc <_ZNK11sensor_msgs3Imu9serializeEPh+0xec>
      }
      return offset;
 8003730:	697b      	ldr	r3, [r7, #20]
    }
 8003732:	4618      	mov	r0, r3
 8003734:	3718      	adds	r7, #24
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <_ZN11sensor_msgs3Imu11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800373a:	b580      	push	{r7, lr}
 800373c:	b086      	sub	sp, #24
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
 8003742:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003744:	2300      	movs	r3, #0
 8003746:	617b      	str	r3, [r7, #20]
      offset += this->header.deserialize(inbuffer + offset);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	1d18      	adds	r0, r3, #4
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	4413      	add	r3, r2
 8003752:	4619      	mov	r1, r3
 8003754:	f7ff fcca 	bl	80030ec <_ZN8std_msgs6Header11deserializeEPh>
 8003758:	4602      	mov	r2, r0
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	4413      	add	r3, r2
 800375e:	617b      	str	r3, [r7, #20]
      offset += this->orientation.deserialize(inbuffer + offset);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f103 0018 	add.w	r0, r3, #24
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	4413      	add	r3, r2
 800376c:	4619      	mov	r1, r3
 800376e:	f7ff fe03 	bl	8003378 <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8003772:	4602      	mov	r2, r0
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	4413      	add	r3, r2
 8003778:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 800377a:	2300      	movs	r3, #0
 800377c:	613b      	str	r3, [r7, #16]
 800377e:	e012      	b.n	80037a6 <_ZN11sensor_msgs3Imu11deserializeEPh+0x6c>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->orientation_covariance[i]));
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	18d0      	adds	r0, r2, r3
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	330a      	adds	r3, #10
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	4413      	add	r3, r2
 8003790:	3304      	adds	r3, #4
 8003792:	4619      	mov	r1, r3
 8003794:	f7fe fbe7 	bl	8001f66 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003798:	4602      	mov	r2, r0
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	4413      	add	r3, r2
 800379e:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	3301      	adds	r3, #1
 80037a4:	613b      	str	r3, [r7, #16]
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	d9e9      	bls.n	8003780 <_ZN11sensor_msgs3Imu11deserializeEPh+0x46>
      }
      offset += this->angular_velocity.deserialize(inbuffer + offset);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	4413      	add	r3, r2
 80037b8:	4619      	mov	r1, r3
 80037ba:	f7ff fe90 	bl	80034de <_ZN13geometry_msgs7Vector311deserializeEPh>
 80037be:	4602      	mov	r2, r0
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	4413      	add	r3, r2
 80037c4:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 80037c6:	2300      	movs	r3, #0
 80037c8:	60fb      	str	r3, [r7, #12]
 80037ca:	e011      	b.n	80037f0 <_ZN11sensor_msgs3Imu11deserializeEPh+0xb6>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->angular_velocity_covariance[i]));
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	18d0      	adds	r0, r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	3318      	adds	r3, #24
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	4413      	add	r3, r2
 80037dc:	4619      	mov	r1, r3
 80037de:	f7fe fbc2 	bl	8001f66 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80037e2:	4602      	mov	r2, r0
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	4413      	add	r3, r2
 80037e8:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	3301      	adds	r3, #1
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2b08      	cmp	r3, #8
 80037f4:	d9ea      	bls.n	80037cc <_ZN11sensor_msgs3Imu11deserializeEPh+0x92>
      }
      offset += this->linear_acceleration.deserialize(inbuffer + offset);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f103 0084 	add.w	r0, r3, #132	@ 0x84
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	4413      	add	r3, r2
 8003802:	4619      	mov	r1, r3
 8003804:	f7ff fe6b 	bl	80034de <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003808:	4602      	mov	r2, r0
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	4413      	add	r3, r2
 800380e:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 8003810:	2300      	movs	r3, #0
 8003812:	60bb      	str	r3, [r7, #8]
 8003814:	e012      	b.n	800383c <_ZN11sensor_msgs3Imu11deserializeEPh+0x102>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->linear_acceleration_covariance[i]));
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	18d0      	adds	r0, r2, r3
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	3324      	adds	r3, #36	@ 0x24
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	4413      	add	r3, r2
 8003826:	3304      	adds	r3, #4
 8003828:	4619      	mov	r1, r3
 800382a:	f7fe fb9c 	bl	8001f66 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800382e:	4602      	mov	r2, r0
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	4413      	add	r3, r2
 8003834:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	3301      	adds	r3, #1
 800383a:	60bb      	str	r3, [r7, #8]
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2b08      	cmp	r3, #8
 8003840:	d9e9      	bls.n	8003816 <_ZN11sensor_msgs3Imu11deserializeEPh+0xdc>
      }
     return offset;
 8003842:	697b      	ldr	r3, [r7, #20]
    }
 8003844:	4618      	mov	r0, r3
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <_ZN11sensor_msgs3Imu7getTypeEv>:

    virtual const char * getType() override { return "sensor_msgs/Imu"; };
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	4b03      	ldr	r3, [pc, #12]	@ (8003864 <_ZN11sensor_msgs3Imu7getTypeEv+0x18>)
 8003856:	4618      	mov	r0, r3
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	08009e30 	.word	0x08009e30

08003868 <_ZN11sensor_msgs3Imu6getMD5Ev>:
    virtual const char * getMD5() override { return "6a62c6daae103f4ff57a132d6f95cec2"; };
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	4b03      	ldr	r3, [pc, #12]	@ (8003880 <_ZN11sensor_msgs3Imu6getMD5Ev+0x18>)
 8003872:	4618      	mov	r0, r3
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	08009e40 	.word	0x08009e40

08003884 <_ZN11sensor_msgs13MagneticFieldC1Ev>:
      _header_type header;
      typedef geometry_msgs::Vector3 _magnetic_field_type;
      _magnetic_field_type magnetic_field;
      float magnetic_field_covariance[9];

    MagneticField():
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
      header(),
      magnetic_field(),
      magnetic_field_covariance()
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4618      	mov	r0, r3
 8003890:	f7fe fc16 	bl	80020c0 <_ZN3ros3MsgC1Ev>
 8003894:	4a0e      	ldr	r2, [pc, #56]	@ (80038d0 <_ZN11sensor_msgs13MagneticFieldC1Ev+0x4c>)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	601a      	str	r2, [r3, #0]
      header(),
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	3304      	adds	r3, #4
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff fb6c 	bl	8002f7c <_ZN8std_msgs6HeaderC1Ev>
      magnetic_field(),
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	3318      	adds	r3, #24
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff fdc1 	bl	8003430 <_ZN13geometry_msgs7Vector3C1Ev>
      magnetic_field_covariance()
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80038b4:	2308      	movs	r3, #8
 80038b6:	e004      	b.n	80038c2 <_ZN11sensor_msgs13MagneticFieldC1Ev+0x3e>
 80038b8:	f04f 0100 	mov.w	r1, #0
 80038bc:	6011      	str	r1, [r2, #0]
 80038be:	3b01      	subs	r3, #1
 80038c0:	3204      	adds	r2, #4
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	daf8      	bge.n	80038b8 <_ZN11sensor_msgs13MagneticFieldC1Ev+0x34>
    {
    }
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4618      	mov	r0, r3
 80038ca:	3708      	adds	r7, #8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	08009f68 	.word	0x08009f68

080038d4 <_ZNK11sensor_msgs13MagneticField9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80038de:	2300      	movs	r3, #0
 80038e0:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	1d18      	adds	r0, r3, #4
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	4413      	add	r3, r2
 80038ec:	4619      	mov	r1, r3
 80038ee:	f7ff fb65 	bl	8002fbc <_ZNK8std_msgs6Header9serializeEPh>
 80038f2:	4602      	mov	r2, r0
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4413      	add	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]
      offset += this->magnetic_field.serialize(outbuffer + offset);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f103 0018 	add.w	r0, r3, #24
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	4413      	add	r3, r2
 8003906:	4619      	mov	r1, r3
 8003908:	f7ff fdb0 	bl	800346c <_ZNK13geometry_msgs7Vector39serializeEPh>
 800390c:	4602      	mov	r2, r0
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	4413      	add	r3, r2
 8003912:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 9; i++){
 8003914:	2300      	movs	r3, #0
 8003916:	60bb      	str	r3, [r7, #8]
 8003918:	e015      	b.n	8003946 <_ZNK11sensor_msgs13MagneticField9serializeEPh+0x72>
      offset += serializeAvrFloat64(outbuffer + offset, this->magnetic_field_covariance[i]);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	18d1      	adds	r1, r2, r3
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	330a      	adds	r3, #10
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	edd3 7a00 	vldr	s15, [r3]
 800392e:	eeb0 0a67 	vmov.f32	s0, s15
 8003932:	4608      	mov	r0, r1
 8003934:	f7fe fa7b 	bl	8001e2e <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003938:	4602      	mov	r2, r0
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	4413      	add	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 9; i++){
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	3301      	adds	r3, #1
 8003944:	60bb      	str	r3, [r7, #8]
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2b08      	cmp	r3, #8
 800394a:	d9e6      	bls.n	800391a <_ZNK11sensor_msgs13MagneticField9serializeEPh+0x46>
      }
      return offset;
 800394c:	68fb      	ldr	r3, [r7, #12]
    }
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <_ZN11sensor_msgs13MagneticField11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003956:	b580      	push	{r7, lr}
 8003958:	b084      	sub	sp, #16
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003960:	2300      	movs	r3, #0
 8003962:	60fb      	str	r3, [r7, #12]
      offset += this->header.deserialize(inbuffer + offset);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	1d18      	adds	r0, r3, #4
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	4413      	add	r3, r2
 800396e:	4619      	mov	r1, r3
 8003970:	f7ff fbbc 	bl	80030ec <_ZN8std_msgs6Header11deserializeEPh>
 8003974:	4602      	mov	r2, r0
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	4413      	add	r3, r2
 800397a:	60fb      	str	r3, [r7, #12]
      offset += this->magnetic_field.deserialize(inbuffer + offset);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f103 0018 	add.w	r0, r3, #24
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	4413      	add	r3, r2
 8003988:	4619      	mov	r1, r3
 800398a:	f7ff fda8 	bl	80034de <_ZN13geometry_msgs7Vector311deserializeEPh>
 800398e:	4602      	mov	r2, r0
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4413      	add	r3, r2
 8003994:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 9; i++){
 8003996:	2300      	movs	r3, #0
 8003998:	60bb      	str	r3, [r7, #8]
 800399a:	e011      	b.n	80039c0 <_ZN11sensor_msgs13MagneticField11deserializeEPh+0x6a>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->magnetic_field_covariance[i]));
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	18d0      	adds	r0, r2, r3
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	330a      	adds	r3, #10
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	4413      	add	r3, r2
 80039ac:	4619      	mov	r1, r3
 80039ae:	f7fe fada 	bl	8001f66 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80039b2:	4602      	mov	r2, r0
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4413      	add	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 9; i++){
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	3301      	adds	r3, #1
 80039be:	60bb      	str	r3, [r7, #8]
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2b08      	cmp	r3, #8
 80039c4:	d9ea      	bls.n	800399c <_ZN11sensor_msgs13MagneticField11deserializeEPh+0x46>
      }
     return offset;
 80039c6:	68fb      	ldr	r3, [r7, #12]
    }
 80039c8:	4618      	mov	r0, r3
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <_ZN11sensor_msgs13MagneticField7getTypeEv>:

    virtual const char * getType() override { return "sensor_msgs/MagneticField"; };
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	4b03      	ldr	r3, [pc, #12]	@ (80039e8 <_ZN11sensor_msgs13MagneticField7getTypeEv+0x18>)
 80039da:	4618      	mov	r0, r3
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	08009e64 	.word	0x08009e64

080039ec <_ZN11sensor_msgs13MagneticField6getMD5Ev>:
    virtual const char * getMD5() override { return "2f3b0b43eed0c9501de0fa3ff89a45aa"; };
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	4b03      	ldr	r3, [pc, #12]	@ (8003a04 <_ZN11sensor_msgs13MagneticField6getMD5Ev+0x18>)
 80039f6:	4618      	mov	r0, r3
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	08009e80 	.word	0x08009e80

08003a08 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	4a04      	ldr	r2, [pc, #16]	@ (8003a24 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	601a      	str	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	0800a028 	.word	0x0800a028

08003a28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff ffe8 	bl	8003a08 <_ZN3ros15NodeHandleBase_C1Ev>
 8003a38:	4a33      	ldr	r2, [pc, #204]	@ (8003b08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xe0>)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	3304      	adds	r3, #4
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7fe f9ac 	bl	8001da0 <_ZN13STM32HardwareC1Ev>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	609a      	str	r2, [r3, #8]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	60da      	str	r2, [r3, #12]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	611a      	str	r2, [r3, #16]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	615a      	str	r2, [r3, #20]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3318      	adds	r3, #24
 8003a64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a68:	2100      	movs	r1, #0
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f006 f83a 	bl	8009ae4 <memset>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8003a76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f006 f831 	bl	8009ae4 <memset>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 8003a88:	2264      	movs	r2, #100	@ 0x64
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f006 f829 	bl	8009ae4 <memset>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f203 437c 	addw	r3, r3, #1148	@ 0x47c
 8003a98:	2264      	movs	r2, #100	@ 0x64
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f006 f821 	bl	8009ae4 <memset>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f8c3 24e8 	str.w	r2, [r3, #1256]	@ 0x4e8
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f8c3 24ec 	str.w	r2, [r3, #1260]	@ 0x4ec
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f8c3 24f0 	str.w	r2, [r3, #1264]	@ 0x4f0
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2504 	strb.w	r2, [r3, #1284]	@ 0x504
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7fe fe55 	bl	80027a8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4618      	mov	r0, r3
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	08009f54 	.word	0x08009f54

08003b0c <_Z6led_cbRKN8std_msgs5EmptyE>:
std_msgs::String str_msg;
ros::Publisher chatter("chatter", &str_msg);
char hello[] = "Hello world!";

// Subscriber:
void led_cb(const std_msgs::Empty &msg) {
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8003b14:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b18:	4803      	ldr	r0, [pc, #12]	@ (8003b28 <_Z6led_cbRKN8std_msgs5EmptyE+0x1c>)
 8003b1a:	f002 f8d5 	bl	8005cc8 <HAL_GPIO_TogglePin>
}
 8003b1e:	bf00      	nop
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	40020c00 	.word	0x40020c00

08003b2c <setup>:
ros::Publisher mpu9250("imu/data_raw", &imu_msg);
sensor_msgs::MagneticField mag_msg;
ros::Publisher magnetic("imu/mag",&mag_msg);

// Setup node:
void setup(void) {
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  nh.initNode();
 8003b30:	480a      	ldr	r0, [pc, #40]	@ (8003b5c <setup+0x30>)
 8003b32:	f000 f917 	bl	8003d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.advertise(chatter);
 8003b36:	490a      	ldr	r1, [pc, #40]	@ (8003b60 <setup+0x34>)
 8003b38:	4808      	ldr	r0, [pc, #32]	@ (8003b5c <setup+0x30>)
 8003b3a:	f000 f930 	bl	8003d9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.advertise(mpu9250);
 8003b3e:	4909      	ldr	r1, [pc, #36]	@ (8003b64 <setup+0x38>)
 8003b40:	4806      	ldr	r0, [pc, #24]	@ (8003b5c <setup+0x30>)
 8003b42:	f000 f92c 	bl	8003d9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.advertise(magnetic);
 8003b46:	4908      	ldr	r1, [pc, #32]	@ (8003b68 <setup+0x3c>)
 8003b48:	4804      	ldr	r0, [pc, #16]	@ (8003b5c <setup+0x30>)
 8003b4a:	f000 f928 	bl	8003d9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.subscribe(led_sub);
 8003b4e:	4907      	ldr	r1, [pc, #28]	@ (8003b6c <setup+0x40>)
 8003b50:	4802      	ldr	r0, [pc, #8]	@ (8003b5c <setup+0x30>)
 8003b52:	f000 f952 	bl	8003dfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
}
 8003b56:	bf00      	nop
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	20000704 	.word	0x20000704
 8003b60:	20000c3c 	.word	0x20000c3c
 8003b64:	20000d20 	.word	0x20000d20
 8003b68:	20000d80 	.word	0x20000d80
 8003b6c:	20000c50 	.word	0x20000c50

08003b70 <loop>:

// Loop:
void loop(void) {
 8003b70:	b590      	push	{r4, r7, lr}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
  // Publish message:
  str_msg.data = hello;
 8003b76:	4b34      	ldr	r3, [pc, #208]	@ (8003c48 <loop+0xd8>)
 8003b78:	4a34      	ldr	r2, [pc, #208]	@ (8003c4c <loop+0xdc>)
 8003b7a:	605a      	str	r2, [r3, #4]
  chatter.publish(&str_msg);
 8003b7c:	4932      	ldr	r1, [pc, #200]	@ (8003c48 <loop+0xd8>)
 8003b7e:	4834      	ldr	r0, [pc, #208]	@ (8003c50 <loop+0xe0>)
 8003b80:	f7ff f8f5 	bl	8002d6e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  // Imu message:
  imu_msg.header.frame_id = "imu_link";
 8003b84:	4b33      	ldr	r3, [pc, #204]	@ (8003c54 <loop+0xe4>)
 8003b86:	4a34      	ldr	r2, [pc, #208]	@ (8003c58 <loop+0xe8>)
 8003b88:	615a      	str	r2, [r3, #20]
  imu_msg.linear_acceleration.x = imu_9250_0->pt1_p.acc_x;
 8003b8a:	4b34      	ldr	r3, [pc, #208]	@ (8003c5c <loop+0xec>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	4a30      	ldr	r2, [pc, #192]	@ (8003c54 <loop+0xe4>)
 8003b92:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  imu_msg.linear_acceleration.y = imu_9250_0->pt1_p.acc_y;
 8003b96:	4b31      	ldr	r3, [pc, #196]	@ (8003c5c <loop+0xec>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	4a2d      	ldr	r2, [pc, #180]	@ (8003c54 <loop+0xe4>)
 8003b9e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  imu_msg.linear_acceleration.z = imu_9250_0->pt1_p.acc_z;
 8003ba2:	4b2e      	ldr	r3, [pc, #184]	@ (8003c5c <loop+0xec>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	4a2a      	ldr	r2, [pc, #168]	@ (8003c54 <loop+0xe4>)
 8003baa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  imu_msg.angular_velocity.x = imu_9250_0->pt1_p.gyro_x;
 8003bae:	4b2b      	ldr	r3, [pc, #172]	@ (8003c5c <loop+0xec>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb4:	4a27      	ldr	r2, [pc, #156]	@ (8003c54 <loop+0xe4>)
 8003bb6:	6553      	str	r3, [r2, #84]	@ 0x54
  imu_msg.angular_velocity.y = imu_9250_0->pt1_p.gyro_y;
 8003bb8:	4b28      	ldr	r3, [pc, #160]	@ (8003c5c <loop+0xec>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bbe:	4a25      	ldr	r2, [pc, #148]	@ (8003c54 <loop+0xe4>)
 8003bc0:	6593      	str	r3, [r2, #88]	@ 0x58
  imu_msg.angular_velocity.z = imu_9250_0->pt1_p.gyro_z;
 8003bc2:	4b26      	ldr	r3, [pc, #152]	@ (8003c5c <loop+0xec>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc8:	4a22      	ldr	r2, [pc, #136]	@ (8003c54 <loop+0xe4>)
 8003bca:	65d3      	str	r3, [r2, #92]	@ 0x5c
  imu_msg.header.stamp = nh.now();
 8003bcc:	4c21      	ldr	r4, [pc, #132]	@ (8003c54 <loop+0xe4>)
 8003bce:	463b      	mov	r3, r7
 8003bd0:	4923      	ldr	r1, [pc, #140]	@ (8003c60 <loop+0xf0>)
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 f93e 	bl	8003e54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>
 8003bd8:	f104 030c 	add.w	r3, r4, #12
 8003bdc:	463a      	mov	r2, r7
 8003bde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003be2:	e883 0003 	stmia.w	r3, {r0, r1}
  mpu9250.publish(&imu_msg);
 8003be6:	491b      	ldr	r1, [pc, #108]	@ (8003c54 <loop+0xe4>)
 8003be8:	481e      	ldr	r0, [pc, #120]	@ (8003c64 <loop+0xf4>)
 8003bea:	f7ff f8c0 	bl	8002d6e <_ZN3ros9Publisher7publishEPKNS_3MsgE>

  mag_msg.header.frame_id = "imu_link";
 8003bee:	4b1e      	ldr	r3, [pc, #120]	@ (8003c68 <loop+0xf8>)
 8003bf0:	4a19      	ldr	r2, [pc, #100]	@ (8003c58 <loop+0xe8>)
 8003bf2:	615a      	str	r2, [r3, #20]
  mag_msg.magnetic_field.x = imu_9250_0->pt1_p.mag_x;
 8003bf4:	4b19      	ldr	r3, [pc, #100]	@ (8003c5c <loop+0xec>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bfa:	4a1b      	ldr	r2, [pc, #108]	@ (8003c68 <loop+0xf8>)
 8003bfc:	61d3      	str	r3, [r2, #28]
  mag_msg.magnetic_field.y = imu_9250_0->pt1_p.mag_y;
 8003bfe:	4b17      	ldr	r3, [pc, #92]	@ (8003c5c <loop+0xec>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c04:	4a18      	ldr	r2, [pc, #96]	@ (8003c68 <loop+0xf8>)
 8003c06:	6213      	str	r3, [r2, #32]
  mag_msg.magnetic_field.z = imu_9250_0->pt1_p.mag_z;
 8003c08:	4b14      	ldr	r3, [pc, #80]	@ (8003c5c <loop+0xec>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c0e:	4a16      	ldr	r2, [pc, #88]	@ (8003c68 <loop+0xf8>)
 8003c10:	6253      	str	r3, [r2, #36]	@ 0x24
  mag_msg.header.stamp = nh.now();
 8003c12:	4c15      	ldr	r4, [pc, #84]	@ (8003c68 <loop+0xf8>)
 8003c14:	463b      	mov	r3, r7
 8003c16:	4912      	ldr	r1, [pc, #72]	@ (8003c60 <loop+0xf0>)
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 f91b 	bl	8003e54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>
 8003c1e:	f104 030c 	add.w	r3, r4, #12
 8003c22:	463a      	mov	r2, r7
 8003c24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c28:	e883 0003 	stmia.w	r3, {r0, r1}
  magnetic.publish(&mag_msg);
 8003c2c:	490e      	ldr	r1, [pc, #56]	@ (8003c68 <loop+0xf8>)
 8003c2e:	480f      	ldr	r0, [pc, #60]	@ (8003c6c <loop+0xfc>)
 8003c30:	f7ff f89d 	bl	8002d6e <_ZN3ros9Publisher7publishEPKNS_3MsgE>

  nh.spinOnce();
 8003c34:	480a      	ldr	r0, [pc, #40]	@ (8003c60 <loop+0xf0>)
 8003c36:	f000 f947 	bl	8003ec8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
  HAL_Delay(100);
 8003c3a:	2064      	movs	r0, #100	@ 0x64
 8003c3c:	f001 f970 	bl	8004f20 <HAL_Delay>
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd90      	pop	{r4, r7, pc}
 8003c48:	20000c34 	.word	0x20000c34
 8003c4c:	20000004 	.word	0x20000004
 8003c50:	20000c3c 	.word	0x20000c3c
 8003c54:	20000c68 	.word	0x20000c68
 8003c58:	08009ea4 	.word	0x08009ea4
 8003c5c:	200006fc 	.word	0x200006fc
 8003c60:	20000704 	.word	0x20000704
 8003c64:	20000d20 	.word	0x20000d20
 8003c68:	20000d34 	.word	0x20000d34
 8003c6c:	20000d80 	.word	0x20000d80

08003c70 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	60fb      	str	r3, [r7, #12]
 8003c7e:	e00c      	b.n	8003c9a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	fa22 f103 	lsr.w	r1, r2, r3
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4413      	add	r3, r2
 8003c90:	b2ca      	uxtb	r2, r1
 8003c92:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	3301      	adds	r3, #1
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2b03      	cmp	r3, #3
 8003c9e:	d9ef      	bls.n	8003c80 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8003ca0:	bf00      	nop
 8003ca2:	bf00      	nop
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003cae:	b480      	push	{r7}
 8003cb0:	b085      	sub	sp, #20
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60fb      	str	r3, [r7, #12]
 8003cc2:	e010      	b.n	8003ce6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6839      	ldr	r1, [r7, #0]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	440a      	add	r2, r1
 8003cce:	7812      	ldrb	r2, [r2, #0]
 8003cd0:	4611      	mov	r1, r2
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	00d2      	lsls	r2, r2, #3
 8003cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2b03      	cmp	r3, #3
 8003cea:	d9eb      	bls.n	8003cc4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8003cec:	bf00      	nop
 8003cee:	bf00      	nop
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
	...

08003cfc <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	4a04      	ldr	r2, [pc, #16]	@ (8003d18 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	0800a010 	.word	0x0800a010

08003d1c <_ZN3ros10SubscriberIN8std_msgs5EmptyEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
 8003d28:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff ffe5 	bl	8003cfc <_ZN3ros11Subscriber_C1Ev>
 8003d32:	4a0b      	ldr	r2, [pc, #44]	@ (8003d60 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvEC1EPKcPFvRKS2_Ei+0x44>)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	330c      	adds	r3, #12
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff f837 	bl	8002db0 <_ZN8std_msgs5EmptyC1Ev>
    cb_(cb),
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	611a      	str	r2, [r3, #16]
    endpoint_(endpoint)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	615a      	str	r2, [r3, #20]
  {
    topic_ = topic_name;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	609a      	str	r2, [r3, #8]
  };
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	08009f3c 	.word	0x08009f3c

08003d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	3304      	adds	r3, #4
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7fe f825 	bl	8001dc0 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
    bytes_ = 0;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
    index_ = 0;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f8c3 24ec 	str.w	r2, [r3, #1260]	@ 0x4ec
    topic_ = 0;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f8c3 24e8 	str.w	r2, [r3, #1256]	@ 0x4e8
  };
 8003d96:	bf00      	nop
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8003d9e:	b480      	push	{r7}
 8003da0:	b085      	sub	sp, #20
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
 8003da6:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003da8:	2300      	movs	r3, #0
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	e01b      	b.n	8003de6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x48>
    {
      if (publishers[i] == 0) // empty slot
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8003db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d110      	bne.n	8003de0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x42>
      {
        publishers[i] = &p;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8003dc6:	6839      	ldr	r1, [r7, #0]
 8003dc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f103 027d 	add.w	r2, r3, #125	@ 0x7d
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	60da      	str	r2, [r3, #12]
        return true;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e006      	b.n	8003dee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	3301      	adds	r3, #1
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2b18      	cmp	r3, #24
 8003dea:	dde0      	ble.n	8003dae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 8003dec:	2300      	movs	r3, #0
  }
 8003dee:	4618      	mov	r0, r3
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr

08003dfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 8003dfa:	b480      	push	{r7}
 8003dfc:	b085      	sub	sp, #20
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
 8003e02:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003e04:	2300      	movs	r3, #0
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	e01a      	b.n	8003e40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x46>
    {
      if (subscribers[i] == 0) // empty slot
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4413      	add	r3, r2
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10e      	bne.n	8003e3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4413      	add	r3, r2
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	605a      	str	r2, [r3, #4]
        return true;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e006      	b.n	8003e48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	60fb      	str	r3, [r7, #12]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2b18      	cmp	r3, #24
 8003e44:	dde1      	ble.n	8003e0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 8003e46:	2300      	movs	r3, #0
  }
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>:
  Time now()
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	3304      	adds	r3, #4
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7fd ffd8 	bl	8001e18 <_ZN13STM32Hardware4timeEv>
 8003e68:	60f8      	str	r0, [r7, #12]
    Time current_time;
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7fe f916 	bl	800209c <_ZN3ros4TimeC1Ev>
    current_time.sec = ms / 1000 + sec_offset;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4a13      	ldr	r2, [pc, #76]	@ (8003ec0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x6c>)
 8003e74:	fba2 2303 	umull	r2, r3, r2, r3
 8003e78:	099a      	lsrs	r2, r3, #6
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	441a      	add	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	601a      	str	r2, [r3, #0]
    current_time.nsec = (ms % 1000) * 1000000UL + nsec_offset;
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	4b0e      	ldr	r3, [pc, #56]	@ (8003ec0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x6c>)
 8003e88:	fba3 1302 	umull	r1, r3, r3, r2
 8003e8c:	099b      	lsrs	r3, r3, #6
 8003e8e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003e92:	fb01 f303 	mul.w	r3, r1, r3
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	4a0a      	ldr	r2, [pc, #40]	@ (8003ec4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x70>)
 8003e9a:	fb03 f202 	mul.w	r2, r3, r2
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	441a      	add	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	605a      	str	r2, [r3, #4]
    normalizeSecNSec(current_time.sec, current_time.nsec);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3304      	adds	r3, #4
 8003eac:	4619      	mov	r1, r3
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 ff6e 	bl	8004d90 <_ZN3ros16normalizeSecNSecERmS0_>
    return current_time;
 8003eb4:	bf00      	nop
  }
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	10624dd3 	.word	0x10624dd3
 8003ec4:	000f4240 	.word	0x000f4240

08003ec8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3304      	adds	r3, #4
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fd ff9f 	bl	8001e18 <_ZN13STM32Hardware4timeEv>
 8003eda:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d903      	bls.n	8003ef6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
    if (mode_ != MODE_FIRST_FF)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d009      	beq.n	8003f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d903      	bls.n	8003f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
      if (spin_timeout_ > 0)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d013      	beq.n	8003f44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	3304      	adds	r3, #4
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fd ff79 	bl	8001e18 <_ZN13STM32Hardware4timeEv>
 8003f26:	4602      	mov	r2, r0
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	1ad2      	subs	r2, r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	bf8c      	ite	hi
 8003f34:	2301      	movhi	r3, #1
 8003f36:	2300      	movls	r3, #0
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d002      	beq.n	8003f44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
          return SPIN_TIMEOUT;
 8003f3e:	f06f 0301 	mvn.w	r3, #1
 8003f42:	e190      	b.n	8004266 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
      int data = hardware_.read();
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3304      	adds	r3, #4
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7fd ff46 	bl	8001dda <_ZN13STM32Hardware4readEv>
 8003f4e:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f2c0 8170 	blt.w	8004238 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x370>
      checksum_ += data;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	@ 0x4f0
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	441a      	add	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f8c3 24f0 	str.w	r2, [r3, #1264]	@ 0x4f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8003f6e:	2b07      	cmp	r3, #7
 8003f70:	d11d      	bne.n	8003fae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xe6>
        message_in[index_++] = data;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8003f78:	1c59      	adds	r1, r3, #1
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	f8c2 14ec 	str.w	r1, [r2, #1260]	@ 0x4ec
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	b2d1      	uxtb	r1, r2
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	4413      	add	r3, r2
 8003f88:	460a      	mov	r2, r1
 8003f8a:	761a      	strb	r2, [r3, #24]
        bytes_--;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	@ 0x4e4
 8003f92:	1e5a      	subs	r2, r3, #1
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	@ 0x4e4
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1b7      	bne.n	8003f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2208      	movs	r2, #8
 8003fa8:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 8003fac:	e7b2      	b.n	8003f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d128      	bne.n	800400a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x142>
        if (data == 0xff)
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	2bff      	cmp	r3, #255	@ 0xff
 8003fbc:	d10d      	bne.n	8003fda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x112>
          mode_++;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8003fc4:	1c5a      	adds	r2, r3, #1
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f103 0214 	add.w	r2, r3, #20
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
 8003fd8:	e79c      	b.n	8003f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	3304      	adds	r3, #4
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fd ff1a 	bl	8001e18 <_ZN13STM32Hardware4timeEv>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	bf8c      	ite	hi
 8003ff2:	2301      	movhi	r3, #1
 8003ff4:	2300      	movls	r3, #0
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d08b      	beq.n	8003f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
          return SPIN_TIMEOUT;
 8004004:	f06f 0301 	mvn.w	r3, #1
 8004008:	e12d      	b.n	8004266 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
      else if (mode_ == MODE_PROTOCOL_VER)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8004010:	2b01      	cmp	r3, #1
 8004012:	d118      	bne.n	8004046 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x17e>
        if (data == PROTOCOL_VER)
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2bfe      	cmp	r3, #254	@ 0xfe
 8004018:	d107      	bne.n	800402a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x162>
          mode_++;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8004020:	1c5a      	adds	r2, r3, #1
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 8004028:	e774      	b.n	8003f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
          if (configured_ == false)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8004038:	2b00      	cmp	r3, #0
 800403a:	f47f af6b 	bne.w	8003f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f915 	bl	800426e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8004044:	e766      	b.n	8003f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800404c:	2b02      	cmp	r3, #2
 800404e:	d113      	bne.n	8004078 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b0>
        bytes_ = data;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68ba      	ldr	r2, [r7, #8]
 8004054:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
        index_ = 0;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f8c3 24ec 	str.w	r2, [r3, #1260]	@ 0x4ec
        mode_++;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8004066:	1c5a      	adds	r2, r3, #1
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
        checksum_ = data;               /* first byte for calculating size checksum */
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	f8c3 24f0 	str.w	r2, [r3, #1264]	@ 0x4f0
 8004076:	e74d      	b.n	8003f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800407e:	2b03      	cmp	r3, #3
 8004080:	d110      	bne.n	80040a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1dc>
        bytes_ += data << 8;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f8d3 24e4 	ldr.w	r2, [r3, #1252]	@ 0x4e4
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	021b      	lsls	r3, r3, #8
 800408c:	441a      	add	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
        mode_++;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800409a:	1c5a      	adds	r2, r3, #1
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 80040a2:	e737      	b.n	8003f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	d116      	bne.n	80040dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x214>
        if ((checksum_ % 256) == 255)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 80040b4:	425a      	negs	r2, r3
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	b2d2      	uxtb	r2, r2
 80040ba:	bf58      	it	pl
 80040bc:	4253      	negpl	r3, r2
 80040be:	2bff      	cmp	r3, #255	@ 0xff
 80040c0:	d107      	bne.n	80040d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x20a>
          mode_++;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80040c8:	1c5a      	adds	r2, r3, #1
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 80040d0:	e720      	b.n	8003f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 80040da:	e71b      	b.n	8003f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80040e2:	2b05      	cmp	r3, #5
 80040e4:	d10f      	bne.n	8004106 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x23e>
        topic_ = data;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	f8c3 24e8 	str.w	r2, [r3, #1256]	@ 0x4e8
        mode_++;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80040f4:	1c5a      	adds	r2, r3, #1
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
        checksum_ = data;               /* first byte included in checksum */
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	f8c3 24f0 	str.w	r2, [r3, #1264]	@ 0x4f0
 8004104:	e706      	b.n	8003f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800410c:	2b06      	cmp	r3, #6
 800410e:	d117      	bne.n	8004140 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x278>
        topic_ += data << 8;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	021b      	lsls	r3, r3, #8
 800411a:	441a      	add	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f8c3 24e8 	str.w	r2, [r3, #1256]	@ 0x4e8
        mode_ = MODE_MESSAGE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2207      	movs	r2, #7
 8004126:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
        if (bytes_ == 0)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	@ 0x4e4
 8004130:	2b00      	cmp	r3, #0
 8004132:	f47f aeef 	bne.w	8003f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2208      	movs	r2, #8
 800413a:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 800413e:	e6e9      	b.n	8003f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8004146:	2b08      	cmp	r3, #8
 8004148:	f47f aee4 	bne.w	8003f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
        if ((checksum_ % 256) == 255)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 800415a:	425a      	negs	r2, r3
 800415c:	b2db      	uxtb	r3, r3
 800415e:	b2d2      	uxtb	r2, r2
 8004160:	bf58      	it	pl
 8004162:	4253      	negpl	r3, r2
 8004164:	2bff      	cmp	r3, #255	@ 0xff
 8004166:	f47f aed5 	bne.w	8003f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8004170:	2b00      	cmp	r3, #0
 8004172:	d110      	bne.n	8004196 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ce>
            requestSyncTime();
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f87a 	bl	800426e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f894 	bl	80042a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8
            last_sync_receive_time = c_time;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc
            return SPIN_ERR;
 8004190:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004194:	e067      	b.n	8004266 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
          else if (topic_ == TopicInfo::ID_TIME)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 800419c:	2b0a      	cmp	r3, #10
 800419e:	d106      	bne.n	80041ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e6>
            syncTime(message_in);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3318      	adds	r3, #24
 80041a4:	4619      	mov	r1, r3
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f95e 	bl	8004468 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80041ac:	e6b2      	b.n	8003f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 80041b4:	2b06      	cmp	r3, #6
 80041b6:	d10d      	bne.n	80041d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x30c>
            req_param_resp.deserialize(message_in);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f503 62a1 	add.w	r2, r3, #1288	@ 0x508
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	3318      	adds	r3, #24
 80041c2:	4619      	mov	r1, r3
 80041c4:	4610      	mov	r0, r2
 80041c6:	f7fe fc2e 	bl	8002a26 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 2504 	strb.w	r2, [r3, #1284]	@ 0x504
 80041d2:	e69f      	b.n	8003f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 80041da:	2b0b      	cmp	r3, #11
 80041dc:	d104      	bne.n	80041e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x320>
            configured_ = false;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
 80041e6:	e695      	b.n	8003f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 80041ee:	3b64      	subs	r3, #100	@ 0x64
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4413      	add	r3, r2
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f43f ae89 	beq.w	8003f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8004208:	3b64      	subs	r3, #100	@ 0x64
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4413      	add	r3, r2
 8004214:	6858      	ldr	r0, [r3, #4]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 800421c:	3b64      	subs	r3, #100	@ 0x64
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4413      	add	r3, r2
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	3218      	adds	r2, #24
 8004232:	4611      	mov	r1, r2
 8004234:	4798      	blx	r3
    while (true)
 8004236:	e66d      	b.n	8003f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8004238:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00f      	beq.n	8004264 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	@ 0x4f8
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8004252:	4293      	cmp	r3, r2
 8004254:	d906      	bls.n	8004264 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>
      requestSyncTime();
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f809 	bl	800426e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8
    return SPIN_OK;
 8004264:	2300      	movs	r3, #0
  }
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 800426e:	b580      	push	{r7, lr}
 8004270:	b086      	sub	sp, #24
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8004276:	f107 030c 	add.w	r3, r7, #12
 800427a:	4618      	mov	r0, r3
 800427c:	f7fd ff30 	bl	80020e0 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f107 020c 	add.w	r2, r7, #12
 800428a:	210a      	movs	r1, #10
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	4798      	blx	r3
    rt_time = hardware_.time();
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3304      	adds	r3, #4
 8004294:	4618      	mov	r0, r3
 8004296:	f7fd fdbf 	bl	8001e18 <_ZN13STM32Hardware4timeEv>
 800429a:	4602      	mov	r2, r0
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	609a      	str	r2, [r3, #8]
  }
 80042a0:	bf00      	nop
 80042a2:	3718      	adds	r7, #24
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 80042a8:	b590      	push	{r4, r7, lr}
 80042aa:	b08b      	sub	sp, #44	@ 0x2c
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80042b0:	f107 030c 	add.w	r3, r7, #12
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7fe f803 	bl	80022c0 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80042ba:	2300      	movs	r3, #0
 80042bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80042be:	e05a      	b.n	8004376 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xce>
    {
      if (publishers[i] != 0) // non-empty slot
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042c4:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 80042c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d04f      	beq.n	8004370 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xc8>
      {
        ti.topic_id = publishers[i]->id_;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042d4:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 80042d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	b29b      	uxth	r3, r3
 80042e0:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042e6:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 80042ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042f6:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 80042fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042fe:	6859      	ldr	r1, [r3, #4]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004304:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8004308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	3308      	adds	r3, #8
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4608      	mov	r0, r1
 8004316:	4798      	blx	r3
 8004318:	4603      	mov	r3, r0
 800431a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004320:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8004324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004328:	6859      	ldr	r1, [r3, #4]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800432e:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8004332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	330c      	adds	r3, #12
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4608      	mov	r0, r1
 8004340:	4798      	blx	r3
 8004342:	4603      	mov	r3, r0
 8004344:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004346:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800434a:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681c      	ldr	r4, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004356:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 800435a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800435e:	4618      	mov	r0, r3
 8004360:	f7fe fd19 	bl	8002d96 <_ZN3ros9Publisher15getEndpointTypeEv>
 8004364:	4601      	mov	r1, r0
 8004366:	f107 030c 	add.w	r3, r7, #12
 800436a:	461a      	mov	r2, r3
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004372:	3301      	adds	r3, #1
 8004374:	627b      	str	r3, [r7, #36]	@ 0x24
 8004376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004378:	2b18      	cmp	r3, #24
 800437a:	dda1      	ble.n	80042c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800437c:	2300      	movs	r3, #0
 800437e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004380:	e067      	b.n	8004452 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1aa>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004386:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d05b      	beq.n	800444c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a4>
      {
        ti.topic_id = subscribers[i]->id_;
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004398:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4413      	add	r3, r2
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ac:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4413      	add	r3, r2
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043be:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4413      	add	r3, r2
 80043c6:	6859      	ldr	r1, [r3, #4]
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043cc:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	3308      	adds	r3, #8
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4608      	mov	r0, r1
 80043de:	4798      	blx	r3
 80043e0:	4603      	mov	r3, r0
 80043e2:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e8:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	4413      	add	r3, r2
 80043f0:	6859      	ldr	r1, [r3, #4]
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f6:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4413      	add	r3, r2
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	330c      	adds	r3, #12
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4608      	mov	r0, r1
 8004408:	4798      	blx	r3
 800440a:	4603      	mov	r3, r0
 800440c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800440e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004412:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681c      	ldr	r4, [r3, #0]
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441e:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	6859      	ldr	r1, [r3, #4]
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800442c:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4413      	add	r3, r2
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	3304      	adds	r3, #4
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4608      	mov	r0, r1
 800443e:	4798      	blx	r3
 8004440:	4601      	mov	r1, r0
 8004442:	f107 030c 	add.w	r3, r7, #12
 8004446:	461a      	mov	r2, r3
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800444c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444e:	3301      	adds	r3, #1
 8004450:	627b      	str	r3, [r7, #36]	@ 0x24
 8004452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004454:	2b18      	cmp	r3, #24
 8004456:	dd94      	ble.n	8004382 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xda>
      }
    }
    configured_ = true;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  }
 8004460:	bf00      	nop
 8004462:	372c      	adds	r7, #44	@ 0x2c
 8004464:	46bd      	mov	sp, r7
 8004466:	bd90      	pop	{r4, r7, pc}

08004468 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004472:	f107 0308 	add.w	r3, r7, #8
 8004476:	4618      	mov	r0, r3
 8004478:	f7fd fe32 	bl	80020e0 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3304      	adds	r3, #4
 8004480:	4618      	mov	r0, r3
 8004482:	f7fd fcc9 	bl	8001e18 <_ZN13STM32Hardware4timeEv>
 8004486:	4602      	mov	r2, r0
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004490:	f107 0308 	add.w	r3, r7, #8
 8004494:	6839      	ldr	r1, [r7, #0]
 8004496:	4618      	mov	r0, r3
 8004498:	f7fd fe92 	bl	80021c0 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	4914      	ldr	r1, [pc, #80]	@ (80044f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 80044a2:	fba1 1303 	umull	r1, r3, r1, r3
 80044a6:	099b      	lsrs	r3, r3, #6
 80044a8:	4413      	add	r3, r2
 80044aa:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80044ac:	6939      	ldr	r1, [r7, #16]
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	4b10      	ldr	r3, [pc, #64]	@ (80044f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 80044b2:	fba3 0302 	umull	r0, r3, r3, r2
 80044b6:	099b      	lsrs	r3, r3, #6
 80044b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80044bc:	fb00 f303 	mul.w	r3, r0, r3
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	4a0d      	ldr	r2, [pc, #52]	@ (80044f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80044c4:	fb02 f303 	mul.w	r3, r2, r3
 80044c8:	440b      	add	r3, r1
 80044ca:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80044cc:	f107 0308 	add.w	r3, r7, #8
 80044d0:	3304      	adds	r3, #4
 80044d2:	4619      	mov	r1, r3
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 f8a5 	bl	8004624 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	3304      	adds	r3, #4
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fd fc9a 	bl	8001e18 <_ZN13STM32Hardware4timeEv>
 80044e4:	4602      	mov	r2, r0
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc
  }
 80044ec:	bf00      	nop
 80044ee:	3718      	adds	r7, #24
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	10624dd3 	.word	0x10624dd3
 80044f8:	000f4240 	.word	0x000f4240

080044fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b088      	sub	sp, #32
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	2b63      	cmp	r3, #99	@ 0x63
 800450c:	dd09      	ble.n	8004522 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8004514:	f083 0301 	eor.w	r3, r3, #1
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800451e:	2300      	movs	r3, #0
 8004520:	e079      	b.n	8004616 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	f502 7206 	add.w	r2, r2, #536	@ 0x218
 800452e:	3207      	adds	r2, #7
 8004530:	4611      	mov	r1, r2
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	4798      	blx	r3
 8004536:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	22ff      	movs	r2, #255	@ 0xff
 800453c:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218
    message_out[1] = PROTOCOL_VER;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	22fe      	movs	r2, #254	@ 0xfe
 8004544:	f883 2219 	strb.w	r2, [r3, #537]	@ 0x219
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	b2da      	uxtb	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f883 221a 	strb.w	r2, [r3, #538]	@ 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	b29b      	uxth	r3, r3
 8004556:	0a1b      	lsrs	r3, r3, #8
 8004558:	b29b      	uxth	r3, r3
 800455a:	b2da      	uxtb	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f883 221b 	strb.w	r2, [r3, #539]	@ 0x21b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f893 221a 	ldrb.w	r2, [r3, #538]	@ 0x21a
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f893 321b 	ldrb.w	r3, [r3, #539]	@ 0x21b
 800456e:	4413      	add	r3, r2
 8004570:	b2db      	uxtb	r3, r3
 8004572:	43db      	mvns	r3, r3
 8004574:	b2da      	uxtb	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	b2da      	uxtb	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	b21b      	sxth	r3, r3
 800458a:	121b      	asrs	r3, r3, #8
 800458c:	b21b      	sxth	r3, r3
 800458e:	b2da      	uxtb	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e

    /* calculate checksum */
    int chk = 0;
 8004596:	2300      	movs	r3, #0
 8004598:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800459a:	2305      	movs	r3, #5
 800459c:	61bb      	str	r3, [r7, #24]
 800459e:	e00c      	b.n	80045ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	4413      	add	r3, r2
 80045a6:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	461a      	mov	r2, r3
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	4413      	add	r3, r2
 80045b2:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	3301      	adds	r3, #1
 80045b8:	61bb      	str	r3, [r7, #24]
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	3306      	adds	r3, #6
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	dded      	ble.n	80045a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	3307      	adds	r3, #7
 80045c8:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	425a      	negs	r2, r3
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	b2d2      	uxtb	r2, r2
 80045d2:	bf58      	it	pl
 80045d4:	4253      	negpl	r3, r2
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	1c59      	adds	r1, r3, #1
 80045dc:	6179      	str	r1, [r7, #20]
 80045de:	43d2      	mvns	r2, r2
 80045e0:	b2d1      	uxtb	r1, r2
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	4413      	add	r3, r2
 80045e6:	460a      	mov	r2, r1
 80045e8:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218

    if (l <= OUTPUT_SIZE)
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045f2:	dc0a      	bgt.n	800460a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	1d18      	adds	r0, r3, #4
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	4619      	mov	r1, r3
 8004602:	f7fd fbf8 	bl	8001df6 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	e005      	b.n	8004616 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800460a:	4905      	ldr	r1, [pc, #20]	@ (8004620 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f000 f847 	bl	80046a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004612:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
  }
 8004616:	4618      	mov	r0, r3
 8004618:	3720      	adds	r7, #32
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	08009eb0 	.word	0x08009eb0

08004624 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	3304      	adds	r3, #4
 8004632:	4618      	mov	r0, r3
 8004634:	f7fd fbf0 	bl	8001e18 <_ZN13STM32Hardware4timeEv>
 8004638:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	4914      	ldr	r1, [pc, #80]	@ (8004694 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x70>)
 8004642:	fba1 1303 	umull	r1, r3, r1, r3
 8004646:	099b      	lsrs	r3, r3, #6
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	1e5a      	subs	r2, r3, #1
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	6859      	ldr	r1, [r3, #4]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	4b0f      	ldr	r3, [pc, #60]	@ (8004694 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x70>)
 8004658:	fba3 0302 	umull	r0, r3, r3, r2
 800465c:	099b      	lsrs	r3, r3, #6
 800465e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004662:	fb00 f303 	mul.w	r3, r0, r3
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	4a0b      	ldr	r2, [pc, #44]	@ (8004698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 800466a:	fb02 f303 	mul.w	r3, r2, r3
 800466e:	1aca      	subs	r2, r1, r3
 8004670:	4b0a      	ldr	r3, [pc, #40]	@ (800469c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8004672:	4413      	add	r3, r2
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f103 020c 	add.w	r2, r3, #12
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	3310      	adds	r3, #16
 8004682:	4619      	mov	r1, r3
 8004684:	4610      	mov	r0, r2
 8004686:	f000 fb83 	bl	8004d90 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 800468a:	bf00      	nop
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	10624dd3 	.word	0x10624dd3
 8004698:	000f4240 	.word	0x000f4240
 800469c:	3b9aca00 	.word	0x3b9aca00

080046a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	2103      	movs	r1, #3
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f804 	bl	80046bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80046b4:	bf00      	nop
 80046b6:	3708      	adds	r7, #8
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80046bc:	b580      	push	{r7, lr}
 80046be:	b088      	sub	sp, #32
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	460b      	mov	r3, r1
 80046c6:	607a      	str	r2, [r7, #4]
 80046c8:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80046ca:	f107 0314 	add.w	r3, r7, #20
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fd ffba 	bl	8002648 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80046d4:	7afb      	ldrb	r3, [r7, #11]
 80046d6:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f107 0214 	add.w	r2, r7, #20
 80046e6:	2107      	movs	r1, #7
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	4798      	blx	r3
  }
 80046ec:	bf00      	nop
 80046ee:	3720      	adds	r7, #32
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <_Z41__static_initialization_and_destruction_0ii>:
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d128      	bne.n	8004756 <_Z41__static_initialization_and_destruction_0ii+0x62>
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800470a:	4293      	cmp	r3, r2
 800470c:	d123      	bne.n	8004756 <_Z41__static_initialization_and_destruction_0ii+0x62>
ros::NodeHandle nh;
 800470e:	4814      	ldr	r0, [pc, #80]	@ (8004760 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8004710:	f7ff f98a 	bl	8003a28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 8004714:	4813      	ldr	r0, [pc, #76]	@ (8004764 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8004716:	f7fe fb95 	bl	8002e44 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 800471a:	2300      	movs	r3, #0
 800471c:	4a11      	ldr	r2, [pc, #68]	@ (8004764 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800471e:	4912      	ldr	r1, [pc, #72]	@ (8004768 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004720:	4812      	ldr	r0, [pc, #72]	@ (800476c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004722:	f7fe fb0d 	bl	8002d40 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Empty> led_sub("toggle_led", &led_cb);
 8004726:	2301      	movs	r3, #1
 8004728:	4a11      	ldr	r2, [pc, #68]	@ (8004770 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800472a:	4912      	ldr	r1, [pc, #72]	@ (8004774 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800472c:	4812      	ldr	r0, [pc, #72]	@ (8004778 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800472e:	f7ff faf5 	bl	8003d1c <_ZN3ros10SubscriberIN8std_msgs5EmptyEvEC1EPKcPFvRKS2_Ei>
sensor_msgs::Imu imu_msg;
 8004732:	4812      	ldr	r0, [pc, #72]	@ (800477c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8004734:	f7fe ff22 	bl	800357c <_ZN11sensor_msgs3ImuC1Ev>
ros::Publisher mpu9250("imu/data_raw", &imu_msg);
 8004738:	2300      	movs	r3, #0
 800473a:	4a10      	ldr	r2, [pc, #64]	@ (800477c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800473c:	4910      	ldr	r1, [pc, #64]	@ (8004780 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800473e:	4811      	ldr	r0, [pc, #68]	@ (8004784 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8004740:	f7fe fafe 	bl	8002d40 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
sensor_msgs::MagneticField mag_msg;
 8004744:	4810      	ldr	r0, [pc, #64]	@ (8004788 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8004746:	f7ff f89d 	bl	8003884 <_ZN11sensor_msgs13MagneticFieldC1Ev>
ros::Publisher magnetic("imu/mag",&mag_msg);
 800474a:	2300      	movs	r3, #0
 800474c:	4a0e      	ldr	r2, [pc, #56]	@ (8004788 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800474e:	490f      	ldr	r1, [pc, #60]	@ (800478c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8004750:	480f      	ldr	r0, [pc, #60]	@ (8004790 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8004752:	f7fe faf5 	bl	8002d40 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8004756:	bf00      	nop
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	20000704 	.word	0x20000704
 8004764:	20000c34 	.word	0x20000c34
 8004768:	08009eec 	.word	0x08009eec
 800476c:	20000c3c 	.word	0x20000c3c
 8004770:	08003b0d 	.word	0x08003b0d
 8004774:	08009ef4 	.word	0x08009ef4
 8004778:	20000c50 	.word	0x20000c50
 800477c:	20000c68 	.word	0x20000c68
 8004780:	08009f00 	.word	0x08009f00
 8004784:	20000d20 	.word	0x20000d20
 8004788:	20000d34 	.word	0x20000d34
 800478c:	08009f10 	.word	0x08009f10
 8004790:	20000d80 	.word	0x20000d80

08004794 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	330c      	adds	r3, #12
 80047a2:	6839      	ldr	r1, [r7, #0]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7fe fb23 	bl	8002df0 <_ZN8std_msgs5Empty11deserializeEPh>
    this->cb_(msg);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	320c      	adds	r2, #12
 80047b2:	4610      	mov	r0, r2
 80047b4:	4798      	blx	r3
  }
 80047b6:	bf00      	nop
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 80047be:	b480      	push	{r7}
 80047c0:	b083      	sub	sp, #12
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	695b      	ldr	r3, [r3, #20]
  }
 80047ca:	4618      	mov	r0, r3
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b082      	sub	sp, #8
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	330c      	adds	r3, #12
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7fe fb12 	bl	8002e0c <_ZN8std_msgs5Empty7getTypeEv>
 80047e8:	4603      	mov	r3, r0
  }
 80047ea:	4618      	mov	r0, r3
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b082      	sub	sp, #8
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	330c      	adds	r3, #12
 80047fe:	4618      	mov	r0, r3
 8004800:	f7fe fb12 	bl	8002e28 <_ZN8std_msgs5Empty6getMD5Ev>
 8004804:	4603      	mov	r3, r0
  }
 8004806:	4618      	mov	r0, r3
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
    return configured_;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
  };
 800481c:	4618      	mov	r0, r3
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <_GLOBAL__sub_I_nh>:
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
 800482c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004830:	2001      	movs	r0, #1
 8004832:	f7ff ff5f 	bl	80046f4 <_Z41__static_initialization_and_destruction_0ii>
 8004836:	bd80      	pop	{r7, pc}

08004838 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800483e:	2300      	movs	r3, #0
 8004840:	607b      	str	r3, [r7, #4]
 8004842:	4b10      	ldr	r3, [pc, #64]	@ (8004884 <HAL_MspInit+0x4c>)
 8004844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004846:	4a0f      	ldr	r2, [pc, #60]	@ (8004884 <HAL_MspInit+0x4c>)
 8004848:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800484c:	6453      	str	r3, [r2, #68]	@ 0x44
 800484e:	4b0d      	ldr	r3, [pc, #52]	@ (8004884 <HAL_MspInit+0x4c>)
 8004850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004852:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004856:	607b      	str	r3, [r7, #4]
 8004858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800485a:	2300      	movs	r3, #0
 800485c:	603b      	str	r3, [r7, #0]
 800485e:	4b09      	ldr	r3, [pc, #36]	@ (8004884 <HAL_MspInit+0x4c>)
 8004860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004862:	4a08      	ldr	r2, [pc, #32]	@ (8004884 <HAL_MspInit+0x4c>)
 8004864:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004868:	6413      	str	r3, [r2, #64]	@ 0x40
 800486a:	4b06      	ldr	r3, [pc, #24]	@ (8004884 <HAL_MspInit+0x4c>)
 800486c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800486e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004872:	603b      	str	r3, [r7, #0]
 8004874:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004876:	2007      	movs	r0, #7
 8004878:	f000 fc46 	bl	8005108 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800487c:	bf00      	nop
 800487e:	3708      	adds	r7, #8
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	40023800 	.word	0x40023800

08004888 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b08a      	sub	sp, #40	@ 0x28
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004890:	f107 0314 	add.w	r3, r7, #20
 8004894:	2200      	movs	r2, #0
 8004896:	601a      	str	r2, [r3, #0]
 8004898:	605a      	str	r2, [r3, #4]
 800489a:	609a      	str	r2, [r3, #8]
 800489c:	60da      	str	r2, [r3, #12]
 800489e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a19      	ldr	r2, [pc, #100]	@ (800490c <HAL_I2C_MspInit+0x84>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d12b      	bne.n	8004902 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048aa:	2300      	movs	r3, #0
 80048ac:	613b      	str	r3, [r7, #16]
 80048ae:	4b18      	ldr	r3, [pc, #96]	@ (8004910 <HAL_I2C_MspInit+0x88>)
 80048b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b2:	4a17      	ldr	r2, [pc, #92]	@ (8004910 <HAL_I2C_MspInit+0x88>)
 80048b4:	f043 0302 	orr.w	r3, r3, #2
 80048b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80048ba:	4b15      	ldr	r3, [pc, #84]	@ (8004910 <HAL_I2C_MspInit+0x88>)
 80048bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	613b      	str	r3, [r7, #16]
 80048c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80048c6:	23c0      	movs	r3, #192	@ 0xc0
 80048c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80048ca:	2312      	movs	r3, #18
 80048cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ce:	2300      	movs	r3, #0
 80048d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048d2:	2303      	movs	r3, #3
 80048d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80048d6:	2304      	movs	r3, #4
 80048d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048da:	f107 0314 	add.w	r3, r7, #20
 80048de:	4619      	mov	r1, r3
 80048e0:	480c      	ldr	r0, [pc, #48]	@ (8004914 <HAL_I2C_MspInit+0x8c>)
 80048e2:	f001 f855 	bl	8005990 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80048e6:	2300      	movs	r3, #0
 80048e8:	60fb      	str	r3, [r7, #12]
 80048ea:	4b09      	ldr	r3, [pc, #36]	@ (8004910 <HAL_I2C_MspInit+0x88>)
 80048ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ee:	4a08      	ldr	r2, [pc, #32]	@ (8004910 <HAL_I2C_MspInit+0x88>)
 80048f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80048f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80048f6:	4b06      	ldr	r3, [pc, #24]	@ (8004910 <HAL_I2C_MspInit+0x88>)
 80048f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048fe:	60fb      	str	r3, [r7, #12]
 8004900:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004902:	bf00      	nop
 8004904:	3728      	adds	r7, #40	@ 0x28
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	40005400 	.word	0x40005400
 8004910:	40023800 	.word	0x40023800
 8004914:	40020400 	.word	0x40020400

08004918 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a22      	ldr	r2, [pc, #136]	@ (80049b0 <HAL_TIM_Base_MspInit+0x98>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d13d      	bne.n	80049a6 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800492a:	2300      	movs	r3, #0
 800492c:	60fb      	str	r3, [r7, #12]
 800492e:	4b21      	ldr	r3, [pc, #132]	@ (80049b4 <HAL_TIM_Base_MspInit+0x9c>)
 8004930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004932:	4a20      	ldr	r2, [pc, #128]	@ (80049b4 <HAL_TIM_Base_MspInit+0x9c>)
 8004934:	f043 0301 	orr.w	r3, r3, #1
 8004938:	6453      	str	r3, [r2, #68]	@ 0x44
 800493a:	4b1e      	ldr	r3, [pc, #120]	@ (80049b4 <HAL_TIM_Base_MspInit+0x9c>)
 800493c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	60fb      	str	r3, [r7, #12]
 8004944:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8004946:	4b1c      	ldr	r3, [pc, #112]	@ (80049b8 <HAL_TIM_Base_MspInit+0xa0>)
 8004948:	4a1c      	ldr	r2, [pc, #112]	@ (80049bc <HAL_TIM_Base_MspInit+0xa4>)
 800494a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 800494c:	4b1a      	ldr	r3, [pc, #104]	@ (80049b8 <HAL_TIM_Base_MspInit+0xa0>)
 800494e:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8004952:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004954:	4b18      	ldr	r3, [pc, #96]	@ (80049b8 <HAL_TIM_Base_MspInit+0xa0>)
 8004956:	2200      	movs	r2, #0
 8004958:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800495a:	4b17      	ldr	r3, [pc, #92]	@ (80049b8 <HAL_TIM_Base_MspInit+0xa0>)
 800495c:	2200      	movs	r2, #0
 800495e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8004960:	4b15      	ldr	r3, [pc, #84]	@ (80049b8 <HAL_TIM_Base_MspInit+0xa0>)
 8004962:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004966:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004968:	4b13      	ldr	r3, [pc, #76]	@ (80049b8 <HAL_TIM_Base_MspInit+0xa0>)
 800496a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800496e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004970:	4b11      	ldr	r3, [pc, #68]	@ (80049b8 <HAL_TIM_Base_MspInit+0xa0>)
 8004972:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004976:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8004978:	4b0f      	ldr	r3, [pc, #60]	@ (80049b8 <HAL_TIM_Base_MspInit+0xa0>)
 800497a:	2200      	movs	r2, #0
 800497c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800497e:	4b0e      	ldr	r3, [pc, #56]	@ (80049b8 <HAL_TIM_Base_MspInit+0xa0>)
 8004980:	2200      	movs	r2, #0
 8004982:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004984:	4b0c      	ldr	r3, [pc, #48]	@ (80049b8 <HAL_TIM_Base_MspInit+0xa0>)
 8004986:	2200      	movs	r2, #0
 8004988:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800498a:	480b      	ldr	r0, [pc, #44]	@ (80049b8 <HAL_TIM_Base_MspInit+0xa0>)
 800498c:	f000 fbfe 	bl	800518c <HAL_DMA_Init>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8004996:	f7fd f9fd 	bl	8001d94 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a06      	ldr	r2, [pc, #24]	@ (80049b8 <HAL_TIM_Base_MspInit+0xa0>)
 800499e:	625a      	str	r2, [r3, #36]	@ 0x24
 80049a0:	4a05      	ldr	r2, [pc, #20]	@ (80049b8 <HAL_TIM_Base_MspInit+0xa0>)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80049a6:	bf00      	nop
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	40010000 	.word	0x40010000
 80049b4:	40023800 	.word	0x40023800
 80049b8:	20000598 	.word	0x20000598
 80049bc:	40026428 	.word	0x40026428

080049c0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b08a      	sub	sp, #40	@ 0x28
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049c8:	f107 0314 	add.w	r3, r7, #20
 80049cc:	2200      	movs	r2, #0
 80049ce:	601a      	str	r2, [r3, #0]
 80049d0:	605a      	str	r2, [r3, #4]
 80049d2:	609a      	str	r2, [r3, #8]
 80049d4:	60da      	str	r2, [r3, #12]
 80049d6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049e0:	d133      	bne.n	8004a4a <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80049e2:	2300      	movs	r3, #0
 80049e4:	613b      	str	r3, [r7, #16]
 80049e6:	4b1b      	ldr	r3, [pc, #108]	@ (8004a54 <HAL_TIM_Encoder_MspInit+0x94>)
 80049e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ea:	4a1a      	ldr	r2, [pc, #104]	@ (8004a54 <HAL_TIM_Encoder_MspInit+0x94>)
 80049ec:	f043 0301 	orr.w	r3, r3, #1
 80049f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80049f2:	4b18      	ldr	r3, [pc, #96]	@ (8004a54 <HAL_TIM_Encoder_MspInit+0x94>)
 80049f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	613b      	str	r3, [r7, #16]
 80049fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049fe:	2300      	movs	r3, #0
 8004a00:	60fb      	str	r3, [r7, #12]
 8004a02:	4b14      	ldr	r3, [pc, #80]	@ (8004a54 <HAL_TIM_Encoder_MspInit+0x94>)
 8004a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a06:	4a13      	ldr	r2, [pc, #76]	@ (8004a54 <HAL_TIM_Encoder_MspInit+0x94>)
 8004a08:	f043 0301 	orr.w	r3, r3, #1
 8004a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a0e:	4b11      	ldr	r3, [pc, #68]	@ (8004a54 <HAL_TIM_Encoder_MspInit+0x94>)
 8004a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	60fb      	str	r3, [r7, #12]
 8004a18:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a1e:	2302      	movs	r3, #2
 8004a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a22:	2300      	movs	r3, #0
 8004a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a26:	2300      	movs	r3, #0
 8004a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a2e:	f107 0314 	add.w	r3, r7, #20
 8004a32:	4619      	mov	r1, r3
 8004a34:	4808      	ldr	r0, [pc, #32]	@ (8004a58 <HAL_TIM_Encoder_MspInit+0x98>)
 8004a36:	f000 ffab 	bl	8005990 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	201c      	movs	r0, #28
 8004a40:	f000 fb6d 	bl	800511e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004a44:	201c      	movs	r0, #28
 8004a46:	f000 fb86 	bl	8005156 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004a4a:	bf00      	nop
 8004a4c:	3728      	adds	r7, #40	@ 0x28
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	40023800 	.word	0x40023800
 8004a58:	40020000 	.word	0x40020000

08004a5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b088      	sub	sp, #32
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a64:	f107 030c 	add.w	r3, r7, #12
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]
 8004a6c:	605a      	str	r2, [r3, #4]
 8004a6e:	609a      	str	r2, [r3, #8]
 8004a70:	60da      	str	r2, [r3, #12]
 8004a72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a12      	ldr	r2, [pc, #72]	@ (8004ac4 <HAL_TIM_MspPostInit+0x68>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d11e      	bne.n	8004abc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004a7e:	2300      	movs	r3, #0
 8004a80:	60bb      	str	r3, [r7, #8]
 8004a82:	4b11      	ldr	r3, [pc, #68]	@ (8004ac8 <HAL_TIM_MspPostInit+0x6c>)
 8004a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a86:	4a10      	ldr	r2, [pc, #64]	@ (8004ac8 <HAL_TIM_MspPostInit+0x6c>)
 8004a88:	f043 0310 	orr.w	r3, r3, #16
 8004a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8004ac8 <HAL_TIM_MspPostInit+0x6c>)
 8004a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a92:	f003 0310 	and.w	r3, r3, #16
 8004a96:	60bb      	str	r3, [r7, #8]
 8004a98:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004a9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004a9e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004aac:	2301      	movs	r3, #1
 8004aae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ab0:	f107 030c 	add.w	r3, r7, #12
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	4805      	ldr	r0, [pc, #20]	@ (8004acc <HAL_TIM_MspPostInit+0x70>)
 8004ab8:	f000 ff6a 	bl	8005990 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004abc:	bf00      	nop
 8004abe:	3720      	adds	r7, #32
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	40010000 	.word	0x40010000
 8004ac8:	40023800 	.word	0x40023800
 8004acc:	40021000 	.word	0x40021000

08004ad0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08a      	sub	sp, #40	@ 0x28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ad8:	f107 0314 	add.w	r3, r7, #20
 8004adc:	2200      	movs	r2, #0
 8004ade:	601a      	str	r2, [r3, #0]
 8004ae0:	605a      	str	r2, [r3, #4]
 8004ae2:	609a      	str	r2, [r3, #8]
 8004ae4:	60da      	str	r2, [r3, #12]
 8004ae6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a4c      	ldr	r2, [pc, #304]	@ (8004c20 <HAL_UART_MspInit+0x150>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	f040 8092 	bne.w	8004c18 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004af4:	2300      	movs	r3, #0
 8004af6:	613b      	str	r3, [r7, #16]
 8004af8:	4b4a      	ldr	r3, [pc, #296]	@ (8004c24 <HAL_UART_MspInit+0x154>)
 8004afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afc:	4a49      	ldr	r2, [pc, #292]	@ (8004c24 <HAL_UART_MspInit+0x154>)
 8004afe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b02:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b04:	4b47      	ldr	r3, [pc, #284]	@ (8004c24 <HAL_UART_MspInit+0x154>)
 8004b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b0c:	613b      	str	r3, [r7, #16]
 8004b0e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b10:	2300      	movs	r3, #0
 8004b12:	60fb      	str	r3, [r7, #12]
 8004b14:	4b43      	ldr	r3, [pc, #268]	@ (8004c24 <HAL_UART_MspInit+0x154>)
 8004b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b18:	4a42      	ldr	r2, [pc, #264]	@ (8004c24 <HAL_UART_MspInit+0x154>)
 8004b1a:	f043 0301 	orr.w	r3, r3, #1
 8004b1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b20:	4b40      	ldr	r3, [pc, #256]	@ (8004c24 <HAL_UART_MspInit+0x154>)
 8004b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	60fb      	str	r3, [r7, #12]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004b2c:	230c      	movs	r3, #12
 8004b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b30:	2302      	movs	r3, #2
 8004b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b34:	2300      	movs	r3, #0
 8004b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004b3c:	2307      	movs	r3, #7
 8004b3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b40:	f107 0314 	add.w	r3, r7, #20
 8004b44:	4619      	mov	r1, r3
 8004b46:	4838      	ldr	r0, [pc, #224]	@ (8004c28 <HAL_UART_MspInit+0x158>)
 8004b48:	f000 ff22 	bl	8005990 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004b4c:	4b37      	ldr	r3, [pc, #220]	@ (8004c2c <HAL_UART_MspInit+0x15c>)
 8004b4e:	4a38      	ldr	r2, [pc, #224]	@ (8004c30 <HAL_UART_MspInit+0x160>)
 8004b50:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004b52:	4b36      	ldr	r3, [pc, #216]	@ (8004c2c <HAL_UART_MspInit+0x15c>)
 8004b54:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004b58:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b5a:	4b34      	ldr	r3, [pc, #208]	@ (8004c2c <HAL_UART_MspInit+0x15c>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b60:	4b32      	ldr	r3, [pc, #200]	@ (8004c2c <HAL_UART_MspInit+0x15c>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004b66:	4b31      	ldr	r3, [pc, #196]	@ (8004c2c <HAL_UART_MspInit+0x15c>)
 8004b68:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004b6c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b6e:	4b2f      	ldr	r3, [pc, #188]	@ (8004c2c <HAL_UART_MspInit+0x15c>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b74:	4b2d      	ldr	r3, [pc, #180]	@ (8004c2c <HAL_UART_MspInit+0x15c>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004b7a:	4b2c      	ldr	r3, [pc, #176]	@ (8004c2c <HAL_UART_MspInit+0x15c>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004b80:	4b2a      	ldr	r3, [pc, #168]	@ (8004c2c <HAL_UART_MspInit+0x15c>)
 8004b82:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004b86:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004b88:	4b28      	ldr	r3, [pc, #160]	@ (8004c2c <HAL_UART_MspInit+0x15c>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004b8e:	4827      	ldr	r0, [pc, #156]	@ (8004c2c <HAL_UART_MspInit+0x15c>)
 8004b90:	f000 fafc 	bl	800518c <HAL_DMA_Init>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8004b9a:	f7fd f8fb 	bl	8001d94 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a22      	ldr	r2, [pc, #136]	@ (8004c2c <HAL_UART_MspInit+0x15c>)
 8004ba2:	639a      	str	r2, [r3, #56]	@ 0x38
 8004ba4:	4a21      	ldr	r2, [pc, #132]	@ (8004c2c <HAL_UART_MspInit+0x15c>)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004baa:	4b22      	ldr	r3, [pc, #136]	@ (8004c34 <HAL_UART_MspInit+0x164>)
 8004bac:	4a22      	ldr	r2, [pc, #136]	@ (8004c38 <HAL_UART_MspInit+0x168>)
 8004bae:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004bb0:	4b20      	ldr	r3, [pc, #128]	@ (8004c34 <HAL_UART_MspInit+0x164>)
 8004bb2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004bb6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004bb8:	4b1e      	ldr	r3, [pc, #120]	@ (8004c34 <HAL_UART_MspInit+0x164>)
 8004bba:	2240      	movs	r2, #64	@ 0x40
 8004bbc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bbe:	4b1d      	ldr	r3, [pc, #116]	@ (8004c34 <HAL_UART_MspInit+0x164>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8004c34 <HAL_UART_MspInit+0x164>)
 8004bc6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004bca:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004bcc:	4b19      	ldr	r3, [pc, #100]	@ (8004c34 <HAL_UART_MspInit+0x164>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004bd2:	4b18      	ldr	r3, [pc, #96]	@ (8004c34 <HAL_UART_MspInit+0x164>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004bd8:	4b16      	ldr	r3, [pc, #88]	@ (8004c34 <HAL_UART_MspInit+0x164>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004bde:	4b15      	ldr	r3, [pc, #84]	@ (8004c34 <HAL_UART_MspInit+0x164>)
 8004be0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004be4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004be6:	4b13      	ldr	r3, [pc, #76]	@ (8004c34 <HAL_UART_MspInit+0x164>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004bec:	4811      	ldr	r0, [pc, #68]	@ (8004c34 <HAL_UART_MspInit+0x164>)
 8004bee:	f000 facd 	bl	800518c <HAL_DMA_Init>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d001      	beq.n	8004bfc <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8004bf8:	f7fd f8cc 	bl	8001d94 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a0d      	ldr	r2, [pc, #52]	@ (8004c34 <HAL_UART_MspInit+0x164>)
 8004c00:	635a      	str	r2, [r3, #52]	@ 0x34
 8004c02:	4a0c      	ldr	r2, [pc, #48]	@ (8004c34 <HAL_UART_MspInit+0x164>)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004c08:	2200      	movs	r2, #0
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	2026      	movs	r0, #38	@ 0x26
 8004c0e:	f000 fa86 	bl	800511e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004c12:	2026      	movs	r0, #38	@ 0x26
 8004c14:	f000 fa9f 	bl	8005156 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004c18:	bf00      	nop
 8004c1a:	3728      	adds	r7, #40	@ 0x28
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	40004400 	.word	0x40004400
 8004c24:	40023800 	.word	0x40023800
 8004c28:	40020000 	.word	0x40020000
 8004c2c:	2000063c 	.word	0x2000063c
 8004c30:	40026088 	.word	0x40026088
 8004c34:	2000069c 	.word	0x2000069c
 8004c38:	400260a0 	.word	0x400260a0

08004c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004c40:	bf00      	nop
 8004c42:	e7fd      	b.n	8004c40 <NMI_Handler+0x4>

08004c44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c44:	b480      	push	{r7}
 8004c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c48:	bf00      	nop
 8004c4a:	e7fd      	b.n	8004c48 <HardFault_Handler+0x4>

08004c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c50:	bf00      	nop
 8004c52:	e7fd      	b.n	8004c50 <MemManage_Handler+0x4>

08004c54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c54:	b480      	push	{r7}
 8004c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c58:	bf00      	nop
 8004c5a:	e7fd      	b.n	8004c58 <BusFault_Handler+0x4>

08004c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c60:	bf00      	nop
 8004c62:	e7fd      	b.n	8004c60 <UsageFault_Handler+0x4>

08004c64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004c64:	b480      	push	{r7}
 8004c66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c68:	bf00      	nop
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c72:	b480      	push	{r7}
 8004c74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c76:	bf00      	nop
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c80:	b480      	push	{r7}
 8004c82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c84:	bf00      	nop
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c92:	f000 f925 	bl	8004ee0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c96:	bf00      	nop
 8004c98:	bd80      	pop	{r7, pc}
	...

08004c9c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004ca0:	4802      	ldr	r0, [pc, #8]	@ (8004cac <DMA1_Stream5_IRQHandler+0x10>)
 8004ca2:	f000 fc0b 	bl	80054bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004ca6:	bf00      	nop
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	2000063c 	.word	0x2000063c

08004cb0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004cb4:	4802      	ldr	r0, [pc, #8]	@ (8004cc0 <DMA1_Stream6_IRQHandler+0x10>)
 8004cb6:	f000 fc01 	bl	80054bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004cba:	bf00      	nop
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	2000069c 	.word	0x2000069c

08004cc4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004cc8:	4802      	ldr	r0, [pc, #8]	@ (8004cd4 <TIM2_IRQHandler+0x10>)
 8004cca:	f002 fdbd 	bl	8007848 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004cce:	bf00      	nop
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	20000550 	.word	0x20000550

08004cd8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004cdc:	4802      	ldr	r0, [pc, #8]	@ (8004ce8 <USART2_IRQHandler+0x10>)
 8004cde:	f003 fd35 	bl	800874c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004ce2:	bf00      	nop
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	200005f8 	.word	0x200005f8

08004cec <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8004cf0:	4802      	ldr	r0, [pc, #8]	@ (8004cfc <DMA2_Stream1_IRQHandler+0x10>)
 8004cf2:	f000 fbe3 	bl	80054bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004cf6:	bf00      	nop
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	20000598 	.word	0x20000598

08004d00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004d08:	4a14      	ldr	r2, [pc, #80]	@ (8004d5c <_sbrk+0x5c>)
 8004d0a:	4b15      	ldr	r3, [pc, #84]	@ (8004d60 <_sbrk+0x60>)
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004d14:	4b13      	ldr	r3, [pc, #76]	@ (8004d64 <_sbrk+0x64>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d102      	bne.n	8004d22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004d1c:	4b11      	ldr	r3, [pc, #68]	@ (8004d64 <_sbrk+0x64>)
 8004d1e:	4a12      	ldr	r2, [pc, #72]	@ (8004d68 <_sbrk+0x68>)
 8004d20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d22:	4b10      	ldr	r3, [pc, #64]	@ (8004d64 <_sbrk+0x64>)
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4413      	add	r3, r2
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d207      	bcs.n	8004d40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004d30:	f004 fef0 	bl	8009b14 <__errno>
 8004d34:	4603      	mov	r3, r0
 8004d36:	220c      	movs	r2, #12
 8004d38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004d3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004d3e:	e009      	b.n	8004d54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004d40:	4b08      	ldr	r3, [pc, #32]	@ (8004d64 <_sbrk+0x64>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004d46:	4b07      	ldr	r3, [pc, #28]	@ (8004d64 <_sbrk+0x64>)
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	4a05      	ldr	r2, [pc, #20]	@ (8004d64 <_sbrk+0x64>)
 8004d50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004d52:	68fb      	ldr	r3, [r7, #12]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3718      	adds	r7, #24
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	20020000 	.word	0x20020000
 8004d60:	00000400 	.word	0x00000400
 8004d64:	20000d94 	.word	0x20000d94
 8004d68:	20000ee8 	.word	0x20000ee8

08004d6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d70:	4b06      	ldr	r3, [pc, #24]	@ (8004d8c <SystemInit+0x20>)
 8004d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d76:	4a05      	ldr	r2, [pc, #20]	@ (8004d8c <SystemInit+0x20>)
 8004d78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004d7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d80:	bf00      	nop
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	e000ed00 	.word	0xe000ed00

08004d90 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	0a5a      	lsrs	r2, r3, #9
 8004da0:	490f      	ldr	r1, [pc, #60]	@ (8004de0 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8004da2:	fba1 1202 	umull	r1, r2, r1, r2
 8004da6:	09d2      	lsrs	r2, r2, #7
 8004da8:	490e      	ldr	r1, [pc, #56]	@ (8004de4 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8004daa:	fb01 f202 	mul.w	r2, r1, r2
 8004dae:	1a9b      	subs	r3, r3, r2
 8004db0:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	0a5b      	lsrs	r3, r3, #9
 8004db8:	4a09      	ldr	r2, [pc, #36]	@ (8004de0 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8004dba:	fba2 2303 	umull	r2, r3, r2, r3
 8004dbe:	09db      	lsrs	r3, r3, #7
 8004dc0:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	441a      	add	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	601a      	str	r2, [r3, #0]
}
 8004dd4:	bf00      	nop
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	00044b83 	.word	0x00044b83
 8004de4:	3b9aca00 	.word	0x3b9aca00

08004de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004de8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004e20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004dec:	480d      	ldr	r0, [pc, #52]	@ (8004e24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004dee:	490e      	ldr	r1, [pc, #56]	@ (8004e28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004df0:	4a0e      	ldr	r2, [pc, #56]	@ (8004e2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004df4:	e002      	b.n	8004dfc <LoopCopyDataInit>

08004df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004dfa:	3304      	adds	r3, #4

08004dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e00:	d3f9      	bcc.n	8004df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e02:	4a0b      	ldr	r2, [pc, #44]	@ (8004e30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004e04:	4c0b      	ldr	r4, [pc, #44]	@ (8004e34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e08:	e001      	b.n	8004e0e <LoopFillZerobss>

08004e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e0c:	3204      	adds	r2, #4

08004e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e10:	d3fb      	bcc.n	8004e0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004e12:	f7ff ffab 	bl	8004d6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004e16:	f004 fe83 	bl	8009b20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e1a:	f7fc fd47 	bl	80018ac <main>
  bx  lr    
 8004e1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004e20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e28:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8004e2c:	0800a0e4 	.word	0x0800a0e4
  ldr r2, =_sbss
 8004e30:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8004e34:	20000ee4 	.word	0x20000ee4

08004e38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004e38:	e7fe      	b.n	8004e38 <ADC_IRQHandler>
	...

08004e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004e40:	4b0e      	ldr	r3, [pc, #56]	@ (8004e7c <HAL_Init+0x40>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a0d      	ldr	r2, [pc, #52]	@ (8004e7c <HAL_Init+0x40>)
 8004e46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8004e7c <HAL_Init+0x40>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a0a      	ldr	r2, [pc, #40]	@ (8004e7c <HAL_Init+0x40>)
 8004e52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004e56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e58:	4b08      	ldr	r3, [pc, #32]	@ (8004e7c <HAL_Init+0x40>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a07      	ldr	r2, [pc, #28]	@ (8004e7c <HAL_Init+0x40>)
 8004e5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e64:	2003      	movs	r0, #3
 8004e66:	f000 f94f 	bl	8005108 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004e6a:	2000      	movs	r0, #0
 8004e6c:	f000 f808 	bl	8004e80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e70:	f7ff fce2 	bl	8004838 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	40023c00 	.word	0x40023c00

08004e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e88:	4b12      	ldr	r3, [pc, #72]	@ (8004ed4 <HAL_InitTick+0x54>)
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	4b12      	ldr	r3, [pc, #72]	@ (8004ed8 <HAL_InitTick+0x58>)
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	4619      	mov	r1, r3
 8004e92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004e96:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 f967 	bl	8005172 <HAL_SYSTICK_Config>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e00e      	b.n	8004ecc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b0f      	cmp	r3, #15
 8004eb2:	d80a      	bhi.n	8004eca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	6879      	ldr	r1, [r7, #4]
 8004eb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ebc:	f000 f92f 	bl	800511e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ec0:	4a06      	ldr	r2, [pc, #24]	@ (8004edc <HAL_InitTick+0x5c>)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	e000      	b.n	8004ecc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3708      	adds	r7, #8
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	20000014 	.word	0x20000014
 8004ed8:	2000001c 	.word	0x2000001c
 8004edc:	20000018 	.word	0x20000018

08004ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ee4:	4b06      	ldr	r3, [pc, #24]	@ (8004f00 <HAL_IncTick+0x20>)
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	461a      	mov	r2, r3
 8004eea:	4b06      	ldr	r3, [pc, #24]	@ (8004f04 <HAL_IncTick+0x24>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4413      	add	r3, r2
 8004ef0:	4a04      	ldr	r2, [pc, #16]	@ (8004f04 <HAL_IncTick+0x24>)
 8004ef2:	6013      	str	r3, [r2, #0]
}
 8004ef4:	bf00      	nop
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	2000001c 	.word	0x2000001c
 8004f04:	20000d98 	.word	0x20000d98

08004f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8004f0c:	4b03      	ldr	r3, [pc, #12]	@ (8004f1c <HAL_GetTick+0x14>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	20000d98 	.word	0x20000d98

08004f20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f28:	f7ff ffee 	bl	8004f08 <HAL_GetTick>
 8004f2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f38:	d005      	beq.n	8004f46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8004f64 <HAL_Delay+0x44>)
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4413      	add	r3, r2
 8004f44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004f46:	bf00      	nop
 8004f48:	f7ff ffde 	bl	8004f08 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d8f7      	bhi.n	8004f48 <HAL_Delay+0x28>
  {
  }
}
 8004f58:	bf00      	nop
 8004f5a:	bf00      	nop
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	2000001c 	.word	0x2000001c

08004f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f003 0307 	and.w	r3, r3, #7
 8004f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f78:	4b0c      	ldr	r3, [pc, #48]	@ (8004fac <__NVIC_SetPriorityGrouping+0x44>)
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004f84:	4013      	ands	r3, r2
 8004f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004f94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f9a:	4a04      	ldr	r2, [pc, #16]	@ (8004fac <__NVIC_SetPriorityGrouping+0x44>)
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	60d3      	str	r3, [r2, #12]
}
 8004fa0:	bf00      	nop
 8004fa2:	3714      	adds	r7, #20
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr
 8004fac:	e000ed00 	.word	0xe000ed00

08004fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fb4:	4b04      	ldr	r3, [pc, #16]	@ (8004fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	0a1b      	lsrs	r3, r3, #8
 8004fba:	f003 0307 	and.w	r3, r3, #7
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr
 8004fc8:	e000ed00 	.word	0xe000ed00

08004fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	db0b      	blt.n	8004ff6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fde:	79fb      	ldrb	r3, [r7, #7]
 8004fe0:	f003 021f 	and.w	r2, r3, #31
 8004fe4:	4907      	ldr	r1, [pc, #28]	@ (8005004 <__NVIC_EnableIRQ+0x38>)
 8004fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fea:	095b      	lsrs	r3, r3, #5
 8004fec:	2001      	movs	r0, #1
 8004fee:	fa00 f202 	lsl.w	r2, r0, r2
 8004ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004ff6:	bf00      	nop
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	e000e100 	.word	0xe000e100

08005008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	4603      	mov	r3, r0
 8005010:	6039      	str	r1, [r7, #0]
 8005012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005018:	2b00      	cmp	r3, #0
 800501a:	db0a      	blt.n	8005032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	b2da      	uxtb	r2, r3
 8005020:	490c      	ldr	r1, [pc, #48]	@ (8005054 <__NVIC_SetPriority+0x4c>)
 8005022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005026:	0112      	lsls	r2, r2, #4
 8005028:	b2d2      	uxtb	r2, r2
 800502a:	440b      	add	r3, r1
 800502c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005030:	e00a      	b.n	8005048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	b2da      	uxtb	r2, r3
 8005036:	4908      	ldr	r1, [pc, #32]	@ (8005058 <__NVIC_SetPriority+0x50>)
 8005038:	79fb      	ldrb	r3, [r7, #7]
 800503a:	f003 030f 	and.w	r3, r3, #15
 800503e:	3b04      	subs	r3, #4
 8005040:	0112      	lsls	r2, r2, #4
 8005042:	b2d2      	uxtb	r2, r2
 8005044:	440b      	add	r3, r1
 8005046:	761a      	strb	r2, [r3, #24]
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr
 8005054:	e000e100 	.word	0xe000e100
 8005058:	e000ed00 	.word	0xe000ed00

0800505c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800505c:	b480      	push	{r7}
 800505e:	b089      	sub	sp, #36	@ 0x24
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f003 0307 	and.w	r3, r3, #7
 800506e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	f1c3 0307 	rsb	r3, r3, #7
 8005076:	2b04      	cmp	r3, #4
 8005078:	bf28      	it	cs
 800507a:	2304      	movcs	r3, #4
 800507c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	3304      	adds	r3, #4
 8005082:	2b06      	cmp	r3, #6
 8005084:	d902      	bls.n	800508c <NVIC_EncodePriority+0x30>
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	3b03      	subs	r3, #3
 800508a:	e000      	b.n	800508e <NVIC_EncodePriority+0x32>
 800508c:	2300      	movs	r3, #0
 800508e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005090:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	fa02 f303 	lsl.w	r3, r2, r3
 800509a:	43da      	mvns	r2, r3
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	401a      	ands	r2, r3
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	fa01 f303 	lsl.w	r3, r1, r3
 80050ae:	43d9      	mvns	r1, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050b4:	4313      	orrs	r3, r2
         );
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3724      	adds	r7, #36	@ 0x24
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
	...

080050c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	3b01      	subs	r3, #1
 80050d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050d4:	d301      	bcc.n	80050da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050d6:	2301      	movs	r3, #1
 80050d8:	e00f      	b.n	80050fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050da:	4a0a      	ldr	r2, [pc, #40]	@ (8005104 <SysTick_Config+0x40>)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	3b01      	subs	r3, #1
 80050e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050e2:	210f      	movs	r1, #15
 80050e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80050e8:	f7ff ff8e 	bl	8005008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050ec:	4b05      	ldr	r3, [pc, #20]	@ (8005104 <SysTick_Config+0x40>)
 80050ee:	2200      	movs	r2, #0
 80050f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050f2:	4b04      	ldr	r3, [pc, #16]	@ (8005104 <SysTick_Config+0x40>)
 80050f4:	2207      	movs	r2, #7
 80050f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3708      	adds	r7, #8
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	e000e010 	.word	0xe000e010

08005108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f7ff ff29 	bl	8004f68 <__NVIC_SetPriorityGrouping>
}
 8005116:	bf00      	nop
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800511e:	b580      	push	{r7, lr}
 8005120:	b086      	sub	sp, #24
 8005122:	af00      	add	r7, sp, #0
 8005124:	4603      	mov	r3, r0
 8005126:	60b9      	str	r1, [r7, #8]
 8005128:	607a      	str	r2, [r7, #4]
 800512a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800512c:	2300      	movs	r3, #0
 800512e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005130:	f7ff ff3e 	bl	8004fb0 <__NVIC_GetPriorityGrouping>
 8005134:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	68b9      	ldr	r1, [r7, #8]
 800513a:	6978      	ldr	r0, [r7, #20]
 800513c:	f7ff ff8e 	bl	800505c <NVIC_EncodePriority>
 8005140:	4602      	mov	r2, r0
 8005142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005146:	4611      	mov	r1, r2
 8005148:	4618      	mov	r0, r3
 800514a:	f7ff ff5d 	bl	8005008 <__NVIC_SetPriority>
}
 800514e:	bf00      	nop
 8005150:	3718      	adds	r7, #24
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b082      	sub	sp, #8
 800515a:	af00      	add	r7, sp, #0
 800515c:	4603      	mov	r3, r0
 800515e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005164:	4618      	mov	r0, r3
 8005166:	f7ff ff31 	bl	8004fcc <__NVIC_EnableIRQ>
}
 800516a:	bf00      	nop
 800516c:	3708      	adds	r7, #8
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b082      	sub	sp, #8
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7ff ffa2 	bl	80050c4 <SysTick_Config>
 8005180:	4603      	mov	r3, r0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
	...

0800518c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005198:	f7ff feb6 	bl	8004f08 <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d101      	bne.n	80051a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e099      	b.n	80052dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2202      	movs	r2, #2
 80051ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 0201 	bic.w	r2, r2, #1
 80051c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051c8:	e00f      	b.n	80051ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051ca:	f7ff fe9d 	bl	8004f08 <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	2b05      	cmp	r3, #5
 80051d6:	d908      	bls.n	80051ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2220      	movs	r2, #32
 80051dc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2203      	movs	r2, #3
 80051e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e078      	b.n	80052dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0301 	and.w	r3, r3, #1
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1e8      	bne.n	80051ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	4b38      	ldr	r3, [pc, #224]	@ (80052e4 <HAL_DMA_Init+0x158>)
 8005204:	4013      	ands	r3, r2
 8005206:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005216:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005222:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800522e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a1b      	ldr	r3, [r3, #32]
 8005234:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	4313      	orrs	r3, r2
 800523a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005240:	2b04      	cmp	r3, #4
 8005242:	d107      	bne.n	8005254 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800524c:	4313      	orrs	r3, r2
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	4313      	orrs	r3, r2
 8005252:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	f023 0307 	bic.w	r3, r3, #7
 800526a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	4313      	orrs	r3, r2
 8005274:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800527a:	2b04      	cmp	r3, #4
 800527c:	d117      	bne.n	80052ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	4313      	orrs	r3, r2
 8005286:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00e      	beq.n	80052ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 fb01 	bl	8005898 <DMA_CheckFifoParam>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d008      	beq.n	80052ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2240      	movs	r2, #64	@ 0x40
 80052a0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80052aa:	2301      	movs	r3, #1
 80052ac:	e016      	b.n	80052dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 fab8 	bl	800582c <DMA_CalcBaseAndBitshift>
 80052bc:	4603      	mov	r3, r0
 80052be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052c4:	223f      	movs	r2, #63	@ 0x3f
 80052c6:	409a      	lsls	r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3718      	adds	r7, #24
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	f010803f 	.word	0xf010803f

080052e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b086      	sub	sp, #24
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
 80052f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052f6:	2300      	movs	r3, #0
 80052f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005306:	2b01      	cmp	r3, #1
 8005308:	d101      	bne.n	800530e <HAL_DMA_Start_IT+0x26>
 800530a:	2302      	movs	r3, #2
 800530c:	e040      	b.n	8005390 <HAL_DMA_Start_IT+0xa8>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b01      	cmp	r3, #1
 8005320:	d12f      	bne.n	8005382 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2202      	movs	r2, #2
 8005326:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	68b9      	ldr	r1, [r7, #8]
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f000 fa4a 	bl	80057d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005340:	223f      	movs	r2, #63	@ 0x3f
 8005342:	409a      	lsls	r2, r3
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f042 0216 	orr.w	r2, r2, #22
 8005356:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800535c:	2b00      	cmp	r3, #0
 800535e:	d007      	beq.n	8005370 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f042 0208 	orr.w	r2, r2, #8
 800536e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f042 0201 	orr.w	r2, r2, #1
 800537e:	601a      	str	r2, [r3, #0]
 8005380:	e005      	b.n	800538e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800538a:	2302      	movs	r3, #2
 800538c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800538e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005390:	4618      	mov	r0, r3
 8005392:	3718      	adds	r7, #24
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80053a6:	f7ff fdaf 	bl	8004f08 <HAL_GetTick>
 80053aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d008      	beq.n	80053ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2280      	movs	r2, #128	@ 0x80
 80053bc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e052      	b.n	8005470 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f022 0216 	bic.w	r2, r2, #22
 80053d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	695a      	ldr	r2, [r3, #20]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80053e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d103      	bne.n	80053fa <HAL_DMA_Abort+0x62>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d007      	beq.n	800540a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f022 0208 	bic.w	r2, r2, #8
 8005408:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f022 0201 	bic.w	r2, r2, #1
 8005418:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800541a:	e013      	b.n	8005444 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800541c:	f7ff fd74 	bl	8004f08 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	2b05      	cmp	r3, #5
 8005428:	d90c      	bls.n	8005444 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2220      	movs	r2, #32
 800542e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2203      	movs	r2, #3
 8005434:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e015      	b.n	8005470 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1e4      	bne.n	800541c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005456:	223f      	movs	r2, #63	@ 0x3f
 8005458:	409a      	lsls	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b02      	cmp	r3, #2
 800548a:	d004      	beq.n	8005496 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2280      	movs	r2, #128	@ 0x80
 8005490:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e00c      	b.n	80054b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2205      	movs	r2, #5
 800549a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f022 0201 	bic.w	r2, r2, #1
 80054ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b086      	sub	sp, #24
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80054c4:	2300      	movs	r3, #0
 80054c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80054c8:	4b8e      	ldr	r3, [pc, #568]	@ (8005704 <HAL_DMA_IRQHandler+0x248>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a8e      	ldr	r2, [pc, #568]	@ (8005708 <HAL_DMA_IRQHandler+0x24c>)
 80054ce:	fba2 2303 	umull	r2, r3, r2, r3
 80054d2:	0a9b      	lsrs	r3, r3, #10
 80054d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054e6:	2208      	movs	r2, #8
 80054e8:	409a      	lsls	r2, r3
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	4013      	ands	r3, r2
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d01a      	beq.n	8005528 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0304 	and.w	r3, r3, #4
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d013      	beq.n	8005528 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f022 0204 	bic.w	r2, r2, #4
 800550e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005514:	2208      	movs	r2, #8
 8005516:	409a      	lsls	r2, r3
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005520:	f043 0201 	orr.w	r2, r3, #1
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800552c:	2201      	movs	r2, #1
 800552e:	409a      	lsls	r2, r3
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	4013      	ands	r3, r2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d012      	beq.n	800555e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00b      	beq.n	800555e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800554a:	2201      	movs	r2, #1
 800554c:	409a      	lsls	r2, r3
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005556:	f043 0202 	orr.w	r2, r3, #2
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005562:	2204      	movs	r2, #4
 8005564:	409a      	lsls	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	4013      	ands	r3, r2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d012      	beq.n	8005594 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00b      	beq.n	8005594 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005580:	2204      	movs	r2, #4
 8005582:	409a      	lsls	r2, r3
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800558c:	f043 0204 	orr.w	r2, r3, #4
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005598:	2210      	movs	r2, #16
 800559a:	409a      	lsls	r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4013      	ands	r3, r2
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d043      	beq.n	800562c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0308 	and.w	r3, r3, #8
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d03c      	beq.n	800562c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055b6:	2210      	movs	r2, #16
 80055b8:	409a      	lsls	r2, r3
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d018      	beq.n	80055fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d108      	bne.n	80055ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d024      	beq.n	800562c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	4798      	blx	r3
 80055ea:	e01f      	b.n	800562c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d01b      	beq.n	800562c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	4798      	blx	r3
 80055fc:	e016      	b.n	800562c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005608:	2b00      	cmp	r3, #0
 800560a:	d107      	bne.n	800561c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f022 0208 	bic.w	r2, r2, #8
 800561a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005620:	2b00      	cmp	r3, #0
 8005622:	d003      	beq.n	800562c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005630:	2220      	movs	r2, #32
 8005632:	409a      	lsls	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4013      	ands	r3, r2
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 808f 	beq.w	800575c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0310 	and.w	r3, r3, #16
 8005648:	2b00      	cmp	r3, #0
 800564a:	f000 8087 	beq.w	800575c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005652:	2220      	movs	r2, #32
 8005654:	409a      	lsls	r2, r3
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b05      	cmp	r3, #5
 8005664:	d136      	bne.n	80056d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f022 0216 	bic.w	r2, r2, #22
 8005674:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	695a      	ldr	r2, [r3, #20]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005684:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800568a:	2b00      	cmp	r3, #0
 800568c:	d103      	bne.n	8005696 <HAL_DMA_IRQHandler+0x1da>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005692:	2b00      	cmp	r3, #0
 8005694:	d007      	beq.n	80056a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f022 0208 	bic.w	r2, r2, #8
 80056a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056aa:	223f      	movs	r2, #63	@ 0x3f
 80056ac:	409a      	lsls	r2, r3
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d07e      	beq.n	80057c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	4798      	blx	r3
        }
        return;
 80056d2:	e079      	b.n	80057c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d01d      	beq.n	800571e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10d      	bne.n	800570c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d031      	beq.n	800575c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	4798      	blx	r3
 8005700:	e02c      	b.n	800575c <HAL_DMA_IRQHandler+0x2a0>
 8005702:	bf00      	nop
 8005704:	20000014 	.word	0x20000014
 8005708:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005710:	2b00      	cmp	r3, #0
 8005712:	d023      	beq.n	800575c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	4798      	blx	r3
 800571c:	e01e      	b.n	800575c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005728:	2b00      	cmp	r3, #0
 800572a:	d10f      	bne.n	800574c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f022 0210 	bic.w	r2, r2, #16
 800573a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005750:	2b00      	cmp	r3, #0
 8005752:	d003      	beq.n	800575c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005760:	2b00      	cmp	r3, #0
 8005762:	d032      	beq.n	80057ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005768:	f003 0301 	and.w	r3, r3, #1
 800576c:	2b00      	cmp	r3, #0
 800576e:	d022      	beq.n	80057b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2205      	movs	r2, #5
 8005774:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 0201 	bic.w	r2, r2, #1
 8005786:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	3301      	adds	r3, #1
 800578c:	60bb      	str	r3, [r7, #8]
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	429a      	cmp	r2, r3
 8005792:	d307      	bcc.n	80057a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1f2      	bne.n	8005788 <HAL_DMA_IRQHandler+0x2cc>
 80057a2:	e000      	b.n	80057a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80057a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d005      	beq.n	80057ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	4798      	blx	r3
 80057c6:	e000      	b.n	80057ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80057c8:	bf00      	nop
    }
  }
}
 80057ca:	3718      	adds	r7, #24
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
 80057dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80057ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	683a      	ldr	r2, [r7, #0]
 80057f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	2b40      	cmp	r3, #64	@ 0x40
 80057fc:	d108      	bne.n	8005810 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68ba      	ldr	r2, [r7, #8]
 800580c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800580e:	e007      	b.n	8005820 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	60da      	str	r2, [r3, #12]
}
 8005820:	bf00      	nop
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	b2db      	uxtb	r3, r3
 800583a:	3b10      	subs	r3, #16
 800583c:	4a14      	ldr	r2, [pc, #80]	@ (8005890 <DMA_CalcBaseAndBitshift+0x64>)
 800583e:	fba2 2303 	umull	r2, r3, r2, r3
 8005842:	091b      	lsrs	r3, r3, #4
 8005844:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005846:	4a13      	ldr	r2, [pc, #76]	@ (8005894 <DMA_CalcBaseAndBitshift+0x68>)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4413      	add	r3, r2
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	461a      	mov	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2b03      	cmp	r3, #3
 8005858:	d909      	bls.n	800586e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005862:	f023 0303 	bic.w	r3, r3, #3
 8005866:	1d1a      	adds	r2, r3, #4
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	659a      	str	r2, [r3, #88]	@ 0x58
 800586c:	e007      	b.n	800587e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005876:	f023 0303 	bic.w	r3, r3, #3
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005882:	4618      	mov	r0, r3
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	aaaaaaab 	.word	0xaaaaaaab
 8005894:	0800a0c4 	.word	0x0800a0c4

08005898 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058a0:	2300      	movs	r3, #0
 80058a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d11f      	bne.n	80058f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	2b03      	cmp	r3, #3
 80058b6:	d856      	bhi.n	8005966 <DMA_CheckFifoParam+0xce>
 80058b8:	a201      	add	r2, pc, #4	@ (adr r2, 80058c0 <DMA_CheckFifoParam+0x28>)
 80058ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058be:	bf00      	nop
 80058c0:	080058d1 	.word	0x080058d1
 80058c4:	080058e3 	.word	0x080058e3
 80058c8:	080058d1 	.word	0x080058d1
 80058cc:	08005967 	.word	0x08005967
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d046      	beq.n	800596a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058e0:	e043      	b.n	800596a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058e6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80058ea:	d140      	bne.n	800596e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058f0:	e03d      	b.n	800596e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058fa:	d121      	bne.n	8005940 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	2b03      	cmp	r3, #3
 8005900:	d837      	bhi.n	8005972 <DMA_CheckFifoParam+0xda>
 8005902:	a201      	add	r2, pc, #4	@ (adr r2, 8005908 <DMA_CheckFifoParam+0x70>)
 8005904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005908:	08005919 	.word	0x08005919
 800590c:	0800591f 	.word	0x0800591f
 8005910:	08005919 	.word	0x08005919
 8005914:	08005931 	.word	0x08005931
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	73fb      	strb	r3, [r7, #15]
      break;
 800591c:	e030      	b.n	8005980 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005922:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d025      	beq.n	8005976 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800592e:	e022      	b.n	8005976 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005934:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005938:	d11f      	bne.n	800597a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800593e:	e01c      	b.n	800597a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	2b02      	cmp	r3, #2
 8005944:	d903      	bls.n	800594e <DMA_CheckFifoParam+0xb6>
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	2b03      	cmp	r3, #3
 800594a:	d003      	beq.n	8005954 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800594c:	e018      	b.n	8005980 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	73fb      	strb	r3, [r7, #15]
      break;
 8005952:	e015      	b.n	8005980 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005958:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00e      	beq.n	800597e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	73fb      	strb	r3, [r7, #15]
      break;
 8005964:	e00b      	b.n	800597e <DMA_CheckFifoParam+0xe6>
      break;
 8005966:	bf00      	nop
 8005968:	e00a      	b.n	8005980 <DMA_CheckFifoParam+0xe8>
      break;
 800596a:	bf00      	nop
 800596c:	e008      	b.n	8005980 <DMA_CheckFifoParam+0xe8>
      break;
 800596e:	bf00      	nop
 8005970:	e006      	b.n	8005980 <DMA_CheckFifoParam+0xe8>
      break;
 8005972:	bf00      	nop
 8005974:	e004      	b.n	8005980 <DMA_CheckFifoParam+0xe8>
      break;
 8005976:	bf00      	nop
 8005978:	e002      	b.n	8005980 <DMA_CheckFifoParam+0xe8>
      break;   
 800597a:	bf00      	nop
 800597c:	e000      	b.n	8005980 <DMA_CheckFifoParam+0xe8>
      break;
 800597e:	bf00      	nop
    }
  } 
  
  return status; 
 8005980:	7bfb      	ldrb	r3, [r7, #15]
}
 8005982:	4618      	mov	r0, r3
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop

08005990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005990:	b480      	push	{r7}
 8005992:	b089      	sub	sp, #36	@ 0x24
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800599a:	2300      	movs	r3, #0
 800599c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800599e:	2300      	movs	r3, #0
 80059a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059a6:	2300      	movs	r3, #0
 80059a8:	61fb      	str	r3, [r7, #28]
 80059aa:	e16b      	b.n	8005c84 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80059ac:	2201      	movs	r2, #1
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	fa02 f303 	lsl.w	r3, r2, r3
 80059b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	4013      	ands	r3, r2
 80059be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	f040 815a 	bne.w	8005c7e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f003 0303 	and.w	r3, r3, #3
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d005      	beq.n	80059e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d130      	bne.n	8005a44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	005b      	lsls	r3, r3, #1
 80059ec:	2203      	movs	r2, #3
 80059ee:	fa02 f303 	lsl.w	r3, r2, r3
 80059f2:	43db      	mvns	r3, r3
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	4013      	ands	r3, r2
 80059f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	68da      	ldr	r2, [r3, #12]
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	005b      	lsls	r3, r3, #1
 8005a02:	fa02 f303 	lsl.w	r3, r2, r3
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a18:	2201      	movs	r2, #1
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a20:	43db      	mvns	r3, r3
 8005a22:	69ba      	ldr	r2, [r7, #24]
 8005a24:	4013      	ands	r3, r2
 8005a26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	091b      	lsrs	r3, r3, #4
 8005a2e:	f003 0201 	and.w	r2, r3, #1
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	fa02 f303 	lsl.w	r3, r2, r3
 8005a38:	69ba      	ldr	r2, [r7, #24]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f003 0303 	and.w	r3, r3, #3
 8005a4c:	2b03      	cmp	r3, #3
 8005a4e:	d017      	beq.n	8005a80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	005b      	lsls	r3, r3, #1
 8005a5a:	2203      	movs	r2, #3
 8005a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a60:	43db      	mvns	r3, r3
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	4013      	ands	r3, r2
 8005a66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	689a      	ldr	r2, [r3, #8]
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	005b      	lsls	r3, r3, #1
 8005a70:	fa02 f303 	lsl.w	r3, r2, r3
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	69ba      	ldr	r2, [r7, #24]
 8005a7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	f003 0303 	and.w	r3, r3, #3
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d123      	bne.n	8005ad4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	08da      	lsrs	r2, r3, #3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	3208      	adds	r2, #8
 8005a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	f003 0307 	and.w	r3, r3, #7
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	220f      	movs	r2, #15
 8005aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa8:	43db      	mvns	r3, r3
 8005aaa:	69ba      	ldr	r2, [r7, #24]
 8005aac:	4013      	ands	r3, r2
 8005aae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	691a      	ldr	r2, [r3, #16]
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	f003 0307 	and.w	r3, r3, #7
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac0:	69ba      	ldr	r2, [r7, #24]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	08da      	lsrs	r2, r3, #3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	3208      	adds	r2, #8
 8005ace:	69b9      	ldr	r1, [r7, #24]
 8005ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	005b      	lsls	r3, r3, #1
 8005ade:	2203      	movs	r2, #3
 8005ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae4:	43db      	mvns	r3, r3
 8005ae6:	69ba      	ldr	r2, [r7, #24]
 8005ae8:	4013      	ands	r3, r2
 8005aea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f003 0203 	and.w	r2, r3, #3
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	005b      	lsls	r3, r3, #1
 8005af8:	fa02 f303 	lsl.w	r3, r2, r3
 8005afc:	69ba      	ldr	r2, [r7, #24]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	69ba      	ldr	r2, [r7, #24]
 8005b06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f000 80b4 	beq.w	8005c7e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b16:	2300      	movs	r3, #0
 8005b18:	60fb      	str	r3, [r7, #12]
 8005b1a:	4b60      	ldr	r3, [pc, #384]	@ (8005c9c <HAL_GPIO_Init+0x30c>)
 8005b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b1e:	4a5f      	ldr	r2, [pc, #380]	@ (8005c9c <HAL_GPIO_Init+0x30c>)
 8005b20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005b24:	6453      	str	r3, [r2, #68]	@ 0x44
 8005b26:	4b5d      	ldr	r3, [pc, #372]	@ (8005c9c <HAL_GPIO_Init+0x30c>)
 8005b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b2e:	60fb      	str	r3, [r7, #12]
 8005b30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b32:	4a5b      	ldr	r2, [pc, #364]	@ (8005ca0 <HAL_GPIO_Init+0x310>)
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	089b      	lsrs	r3, r3, #2
 8005b38:	3302      	adds	r3, #2
 8005b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	f003 0303 	and.w	r3, r3, #3
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	220f      	movs	r2, #15
 8005b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4e:	43db      	mvns	r3, r3
 8005b50:	69ba      	ldr	r2, [r7, #24]
 8005b52:	4013      	ands	r3, r2
 8005b54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a52      	ldr	r2, [pc, #328]	@ (8005ca4 <HAL_GPIO_Init+0x314>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d02b      	beq.n	8005bb6 <HAL_GPIO_Init+0x226>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a51      	ldr	r2, [pc, #324]	@ (8005ca8 <HAL_GPIO_Init+0x318>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d025      	beq.n	8005bb2 <HAL_GPIO_Init+0x222>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a50      	ldr	r2, [pc, #320]	@ (8005cac <HAL_GPIO_Init+0x31c>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d01f      	beq.n	8005bae <HAL_GPIO_Init+0x21e>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a4f      	ldr	r2, [pc, #316]	@ (8005cb0 <HAL_GPIO_Init+0x320>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d019      	beq.n	8005baa <HAL_GPIO_Init+0x21a>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a4e      	ldr	r2, [pc, #312]	@ (8005cb4 <HAL_GPIO_Init+0x324>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d013      	beq.n	8005ba6 <HAL_GPIO_Init+0x216>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a4d      	ldr	r2, [pc, #308]	@ (8005cb8 <HAL_GPIO_Init+0x328>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d00d      	beq.n	8005ba2 <HAL_GPIO_Init+0x212>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a4c      	ldr	r2, [pc, #304]	@ (8005cbc <HAL_GPIO_Init+0x32c>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d007      	beq.n	8005b9e <HAL_GPIO_Init+0x20e>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a4b      	ldr	r2, [pc, #300]	@ (8005cc0 <HAL_GPIO_Init+0x330>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d101      	bne.n	8005b9a <HAL_GPIO_Init+0x20a>
 8005b96:	2307      	movs	r3, #7
 8005b98:	e00e      	b.n	8005bb8 <HAL_GPIO_Init+0x228>
 8005b9a:	2308      	movs	r3, #8
 8005b9c:	e00c      	b.n	8005bb8 <HAL_GPIO_Init+0x228>
 8005b9e:	2306      	movs	r3, #6
 8005ba0:	e00a      	b.n	8005bb8 <HAL_GPIO_Init+0x228>
 8005ba2:	2305      	movs	r3, #5
 8005ba4:	e008      	b.n	8005bb8 <HAL_GPIO_Init+0x228>
 8005ba6:	2304      	movs	r3, #4
 8005ba8:	e006      	b.n	8005bb8 <HAL_GPIO_Init+0x228>
 8005baa:	2303      	movs	r3, #3
 8005bac:	e004      	b.n	8005bb8 <HAL_GPIO_Init+0x228>
 8005bae:	2302      	movs	r3, #2
 8005bb0:	e002      	b.n	8005bb8 <HAL_GPIO_Init+0x228>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e000      	b.n	8005bb8 <HAL_GPIO_Init+0x228>
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	69fa      	ldr	r2, [r7, #28]
 8005bba:	f002 0203 	and.w	r2, r2, #3
 8005bbe:	0092      	lsls	r2, r2, #2
 8005bc0:	4093      	lsls	r3, r2
 8005bc2:	69ba      	ldr	r2, [r7, #24]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bc8:	4935      	ldr	r1, [pc, #212]	@ (8005ca0 <HAL_GPIO_Init+0x310>)
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	089b      	lsrs	r3, r3, #2
 8005bce:	3302      	adds	r3, #2
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005bd6:	4b3b      	ldr	r3, [pc, #236]	@ (8005cc4 <HAL_GPIO_Init+0x334>)
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	43db      	mvns	r3, r3
 8005be0:	69ba      	ldr	r2, [r7, #24]
 8005be2:	4013      	ands	r3, r2
 8005be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005bf2:	69ba      	ldr	r2, [r7, #24]
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005bfa:	4a32      	ldr	r2, [pc, #200]	@ (8005cc4 <HAL_GPIO_Init+0x334>)
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c00:	4b30      	ldr	r3, [pc, #192]	@ (8005cc4 <HAL_GPIO_Init+0x334>)
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	43db      	mvns	r3, r3
 8005c0a:	69ba      	ldr	r2, [r7, #24]
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d003      	beq.n	8005c24 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005c1c:	69ba      	ldr	r2, [r7, #24]
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c24:	4a27      	ldr	r2, [pc, #156]	@ (8005cc4 <HAL_GPIO_Init+0x334>)
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005c2a:	4b26      	ldr	r3, [pc, #152]	@ (8005cc4 <HAL_GPIO_Init+0x334>)
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	43db      	mvns	r3, r3
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	4013      	ands	r3, r2
 8005c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005c46:	69ba      	ldr	r2, [r7, #24]
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c4e:	4a1d      	ldr	r2, [pc, #116]	@ (8005cc4 <HAL_GPIO_Init+0x334>)
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c54:	4b1b      	ldr	r3, [pc, #108]	@ (8005cc4 <HAL_GPIO_Init+0x334>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	43db      	mvns	r3, r3
 8005c5e:	69ba      	ldr	r2, [r7, #24]
 8005c60:	4013      	ands	r3, r2
 8005c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d003      	beq.n	8005c78 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005c70:	69ba      	ldr	r2, [r7, #24]
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005c78:	4a12      	ldr	r2, [pc, #72]	@ (8005cc4 <HAL_GPIO_Init+0x334>)
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	3301      	adds	r3, #1
 8005c82:	61fb      	str	r3, [r7, #28]
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	2b0f      	cmp	r3, #15
 8005c88:	f67f ae90 	bls.w	80059ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005c8c:	bf00      	nop
 8005c8e:	bf00      	nop
 8005c90:	3724      	adds	r7, #36	@ 0x24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	40023800 	.word	0x40023800
 8005ca0:	40013800 	.word	0x40013800
 8005ca4:	40020000 	.word	0x40020000
 8005ca8:	40020400 	.word	0x40020400
 8005cac:	40020800 	.word	0x40020800
 8005cb0:	40020c00 	.word	0x40020c00
 8005cb4:	40021000 	.word	0x40021000
 8005cb8:	40021400 	.word	0x40021400
 8005cbc:	40021800 	.word	0x40021800
 8005cc0:	40021c00 	.word	0x40021c00
 8005cc4:	40013c00 	.word	0x40013c00

08005cc8 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	695b      	ldr	r3, [r3, #20]
 8005cd8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005cda:	887a      	ldrh	r2, [r7, #2]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	4013      	ands	r3, r2
 8005ce0:	041a      	lsls	r2, r3, #16
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	43d9      	mvns	r1, r3
 8005ce6:	887b      	ldrh	r3, [r7, #2]
 8005ce8:	400b      	ands	r3, r1
 8005cea:	431a      	orrs	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	619a      	str	r2, [r3, #24]
}
 8005cf0:	bf00      	nop
 8005cf2:	3714      	adds	r7, #20
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e12b      	b.n	8005f66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d106      	bne.n	8005d28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7fe fdb0 	bl	8004888 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2224      	movs	r2, #36	@ 0x24
 8005d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f022 0201 	bic.w	r2, r2, #1
 8005d3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005d60:	f001 fbfc 	bl	800755c <HAL_RCC_GetPCLK1Freq>
 8005d64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	4a81      	ldr	r2, [pc, #516]	@ (8005f70 <HAL_I2C_Init+0x274>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d807      	bhi.n	8005d80 <HAL_I2C_Init+0x84>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	4a80      	ldr	r2, [pc, #512]	@ (8005f74 <HAL_I2C_Init+0x278>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	bf94      	ite	ls
 8005d78:	2301      	movls	r3, #1
 8005d7a:	2300      	movhi	r3, #0
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	e006      	b.n	8005d8e <HAL_I2C_Init+0x92>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	4a7d      	ldr	r2, [pc, #500]	@ (8005f78 <HAL_I2C_Init+0x27c>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	bf94      	ite	ls
 8005d88:	2301      	movls	r3, #1
 8005d8a:	2300      	movhi	r3, #0
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d001      	beq.n	8005d96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e0e7      	b.n	8005f66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	4a78      	ldr	r2, [pc, #480]	@ (8005f7c <HAL_I2C_Init+0x280>)
 8005d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9e:	0c9b      	lsrs	r3, r3, #18
 8005da0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68ba      	ldr	r2, [r7, #8]
 8005db2:	430a      	orrs	r2, r1
 8005db4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	6a1b      	ldr	r3, [r3, #32]
 8005dbc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	4a6a      	ldr	r2, [pc, #424]	@ (8005f70 <HAL_I2C_Init+0x274>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d802      	bhi.n	8005dd0 <HAL_I2C_Init+0xd4>
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	3301      	adds	r3, #1
 8005dce:	e009      	b.n	8005de4 <HAL_I2C_Init+0xe8>
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005dd6:	fb02 f303 	mul.w	r3, r2, r3
 8005dda:	4a69      	ldr	r2, [pc, #420]	@ (8005f80 <HAL_I2C_Init+0x284>)
 8005ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8005de0:	099b      	lsrs	r3, r3, #6
 8005de2:	3301      	adds	r3, #1
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	6812      	ldr	r2, [r2, #0]
 8005de8:	430b      	orrs	r3, r1
 8005dea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005df6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	495c      	ldr	r1, [pc, #368]	@ (8005f70 <HAL_I2C_Init+0x274>)
 8005e00:	428b      	cmp	r3, r1
 8005e02:	d819      	bhi.n	8005e38 <HAL_I2C_Init+0x13c>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	1e59      	subs	r1, r3, #1
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	005b      	lsls	r3, r3, #1
 8005e0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e12:	1c59      	adds	r1, r3, #1
 8005e14:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005e18:	400b      	ands	r3, r1
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00a      	beq.n	8005e34 <HAL_I2C_Init+0x138>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	1e59      	subs	r1, r3, #1
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	005b      	lsls	r3, r3, #1
 8005e28:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e32:	e051      	b.n	8005ed8 <HAL_I2C_Init+0x1dc>
 8005e34:	2304      	movs	r3, #4
 8005e36:	e04f      	b.n	8005ed8 <HAL_I2C_Init+0x1dc>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d111      	bne.n	8005e64 <HAL_I2C_Init+0x168>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	1e58      	subs	r0, r3, #1
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6859      	ldr	r1, [r3, #4]
 8005e48:	460b      	mov	r3, r1
 8005e4a:	005b      	lsls	r3, r3, #1
 8005e4c:	440b      	add	r3, r1
 8005e4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e52:	3301      	adds	r3, #1
 8005e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	bf0c      	ite	eq
 8005e5c:	2301      	moveq	r3, #1
 8005e5e:	2300      	movne	r3, #0
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	e012      	b.n	8005e8a <HAL_I2C_Init+0x18e>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	1e58      	subs	r0, r3, #1
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6859      	ldr	r1, [r3, #4]
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	440b      	add	r3, r1
 8005e72:	0099      	lsls	r1, r3, #2
 8005e74:	440b      	add	r3, r1
 8005e76:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	bf0c      	ite	eq
 8005e84:	2301      	moveq	r3, #1
 8005e86:	2300      	movne	r3, #0
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d001      	beq.n	8005e92 <HAL_I2C_Init+0x196>
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e022      	b.n	8005ed8 <HAL_I2C_Init+0x1dc>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10e      	bne.n	8005eb8 <HAL_I2C_Init+0x1bc>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	1e58      	subs	r0, r3, #1
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6859      	ldr	r1, [r3, #4]
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	005b      	lsls	r3, r3, #1
 8005ea6:	440b      	add	r3, r1
 8005ea8:	fbb0 f3f3 	udiv	r3, r0, r3
 8005eac:	3301      	adds	r3, #1
 8005eae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005eb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005eb6:	e00f      	b.n	8005ed8 <HAL_I2C_Init+0x1dc>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	1e58      	subs	r0, r3, #1
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6859      	ldr	r1, [r3, #4]
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	440b      	add	r3, r1
 8005ec6:	0099      	lsls	r1, r3, #2
 8005ec8:	440b      	add	r3, r1
 8005eca:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ece:	3301      	adds	r3, #1
 8005ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ed4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ed8:	6879      	ldr	r1, [r7, #4]
 8005eda:	6809      	ldr	r1, [r1, #0]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	69da      	ldr	r2, [r3, #28]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	431a      	orrs	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	430a      	orrs	r2, r1
 8005efa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005f06:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	6911      	ldr	r1, [r2, #16]
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	68d2      	ldr	r2, [r2, #12]
 8005f12:	4311      	orrs	r1, r2
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	6812      	ldr	r2, [r2, #0]
 8005f18:	430b      	orrs	r3, r1
 8005f1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	695a      	ldr	r2, [r3, #20]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	431a      	orrs	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	430a      	orrs	r2, r1
 8005f36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f042 0201 	orr.w	r2, r2, #1
 8005f46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2220      	movs	r2, #32
 8005f52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	000186a0 	.word	0x000186a0
 8005f74:	001e847f 	.word	0x001e847f
 8005f78:	003d08ff 	.word	0x003d08ff
 8005f7c:	431bde83 	.word	0x431bde83
 8005f80:	10624dd3 	.word	0x10624dd3

08005f84 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b088      	sub	sp, #32
 8005f88:	af02      	add	r7, sp, #8
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	4608      	mov	r0, r1
 8005f8e:	4611      	mov	r1, r2
 8005f90:	461a      	mov	r2, r3
 8005f92:	4603      	mov	r3, r0
 8005f94:	817b      	strh	r3, [r7, #10]
 8005f96:	460b      	mov	r3, r1
 8005f98:	813b      	strh	r3, [r7, #8]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f9e:	f7fe ffb3 	bl	8004f08 <HAL_GetTick>
 8005fa2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	2b20      	cmp	r3, #32
 8005fae:	f040 80d9 	bne.w	8006164 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	2319      	movs	r3, #25
 8005fb8:	2201      	movs	r2, #1
 8005fba:	496d      	ldr	r1, [pc, #436]	@ (8006170 <HAL_I2C_Mem_Write+0x1ec>)
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f000 fc7f 	bl	80068c0 <I2C_WaitOnFlagUntilTimeout>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d001      	beq.n	8005fcc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005fc8:	2302      	movs	r3, #2
 8005fca:	e0cc      	b.n	8006166 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d101      	bne.n	8005fda <HAL_I2C_Mem_Write+0x56>
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	e0c5      	b.n	8006166 <HAL_I2C_Mem_Write+0x1e2>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0301 	and.w	r3, r3, #1
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d007      	beq.n	8006000 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f042 0201 	orr.w	r2, r2, #1
 8005ffe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800600e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2221      	movs	r2, #33	@ 0x21
 8006014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2240      	movs	r2, #64	@ 0x40
 800601c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2200      	movs	r2, #0
 8006024:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6a3a      	ldr	r2, [r7, #32]
 800602a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006030:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006036:	b29a      	uxth	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	4a4d      	ldr	r2, [pc, #308]	@ (8006174 <HAL_I2C_Mem_Write+0x1f0>)
 8006040:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006042:	88f8      	ldrh	r0, [r7, #6]
 8006044:	893a      	ldrh	r2, [r7, #8]
 8006046:	8979      	ldrh	r1, [r7, #10]
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	9301      	str	r3, [sp, #4]
 800604c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800604e:	9300      	str	r3, [sp, #0]
 8006050:	4603      	mov	r3, r0
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f000 fab6 	bl	80065c4 <I2C_RequestMemoryWrite>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d052      	beq.n	8006104 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e081      	b.n	8006166 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f000 fd00 	bl	8006a6c <I2C_WaitOnTXEFlagUntilTimeout>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00d      	beq.n	800608e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006076:	2b04      	cmp	r3, #4
 8006078:	d107      	bne.n	800608a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006088:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e06b      	b.n	8006166 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006092:	781a      	ldrb	r2, [r3, #0]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800609e:	1c5a      	adds	r2, r3, #1
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060a8:	3b01      	subs	r3, #1
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	3b01      	subs	r3, #1
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	695b      	ldr	r3, [r3, #20]
 80060c4:	f003 0304 	and.w	r3, r3, #4
 80060c8:	2b04      	cmp	r3, #4
 80060ca:	d11b      	bne.n	8006104 <HAL_I2C_Mem_Write+0x180>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d017      	beq.n	8006104 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d8:	781a      	ldrb	r2, [r3, #0]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e4:	1c5a      	adds	r2, r3, #1
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060ee:	3b01      	subs	r3, #1
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	3b01      	subs	r3, #1
 80060fe:	b29a      	uxth	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1aa      	bne.n	8006062 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f000 fcec 	bl	8006aee <I2C_WaitOnBTFFlagUntilTimeout>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00d      	beq.n	8006138 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006120:	2b04      	cmp	r3, #4
 8006122:	d107      	bne.n	8006134 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006132:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e016      	b.n	8006166 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006146:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2220      	movs	r2, #32
 800614c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006160:	2300      	movs	r3, #0
 8006162:	e000      	b.n	8006166 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006164:	2302      	movs	r3, #2
  }
}
 8006166:	4618      	mov	r0, r3
 8006168:	3718      	adds	r7, #24
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	00100002 	.word	0x00100002
 8006174:	ffff0000 	.word	0xffff0000

08006178 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b08c      	sub	sp, #48	@ 0x30
 800617c:	af02      	add	r7, sp, #8
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	4608      	mov	r0, r1
 8006182:	4611      	mov	r1, r2
 8006184:	461a      	mov	r2, r3
 8006186:	4603      	mov	r3, r0
 8006188:	817b      	strh	r3, [r7, #10]
 800618a:	460b      	mov	r3, r1
 800618c:	813b      	strh	r3, [r7, #8]
 800618e:	4613      	mov	r3, r2
 8006190:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006192:	f7fe feb9 	bl	8004f08 <HAL_GetTick>
 8006196:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b20      	cmp	r3, #32
 80061a2:	f040 8208 	bne.w	80065b6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80061a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a8:	9300      	str	r3, [sp, #0]
 80061aa:	2319      	movs	r3, #25
 80061ac:	2201      	movs	r2, #1
 80061ae:	497b      	ldr	r1, [pc, #492]	@ (800639c <HAL_I2C_Mem_Read+0x224>)
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f000 fb85 	bl	80068c0 <I2C_WaitOnFlagUntilTimeout>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d001      	beq.n	80061c0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80061bc:	2302      	movs	r3, #2
 80061be:	e1fb      	b.n	80065b8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d101      	bne.n	80061ce <HAL_I2C_Mem_Read+0x56>
 80061ca:	2302      	movs	r3, #2
 80061cc:	e1f4      	b.n	80065b8 <HAL_I2C_Mem_Read+0x440>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0301 	and.w	r3, r3, #1
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d007      	beq.n	80061f4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f042 0201 	orr.w	r2, r2, #1
 80061f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006202:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2222      	movs	r2, #34	@ 0x22
 8006208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2240      	movs	r2, #64	@ 0x40
 8006210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800621e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006224:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800622a:	b29a      	uxth	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	4a5b      	ldr	r2, [pc, #364]	@ (80063a0 <HAL_I2C_Mem_Read+0x228>)
 8006234:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006236:	88f8      	ldrh	r0, [r7, #6]
 8006238:	893a      	ldrh	r2, [r7, #8]
 800623a:	8979      	ldrh	r1, [r7, #10]
 800623c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623e:	9301      	str	r3, [sp, #4]
 8006240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	4603      	mov	r3, r0
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f000 fa52 	bl	80066f0 <I2C_RequestMemoryRead>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e1b0      	b.n	80065b8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800625a:	2b00      	cmp	r3, #0
 800625c:	d113      	bne.n	8006286 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800625e:	2300      	movs	r3, #0
 8006260:	623b      	str	r3, [r7, #32]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	695b      	ldr	r3, [r3, #20]
 8006268:	623b      	str	r3, [r7, #32]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	699b      	ldr	r3, [r3, #24]
 8006270:	623b      	str	r3, [r7, #32]
 8006272:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006282:	601a      	str	r2, [r3, #0]
 8006284:	e184      	b.n	8006590 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800628a:	2b01      	cmp	r3, #1
 800628c:	d11b      	bne.n	80062c6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800629c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800629e:	2300      	movs	r3, #0
 80062a0:	61fb      	str	r3, [r7, #28]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	695b      	ldr	r3, [r3, #20]
 80062a8:	61fb      	str	r3, [r7, #28]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	699b      	ldr	r3, [r3, #24]
 80062b0:	61fb      	str	r3, [r7, #28]
 80062b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062c2:	601a      	str	r2, [r3, #0]
 80062c4:	e164      	b.n	8006590 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d11b      	bne.n	8006306 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062ee:	2300      	movs	r3, #0
 80062f0:	61bb      	str	r3, [r7, #24]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	695b      	ldr	r3, [r3, #20]
 80062f8:	61bb      	str	r3, [r7, #24]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	61bb      	str	r3, [r7, #24]
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	e144      	b.n	8006590 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006306:	2300      	movs	r3, #0
 8006308:	617b      	str	r3, [r7, #20]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	695b      	ldr	r3, [r3, #20]
 8006310:	617b      	str	r3, [r7, #20]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	617b      	str	r3, [r7, #20]
 800631a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800631c:	e138      	b.n	8006590 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006322:	2b03      	cmp	r3, #3
 8006324:	f200 80f1 	bhi.w	800650a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800632c:	2b01      	cmp	r3, #1
 800632e:	d123      	bne.n	8006378 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006330:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006332:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f000 fc1b 	bl	8006b70 <I2C_WaitOnRXNEFlagUntilTimeout>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d001      	beq.n	8006344 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e139      	b.n	80065b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	691a      	ldr	r2, [r3, #16]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800634e:	b2d2      	uxtb	r2, r2
 8006350:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006356:	1c5a      	adds	r2, r3, #1
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006360:	3b01      	subs	r3, #1
 8006362:	b29a      	uxth	r2, r3
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800636c:	b29b      	uxth	r3, r3
 800636e:	3b01      	subs	r3, #1
 8006370:	b29a      	uxth	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006376:	e10b      	b.n	8006590 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800637c:	2b02      	cmp	r3, #2
 800637e:	d14e      	bne.n	800641e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006382:	9300      	str	r3, [sp, #0]
 8006384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006386:	2200      	movs	r2, #0
 8006388:	4906      	ldr	r1, [pc, #24]	@ (80063a4 <HAL_I2C_Mem_Read+0x22c>)
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f000 fa98 	bl	80068c0 <I2C_WaitOnFlagUntilTimeout>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d008      	beq.n	80063a8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e10e      	b.n	80065b8 <HAL_I2C_Mem_Read+0x440>
 800639a:	bf00      	nop
 800639c:	00100002 	.word	0x00100002
 80063a0:	ffff0000 	.word	0xffff0000
 80063a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	691a      	ldr	r2, [r3, #16]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c2:	b2d2      	uxtb	r2, r2
 80063c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ca:	1c5a      	adds	r2, r3, #1
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063d4:	3b01      	subs	r3, #1
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	3b01      	subs	r3, #1
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	691a      	ldr	r2, [r3, #16]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f4:	b2d2      	uxtb	r2, r2
 80063f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063fc:	1c5a      	adds	r2, r3, #1
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006406:	3b01      	subs	r3, #1
 8006408:	b29a      	uxth	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006412:	b29b      	uxth	r3, r3
 8006414:	3b01      	subs	r3, #1
 8006416:	b29a      	uxth	r2, r3
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800641c:	e0b8      	b.n	8006590 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800641e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006424:	2200      	movs	r2, #0
 8006426:	4966      	ldr	r1, [pc, #408]	@ (80065c0 <HAL_I2C_Mem_Read+0x448>)
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f000 fa49 	bl	80068c0 <I2C_WaitOnFlagUntilTimeout>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d001      	beq.n	8006438 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e0bf      	b.n	80065b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006446:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	691a      	ldr	r2, [r3, #16]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006452:	b2d2      	uxtb	r2, r2
 8006454:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800645a:	1c5a      	adds	r2, r3, #1
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006464:	3b01      	subs	r3, #1
 8006466:	b29a      	uxth	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006470:	b29b      	uxth	r3, r3
 8006472:	3b01      	subs	r3, #1
 8006474:	b29a      	uxth	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800647a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006480:	2200      	movs	r2, #0
 8006482:	494f      	ldr	r1, [pc, #316]	@ (80065c0 <HAL_I2C_Mem_Read+0x448>)
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 fa1b 	bl	80068c0 <I2C_WaitOnFlagUntilTimeout>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d001      	beq.n	8006494 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e091      	b.n	80065b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	691a      	ldr	r2, [r3, #16]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ae:	b2d2      	uxtb	r2, r2
 80064b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064b6:	1c5a      	adds	r2, r3, #1
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064c0:	3b01      	subs	r3, #1
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	3b01      	subs	r3, #1
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	691a      	ldr	r2, [r3, #16]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e0:	b2d2      	uxtb	r2, r2
 80064e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e8:	1c5a      	adds	r2, r3, #1
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064f2:	3b01      	subs	r3, #1
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064fe:	b29b      	uxth	r3, r3
 8006500:	3b01      	subs	r3, #1
 8006502:	b29a      	uxth	r2, r3
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006508:	e042      	b.n	8006590 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800650a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800650c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800650e:	68f8      	ldr	r0, [r7, #12]
 8006510:	f000 fb2e 	bl	8006b70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e04c      	b.n	80065b8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	691a      	ldr	r2, [r3, #16]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006528:	b2d2      	uxtb	r2, r2
 800652a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006530:	1c5a      	adds	r2, r3, #1
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800653a:	3b01      	subs	r3, #1
 800653c:	b29a      	uxth	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006546:	b29b      	uxth	r3, r3
 8006548:	3b01      	subs	r3, #1
 800654a:	b29a      	uxth	r2, r3
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	f003 0304 	and.w	r3, r3, #4
 800655a:	2b04      	cmp	r3, #4
 800655c:	d118      	bne.n	8006590 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	691a      	ldr	r2, [r3, #16]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006568:	b2d2      	uxtb	r2, r2
 800656a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006570:	1c5a      	adds	r2, r3, #1
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800657a:	3b01      	subs	r3, #1
 800657c:	b29a      	uxth	r2, r3
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006586:	b29b      	uxth	r3, r3
 8006588:	3b01      	subs	r3, #1
 800658a:	b29a      	uxth	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006594:	2b00      	cmp	r3, #0
 8006596:	f47f aec2 	bne.w	800631e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2220      	movs	r2, #32
 800659e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80065b2:	2300      	movs	r3, #0
 80065b4:	e000      	b.n	80065b8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80065b6:	2302      	movs	r3, #2
  }
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3728      	adds	r7, #40	@ 0x28
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	00010004 	.word	0x00010004

080065c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b088      	sub	sp, #32
 80065c8:	af02      	add	r7, sp, #8
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	4608      	mov	r0, r1
 80065ce:	4611      	mov	r1, r2
 80065d0:	461a      	mov	r2, r3
 80065d2:	4603      	mov	r3, r0
 80065d4:	817b      	strh	r3, [r7, #10]
 80065d6:	460b      	mov	r3, r1
 80065d8:	813b      	strh	r3, [r7, #8]
 80065da:	4613      	mov	r3, r2
 80065dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f0:	9300      	str	r3, [sp, #0]
 80065f2:	6a3b      	ldr	r3, [r7, #32]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80065fa:	68f8      	ldr	r0, [r7, #12]
 80065fc:	f000 f960 	bl	80068c0 <I2C_WaitOnFlagUntilTimeout>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00d      	beq.n	8006622 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006610:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006614:	d103      	bne.n	800661e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800661c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e05f      	b.n	80066e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006622:	897b      	ldrh	r3, [r7, #10]
 8006624:	b2db      	uxtb	r3, r3
 8006626:	461a      	mov	r2, r3
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006630:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006634:	6a3a      	ldr	r2, [r7, #32]
 8006636:	492d      	ldr	r1, [pc, #180]	@ (80066ec <I2C_RequestMemoryWrite+0x128>)
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f000 f998 	bl	800696e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d001      	beq.n	8006648 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e04c      	b.n	80066e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006648:	2300      	movs	r3, #0
 800664a:	617b      	str	r3, [r7, #20]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	617b      	str	r3, [r7, #20]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	617b      	str	r3, [r7, #20]
 800665c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800665e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006660:	6a39      	ldr	r1, [r7, #32]
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f000 fa02 	bl	8006a6c <I2C_WaitOnTXEFlagUntilTimeout>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00d      	beq.n	800668a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006672:	2b04      	cmp	r3, #4
 8006674:	d107      	bne.n	8006686 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006684:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e02b      	b.n	80066e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800668a:	88fb      	ldrh	r3, [r7, #6]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d105      	bne.n	800669c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006690:	893b      	ldrh	r3, [r7, #8]
 8006692:	b2da      	uxtb	r2, r3
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	611a      	str	r2, [r3, #16]
 800669a:	e021      	b.n	80066e0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800669c:	893b      	ldrh	r3, [r7, #8]
 800669e:	0a1b      	lsrs	r3, r3, #8
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066ac:	6a39      	ldr	r1, [r7, #32]
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f000 f9dc 	bl	8006a6c <I2C_WaitOnTXEFlagUntilTimeout>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00d      	beq.n	80066d6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066be:	2b04      	cmp	r3, #4
 80066c0:	d107      	bne.n	80066d2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e005      	b.n	80066e2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80066d6:	893b      	ldrh	r3, [r7, #8]
 80066d8:	b2da      	uxtb	r2, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3718      	adds	r7, #24
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	00010002 	.word	0x00010002

080066f0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b088      	sub	sp, #32
 80066f4:	af02      	add	r7, sp, #8
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	4608      	mov	r0, r1
 80066fa:	4611      	mov	r1, r2
 80066fc:	461a      	mov	r2, r3
 80066fe:	4603      	mov	r3, r0
 8006700:	817b      	strh	r3, [r7, #10]
 8006702:	460b      	mov	r3, r1
 8006704:	813b      	strh	r3, [r7, #8]
 8006706:	4613      	mov	r3, r2
 8006708:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006718:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006728:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800672a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672c:	9300      	str	r3, [sp, #0]
 800672e:	6a3b      	ldr	r3, [r7, #32]
 8006730:	2200      	movs	r2, #0
 8006732:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f000 f8c2 	bl	80068c0 <I2C_WaitOnFlagUntilTimeout>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00d      	beq.n	800675e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800674c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006750:	d103      	bne.n	800675a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006758:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e0aa      	b.n	80068b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800675e:	897b      	ldrh	r3, [r7, #10]
 8006760:	b2db      	uxtb	r3, r3
 8006762:	461a      	mov	r2, r3
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800676c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800676e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006770:	6a3a      	ldr	r2, [r7, #32]
 8006772:	4952      	ldr	r1, [pc, #328]	@ (80068bc <I2C_RequestMemoryRead+0x1cc>)
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f000 f8fa 	bl	800696e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d001      	beq.n	8006784 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e097      	b.n	80068b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006784:	2300      	movs	r3, #0
 8006786:	617b      	str	r3, [r7, #20]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	695b      	ldr	r3, [r3, #20]
 800678e:	617b      	str	r3, [r7, #20]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	617b      	str	r3, [r7, #20]
 8006798:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800679a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800679c:	6a39      	ldr	r1, [r7, #32]
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f000 f964 	bl	8006a6c <I2C_WaitOnTXEFlagUntilTimeout>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00d      	beq.n	80067c6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ae:	2b04      	cmp	r3, #4
 80067b0:	d107      	bne.n	80067c2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e076      	b.n	80068b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80067c6:	88fb      	ldrh	r3, [r7, #6]
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d105      	bne.n	80067d8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80067cc:	893b      	ldrh	r3, [r7, #8]
 80067ce:	b2da      	uxtb	r2, r3
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	611a      	str	r2, [r3, #16]
 80067d6:	e021      	b.n	800681c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80067d8:	893b      	ldrh	r3, [r7, #8]
 80067da:	0a1b      	lsrs	r3, r3, #8
 80067dc:	b29b      	uxth	r3, r3
 80067de:	b2da      	uxtb	r2, r3
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067e8:	6a39      	ldr	r1, [r7, #32]
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f000 f93e 	bl	8006a6c <I2C_WaitOnTXEFlagUntilTimeout>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00d      	beq.n	8006812 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067fa:	2b04      	cmp	r3, #4
 80067fc:	d107      	bne.n	800680e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800680c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e050      	b.n	80068b4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006812:	893b      	ldrh	r3, [r7, #8]
 8006814:	b2da      	uxtb	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800681c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800681e:	6a39      	ldr	r1, [r7, #32]
 8006820:	68f8      	ldr	r0, [r7, #12]
 8006822:	f000 f923 	bl	8006a6c <I2C_WaitOnTXEFlagUntilTimeout>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00d      	beq.n	8006848 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006830:	2b04      	cmp	r3, #4
 8006832:	d107      	bne.n	8006844 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006842:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e035      	b.n	80068b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006856:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800685a:	9300      	str	r3, [sp, #0]
 800685c:	6a3b      	ldr	r3, [r7, #32]
 800685e:	2200      	movs	r2, #0
 8006860:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f000 f82b 	bl	80068c0 <I2C_WaitOnFlagUntilTimeout>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00d      	beq.n	800688c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800687a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800687e:	d103      	bne.n	8006888 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006886:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006888:	2303      	movs	r3, #3
 800688a:	e013      	b.n	80068b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800688c:	897b      	ldrh	r3, [r7, #10]
 800688e:	b2db      	uxtb	r3, r3
 8006890:	f043 0301 	orr.w	r3, r3, #1
 8006894:	b2da      	uxtb	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800689c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800689e:	6a3a      	ldr	r2, [r7, #32]
 80068a0:	4906      	ldr	r1, [pc, #24]	@ (80068bc <I2C_RequestMemoryRead+0x1cc>)
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	f000 f863 	bl	800696e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d001      	beq.n	80068b2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e000      	b.n	80068b4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3718      	adds	r7, #24
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	00010002 	.word	0x00010002

080068c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	603b      	str	r3, [r7, #0]
 80068cc:	4613      	mov	r3, r2
 80068ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068d0:	e025      	b.n	800691e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068d8:	d021      	beq.n	800691e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068da:	f7fe fb15 	bl	8004f08 <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	683a      	ldr	r2, [r7, #0]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d302      	bcc.n	80068f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d116      	bne.n	800691e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2220      	movs	r2, #32
 80068fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800690a:	f043 0220 	orr.w	r2, r3, #32
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e023      	b.n	8006966 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	0c1b      	lsrs	r3, r3, #16
 8006922:	b2db      	uxtb	r3, r3
 8006924:	2b01      	cmp	r3, #1
 8006926:	d10d      	bne.n	8006944 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	43da      	mvns	r2, r3
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	4013      	ands	r3, r2
 8006934:	b29b      	uxth	r3, r3
 8006936:	2b00      	cmp	r3, #0
 8006938:	bf0c      	ite	eq
 800693a:	2301      	moveq	r3, #1
 800693c:	2300      	movne	r3, #0
 800693e:	b2db      	uxtb	r3, r3
 8006940:	461a      	mov	r2, r3
 8006942:	e00c      	b.n	800695e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	43da      	mvns	r2, r3
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	4013      	ands	r3, r2
 8006950:	b29b      	uxth	r3, r3
 8006952:	2b00      	cmp	r3, #0
 8006954:	bf0c      	ite	eq
 8006956:	2301      	moveq	r3, #1
 8006958:	2300      	movne	r3, #0
 800695a:	b2db      	uxtb	r3, r3
 800695c:	461a      	mov	r2, r3
 800695e:	79fb      	ldrb	r3, [r7, #7]
 8006960:	429a      	cmp	r2, r3
 8006962:	d0b6      	beq.n	80068d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b084      	sub	sp, #16
 8006972:	af00      	add	r7, sp, #0
 8006974:	60f8      	str	r0, [r7, #12]
 8006976:	60b9      	str	r1, [r7, #8]
 8006978:	607a      	str	r2, [r7, #4]
 800697a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800697c:	e051      	b.n	8006a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	695b      	ldr	r3, [r3, #20]
 8006984:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006988:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800698c:	d123      	bne.n	80069d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800699c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80069a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2220      	movs	r2, #32
 80069b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069c2:	f043 0204 	orr.w	r2, r3, #4
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e046      	b.n	8006a64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069dc:	d021      	beq.n	8006a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069de:	f7fe fa93 	bl	8004f08 <HAL_GetTick>
 80069e2:	4602      	mov	r2, r0
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	1ad3      	subs	r3, r2, r3
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d302      	bcc.n	80069f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d116      	bne.n	8006a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2220      	movs	r2, #32
 80069fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a0e:	f043 0220 	orr.w	r2, r3, #32
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e020      	b.n	8006a64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	0c1b      	lsrs	r3, r3, #16
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d10c      	bne.n	8006a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	43da      	mvns	r2, r3
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	4013      	ands	r3, r2
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	bf14      	ite	ne
 8006a3e:	2301      	movne	r3, #1
 8006a40:	2300      	moveq	r3, #0
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	e00b      	b.n	8006a5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	43da      	mvns	r2, r3
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	4013      	ands	r3, r2
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	bf14      	ite	ne
 8006a58:	2301      	movne	r3, #1
 8006a5a:	2300      	moveq	r3, #0
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d18d      	bne.n	800697e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a78:	e02d      	b.n	8006ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f000 f8ce 	bl	8006c1c <I2C_IsAcknowledgeFailed>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d001      	beq.n	8006a8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e02d      	b.n	8006ae6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a90:	d021      	beq.n	8006ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a92:	f7fe fa39 	bl	8004f08 <HAL_GetTick>
 8006a96:	4602      	mov	r2, r0
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	1ad3      	subs	r3, r2, r3
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d302      	bcc.n	8006aa8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d116      	bne.n	8006ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2220      	movs	r2, #32
 8006ab2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ac2:	f043 0220 	orr.w	r2, r3, #32
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e007      	b.n	8006ae6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	695b      	ldr	r3, [r3, #20]
 8006adc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ae0:	2b80      	cmp	r3, #128	@ 0x80
 8006ae2:	d1ca      	bne.n	8006a7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3710      	adds	r7, #16
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b084      	sub	sp, #16
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	60f8      	str	r0, [r7, #12]
 8006af6:	60b9      	str	r1, [r7, #8]
 8006af8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006afa:	e02d      	b.n	8006b58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f000 f88d 	bl	8006c1c <I2C_IsAcknowledgeFailed>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d001      	beq.n	8006b0c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e02d      	b.n	8006b68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b12:	d021      	beq.n	8006b58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b14:	f7fe f9f8 	bl	8004f08 <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	68ba      	ldr	r2, [r7, #8]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d302      	bcc.n	8006b2a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d116      	bne.n	8006b58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2220      	movs	r2, #32
 8006b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b44:	f043 0220 	orr.w	r2, r3, #32
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	e007      	b.n	8006b68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	f003 0304 	and.w	r3, r3, #4
 8006b62:	2b04      	cmp	r3, #4
 8006b64:	d1ca      	bne.n	8006afc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3710      	adds	r7, #16
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b7c:	e042      	b.n	8006c04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	695b      	ldr	r3, [r3, #20]
 8006b84:	f003 0310 	and.w	r3, r3, #16
 8006b88:	2b10      	cmp	r3, #16
 8006b8a:	d119      	bne.n	8006bc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f06f 0210 	mvn.w	r2, #16
 8006b94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2220      	movs	r2, #32
 8006ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e029      	b.n	8006c14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bc0:	f7fe f9a2 	bl	8004f08 <HAL_GetTick>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	68ba      	ldr	r2, [r7, #8]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d302      	bcc.n	8006bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d116      	bne.n	8006c04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2220      	movs	r2, #32
 8006be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bf0:	f043 0220 	orr.w	r2, r3, #32
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e007      	b.n	8006c14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c0e:	2b40      	cmp	r3, #64	@ 0x40
 8006c10:	d1b5      	bne.n	8006b7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3710      	adds	r7, #16
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c32:	d11b      	bne.n	8006c6c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006c3c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2220      	movs	r2, #32
 8006c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c58:	f043 0204 	orr.w	r2, r3, #4
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e000      	b.n	8006c6e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	370c      	adds	r7, #12
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr
	...

08006c7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b086      	sub	sp, #24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e267      	b.n	800715e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0301 	and.w	r3, r3, #1
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d075      	beq.n	8006d86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006c9a:	4b88      	ldr	r3, [pc, #544]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	f003 030c 	and.w	r3, r3, #12
 8006ca2:	2b04      	cmp	r3, #4
 8006ca4:	d00c      	beq.n	8006cc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ca6:	4b85      	ldr	r3, [pc, #532]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006cae:	2b08      	cmp	r3, #8
 8006cb0:	d112      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006cb2:	4b82      	ldr	r3, [pc, #520]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006cbe:	d10b      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cc0:	4b7e      	ldr	r3, [pc, #504]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d05b      	beq.n	8006d84 <HAL_RCC_OscConfig+0x108>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d157      	bne.n	8006d84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e242      	b.n	800715e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ce0:	d106      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x74>
 8006ce2:	4b76      	ldr	r3, [pc, #472]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a75      	ldr	r2, [pc, #468]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006ce8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cec:	6013      	str	r3, [r2, #0]
 8006cee:	e01d      	b.n	8006d2c <HAL_RCC_OscConfig+0xb0>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006cf8:	d10c      	bne.n	8006d14 <HAL_RCC_OscConfig+0x98>
 8006cfa:	4b70      	ldr	r3, [pc, #448]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a6f      	ldr	r2, [pc, #444]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006d00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d04:	6013      	str	r3, [r2, #0]
 8006d06:	4b6d      	ldr	r3, [pc, #436]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a6c      	ldr	r2, [pc, #432]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006d0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d10:	6013      	str	r3, [r2, #0]
 8006d12:	e00b      	b.n	8006d2c <HAL_RCC_OscConfig+0xb0>
 8006d14:	4b69      	ldr	r3, [pc, #420]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a68      	ldr	r2, [pc, #416]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006d1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d1e:	6013      	str	r3, [r2, #0]
 8006d20:	4b66      	ldr	r3, [pc, #408]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a65      	ldr	r2, [pc, #404]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006d26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d013      	beq.n	8006d5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d34:	f7fe f8e8 	bl	8004f08 <HAL_GetTick>
 8006d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d3a:	e008      	b.n	8006d4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d3c:	f7fe f8e4 	bl	8004f08 <HAL_GetTick>
 8006d40:	4602      	mov	r2, r0
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	2b64      	cmp	r3, #100	@ 0x64
 8006d48:	d901      	bls.n	8006d4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e207      	b.n	800715e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d4e:	4b5b      	ldr	r3, [pc, #364]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d0f0      	beq.n	8006d3c <HAL_RCC_OscConfig+0xc0>
 8006d5a:	e014      	b.n	8006d86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d5c:	f7fe f8d4 	bl	8004f08 <HAL_GetTick>
 8006d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d62:	e008      	b.n	8006d76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d64:	f7fe f8d0 	bl	8004f08 <HAL_GetTick>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	2b64      	cmp	r3, #100	@ 0x64
 8006d70:	d901      	bls.n	8006d76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006d72:	2303      	movs	r3, #3
 8006d74:	e1f3      	b.n	800715e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d76:	4b51      	ldr	r3, [pc, #324]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d1f0      	bne.n	8006d64 <HAL_RCC_OscConfig+0xe8>
 8006d82:	e000      	b.n	8006d86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 0302 	and.w	r3, r3, #2
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d063      	beq.n	8006e5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006d92:	4b4a      	ldr	r3, [pc, #296]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	f003 030c 	and.w	r3, r3, #12
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00b      	beq.n	8006db6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d9e:	4b47      	ldr	r3, [pc, #284]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006da6:	2b08      	cmp	r3, #8
 8006da8:	d11c      	bne.n	8006de4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006daa:	4b44      	ldr	r3, [pc, #272]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d116      	bne.n	8006de4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006db6:	4b41      	ldr	r3, [pc, #260]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0302 	and.w	r3, r3, #2
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d005      	beq.n	8006dce <HAL_RCC_OscConfig+0x152>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d001      	beq.n	8006dce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e1c7      	b.n	800715e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dce:	4b3b      	ldr	r3, [pc, #236]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	00db      	lsls	r3, r3, #3
 8006ddc:	4937      	ldr	r1, [pc, #220]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006dde:	4313      	orrs	r3, r2
 8006de0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006de2:	e03a      	b.n	8006e5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d020      	beq.n	8006e2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006dec:	4b34      	ldr	r3, [pc, #208]	@ (8006ec0 <HAL_RCC_OscConfig+0x244>)
 8006dee:	2201      	movs	r2, #1
 8006df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006df2:	f7fe f889 	bl	8004f08 <HAL_GetTick>
 8006df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006df8:	e008      	b.n	8006e0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006dfa:	f7fe f885 	bl	8004f08 <HAL_GetTick>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	1ad3      	subs	r3, r2, r3
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d901      	bls.n	8006e0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e1a8      	b.n	800715e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e0c:	4b2b      	ldr	r3, [pc, #172]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0302 	and.w	r3, r3, #2
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d0f0      	beq.n	8006dfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e18:	4b28      	ldr	r3, [pc, #160]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	00db      	lsls	r3, r3, #3
 8006e26:	4925      	ldr	r1, [pc, #148]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	600b      	str	r3, [r1, #0]
 8006e2c:	e015      	b.n	8006e5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e2e:	4b24      	ldr	r3, [pc, #144]	@ (8006ec0 <HAL_RCC_OscConfig+0x244>)
 8006e30:	2200      	movs	r2, #0
 8006e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e34:	f7fe f868 	bl	8004f08 <HAL_GetTick>
 8006e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e3a:	e008      	b.n	8006e4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e3c:	f7fe f864 	bl	8004f08 <HAL_GetTick>
 8006e40:	4602      	mov	r2, r0
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d901      	bls.n	8006e4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e187      	b.n	800715e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0302 	and.w	r3, r3, #2
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1f0      	bne.n	8006e3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0308 	and.w	r3, r3, #8
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d036      	beq.n	8006ed4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	695b      	ldr	r3, [r3, #20]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d016      	beq.n	8006e9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e6e:	4b15      	ldr	r3, [pc, #84]	@ (8006ec4 <HAL_RCC_OscConfig+0x248>)
 8006e70:	2201      	movs	r2, #1
 8006e72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e74:	f7fe f848 	bl	8004f08 <HAL_GetTick>
 8006e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e7a:	e008      	b.n	8006e8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e7c:	f7fe f844 	bl	8004f08 <HAL_GetTick>
 8006e80:	4602      	mov	r2, r0
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d901      	bls.n	8006e8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e167      	b.n	800715e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006e90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e92:	f003 0302 	and.w	r3, r3, #2
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d0f0      	beq.n	8006e7c <HAL_RCC_OscConfig+0x200>
 8006e9a:	e01b      	b.n	8006ed4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e9c:	4b09      	ldr	r3, [pc, #36]	@ (8006ec4 <HAL_RCC_OscConfig+0x248>)
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ea2:	f7fe f831 	bl	8004f08 <HAL_GetTick>
 8006ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ea8:	e00e      	b.n	8006ec8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006eaa:	f7fe f82d 	bl	8004f08 <HAL_GetTick>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d907      	bls.n	8006ec8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e150      	b.n	800715e <HAL_RCC_OscConfig+0x4e2>
 8006ebc:	40023800 	.word	0x40023800
 8006ec0:	42470000 	.word	0x42470000
 8006ec4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ec8:	4b88      	ldr	r3, [pc, #544]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 8006eca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ecc:	f003 0302 	and.w	r3, r3, #2
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1ea      	bne.n	8006eaa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 0304 	and.w	r3, r3, #4
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f000 8097 	beq.w	8007010 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ee6:	4b81      	ldr	r3, [pc, #516]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 8006ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10f      	bne.n	8006f12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	60bb      	str	r3, [r7, #8]
 8006ef6:	4b7d      	ldr	r3, [pc, #500]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 8006ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006efa:	4a7c      	ldr	r2, [pc, #496]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 8006efc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f00:	6413      	str	r3, [r2, #64]	@ 0x40
 8006f02:	4b7a      	ldr	r3, [pc, #488]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 8006f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f0a:	60bb      	str	r3, [r7, #8]
 8006f0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f12:	4b77      	ldr	r3, [pc, #476]	@ (80070f0 <HAL_RCC_OscConfig+0x474>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d118      	bne.n	8006f50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f1e:	4b74      	ldr	r3, [pc, #464]	@ (80070f0 <HAL_RCC_OscConfig+0x474>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a73      	ldr	r2, [pc, #460]	@ (80070f0 <HAL_RCC_OscConfig+0x474>)
 8006f24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f2a:	f7fd ffed 	bl	8004f08 <HAL_GetTick>
 8006f2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f30:	e008      	b.n	8006f44 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f32:	f7fd ffe9 	bl	8004f08 <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d901      	bls.n	8006f44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e10c      	b.n	800715e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f44:	4b6a      	ldr	r3, [pc, #424]	@ (80070f0 <HAL_RCC_OscConfig+0x474>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d0f0      	beq.n	8006f32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d106      	bne.n	8006f66 <HAL_RCC_OscConfig+0x2ea>
 8006f58:	4b64      	ldr	r3, [pc, #400]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 8006f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f5c:	4a63      	ldr	r2, [pc, #396]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 8006f5e:	f043 0301 	orr.w	r3, r3, #1
 8006f62:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f64:	e01c      	b.n	8006fa0 <HAL_RCC_OscConfig+0x324>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	2b05      	cmp	r3, #5
 8006f6c:	d10c      	bne.n	8006f88 <HAL_RCC_OscConfig+0x30c>
 8006f6e:	4b5f      	ldr	r3, [pc, #380]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 8006f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f72:	4a5e      	ldr	r2, [pc, #376]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 8006f74:	f043 0304 	orr.w	r3, r3, #4
 8006f78:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f7a:	4b5c      	ldr	r3, [pc, #368]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 8006f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f7e:	4a5b      	ldr	r2, [pc, #364]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 8006f80:	f043 0301 	orr.w	r3, r3, #1
 8006f84:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f86:	e00b      	b.n	8006fa0 <HAL_RCC_OscConfig+0x324>
 8006f88:	4b58      	ldr	r3, [pc, #352]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 8006f8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f8c:	4a57      	ldr	r2, [pc, #348]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 8006f8e:	f023 0301 	bic.w	r3, r3, #1
 8006f92:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f94:	4b55      	ldr	r3, [pc, #340]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 8006f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f98:	4a54      	ldr	r2, [pc, #336]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 8006f9a:	f023 0304 	bic.w	r3, r3, #4
 8006f9e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d015      	beq.n	8006fd4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fa8:	f7fd ffae 	bl	8004f08 <HAL_GetTick>
 8006fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fae:	e00a      	b.n	8006fc6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006fb0:	f7fd ffaa 	bl	8004f08 <HAL_GetTick>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	1ad3      	subs	r3, r2, r3
 8006fba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d901      	bls.n	8006fc6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	e0cb      	b.n	800715e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fc6:	4b49      	ldr	r3, [pc, #292]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 8006fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fca:	f003 0302 	and.w	r3, r3, #2
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d0ee      	beq.n	8006fb0 <HAL_RCC_OscConfig+0x334>
 8006fd2:	e014      	b.n	8006ffe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fd4:	f7fd ff98 	bl	8004f08 <HAL_GetTick>
 8006fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fda:	e00a      	b.n	8006ff2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006fdc:	f7fd ff94 	bl	8004f08 <HAL_GetTick>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d901      	bls.n	8006ff2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	e0b5      	b.n	800715e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ff2:	4b3e      	ldr	r3, [pc, #248]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 8006ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ff6:	f003 0302 	and.w	r3, r3, #2
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d1ee      	bne.n	8006fdc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ffe:	7dfb      	ldrb	r3, [r7, #23]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d105      	bne.n	8007010 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007004:	4b39      	ldr	r3, [pc, #228]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 8007006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007008:	4a38      	ldr	r2, [pc, #224]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 800700a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800700e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	699b      	ldr	r3, [r3, #24]
 8007014:	2b00      	cmp	r3, #0
 8007016:	f000 80a1 	beq.w	800715c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800701a:	4b34      	ldr	r3, [pc, #208]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	f003 030c 	and.w	r3, r3, #12
 8007022:	2b08      	cmp	r3, #8
 8007024:	d05c      	beq.n	80070e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	2b02      	cmp	r3, #2
 800702c:	d141      	bne.n	80070b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800702e:	4b31      	ldr	r3, [pc, #196]	@ (80070f4 <HAL_RCC_OscConfig+0x478>)
 8007030:	2200      	movs	r2, #0
 8007032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007034:	f7fd ff68 	bl	8004f08 <HAL_GetTick>
 8007038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800703a:	e008      	b.n	800704e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800703c:	f7fd ff64 	bl	8004f08 <HAL_GetTick>
 8007040:	4602      	mov	r2, r0
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	2b02      	cmp	r3, #2
 8007048:	d901      	bls.n	800704e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	e087      	b.n	800715e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800704e:	4b27      	ldr	r3, [pc, #156]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d1f0      	bne.n	800703c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	69da      	ldr	r2, [r3, #28]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a1b      	ldr	r3, [r3, #32]
 8007062:	431a      	orrs	r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007068:	019b      	lsls	r3, r3, #6
 800706a:	431a      	orrs	r2, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007070:	085b      	lsrs	r3, r3, #1
 8007072:	3b01      	subs	r3, #1
 8007074:	041b      	lsls	r3, r3, #16
 8007076:	431a      	orrs	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800707c:	061b      	lsls	r3, r3, #24
 800707e:	491b      	ldr	r1, [pc, #108]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 8007080:	4313      	orrs	r3, r2
 8007082:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007084:	4b1b      	ldr	r3, [pc, #108]	@ (80070f4 <HAL_RCC_OscConfig+0x478>)
 8007086:	2201      	movs	r2, #1
 8007088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800708a:	f7fd ff3d 	bl	8004f08 <HAL_GetTick>
 800708e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007090:	e008      	b.n	80070a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007092:	f7fd ff39 	bl	8004f08 <HAL_GetTick>
 8007096:	4602      	mov	r2, r0
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	2b02      	cmp	r3, #2
 800709e:	d901      	bls.n	80070a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80070a0:	2303      	movs	r3, #3
 80070a2:	e05c      	b.n	800715e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070a4:	4b11      	ldr	r3, [pc, #68]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d0f0      	beq.n	8007092 <HAL_RCC_OscConfig+0x416>
 80070b0:	e054      	b.n	800715c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070b2:	4b10      	ldr	r3, [pc, #64]	@ (80070f4 <HAL_RCC_OscConfig+0x478>)
 80070b4:	2200      	movs	r2, #0
 80070b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070b8:	f7fd ff26 	bl	8004f08 <HAL_GetTick>
 80070bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070be:	e008      	b.n	80070d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070c0:	f7fd ff22 	bl	8004f08 <HAL_GetTick>
 80070c4:	4602      	mov	r2, r0
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d901      	bls.n	80070d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e045      	b.n	800715e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070d2:	4b06      	ldr	r3, [pc, #24]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1f0      	bne.n	80070c0 <HAL_RCC_OscConfig+0x444>
 80070de:	e03d      	b.n	800715c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	699b      	ldr	r3, [r3, #24]
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d107      	bne.n	80070f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	e038      	b.n	800715e <HAL_RCC_OscConfig+0x4e2>
 80070ec:	40023800 	.word	0x40023800
 80070f0:	40007000 	.word	0x40007000
 80070f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80070f8:	4b1b      	ldr	r3, [pc, #108]	@ (8007168 <HAL_RCC_OscConfig+0x4ec>)
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	2b01      	cmp	r3, #1
 8007104:	d028      	beq.n	8007158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007110:	429a      	cmp	r2, r3
 8007112:	d121      	bne.n	8007158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800711e:	429a      	cmp	r2, r3
 8007120:	d11a      	bne.n	8007158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007128:	4013      	ands	r3, r2
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800712e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007130:	4293      	cmp	r3, r2
 8007132:	d111      	bne.n	8007158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800713e:	085b      	lsrs	r3, r3, #1
 8007140:	3b01      	subs	r3, #1
 8007142:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007144:	429a      	cmp	r2, r3
 8007146:	d107      	bne.n	8007158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007152:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007154:	429a      	cmp	r2, r3
 8007156:	d001      	beq.n	800715c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	e000      	b.n	800715e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3718      	adds	r7, #24
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	40023800 	.word	0x40023800

0800716c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d101      	bne.n	8007180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	e0cc      	b.n	800731a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007180:	4b68      	ldr	r3, [pc, #416]	@ (8007324 <HAL_RCC_ClockConfig+0x1b8>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 0307 	and.w	r3, r3, #7
 8007188:	683a      	ldr	r2, [r7, #0]
 800718a:	429a      	cmp	r2, r3
 800718c:	d90c      	bls.n	80071a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800718e:	4b65      	ldr	r3, [pc, #404]	@ (8007324 <HAL_RCC_ClockConfig+0x1b8>)
 8007190:	683a      	ldr	r2, [r7, #0]
 8007192:	b2d2      	uxtb	r2, r2
 8007194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007196:	4b63      	ldr	r3, [pc, #396]	@ (8007324 <HAL_RCC_ClockConfig+0x1b8>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 0307 	and.w	r3, r3, #7
 800719e:	683a      	ldr	r2, [r7, #0]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d001      	beq.n	80071a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	e0b8      	b.n	800731a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 0302 	and.w	r3, r3, #2
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d020      	beq.n	80071f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0304 	and.w	r3, r3, #4
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d005      	beq.n	80071cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80071c0:	4b59      	ldr	r3, [pc, #356]	@ (8007328 <HAL_RCC_ClockConfig+0x1bc>)
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	4a58      	ldr	r2, [pc, #352]	@ (8007328 <HAL_RCC_ClockConfig+0x1bc>)
 80071c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80071ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 0308 	and.w	r3, r3, #8
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d005      	beq.n	80071e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80071d8:	4b53      	ldr	r3, [pc, #332]	@ (8007328 <HAL_RCC_ClockConfig+0x1bc>)
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	4a52      	ldr	r2, [pc, #328]	@ (8007328 <HAL_RCC_ClockConfig+0x1bc>)
 80071de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80071e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071e4:	4b50      	ldr	r3, [pc, #320]	@ (8007328 <HAL_RCC_ClockConfig+0x1bc>)
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	494d      	ldr	r1, [pc, #308]	@ (8007328 <HAL_RCC_ClockConfig+0x1bc>)
 80071f2:	4313      	orrs	r3, r2
 80071f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 0301 	and.w	r3, r3, #1
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d044      	beq.n	800728c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d107      	bne.n	800721a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800720a:	4b47      	ldr	r3, [pc, #284]	@ (8007328 <HAL_RCC_ClockConfig+0x1bc>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d119      	bne.n	800724a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e07f      	b.n	800731a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	2b02      	cmp	r3, #2
 8007220:	d003      	beq.n	800722a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007226:	2b03      	cmp	r3, #3
 8007228:	d107      	bne.n	800723a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800722a:	4b3f      	ldr	r3, [pc, #252]	@ (8007328 <HAL_RCC_ClockConfig+0x1bc>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d109      	bne.n	800724a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e06f      	b.n	800731a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800723a:	4b3b      	ldr	r3, [pc, #236]	@ (8007328 <HAL_RCC_ClockConfig+0x1bc>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 0302 	and.w	r3, r3, #2
 8007242:	2b00      	cmp	r3, #0
 8007244:	d101      	bne.n	800724a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e067      	b.n	800731a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800724a:	4b37      	ldr	r3, [pc, #220]	@ (8007328 <HAL_RCC_ClockConfig+0x1bc>)
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	f023 0203 	bic.w	r2, r3, #3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	4934      	ldr	r1, [pc, #208]	@ (8007328 <HAL_RCC_ClockConfig+0x1bc>)
 8007258:	4313      	orrs	r3, r2
 800725a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800725c:	f7fd fe54 	bl	8004f08 <HAL_GetTick>
 8007260:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007262:	e00a      	b.n	800727a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007264:	f7fd fe50 	bl	8004f08 <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007272:	4293      	cmp	r3, r2
 8007274:	d901      	bls.n	800727a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e04f      	b.n	800731a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800727a:	4b2b      	ldr	r3, [pc, #172]	@ (8007328 <HAL_RCC_ClockConfig+0x1bc>)
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	f003 020c 	and.w	r2, r3, #12
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	429a      	cmp	r2, r3
 800728a:	d1eb      	bne.n	8007264 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800728c:	4b25      	ldr	r3, [pc, #148]	@ (8007324 <HAL_RCC_ClockConfig+0x1b8>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 0307 	and.w	r3, r3, #7
 8007294:	683a      	ldr	r2, [r7, #0]
 8007296:	429a      	cmp	r2, r3
 8007298:	d20c      	bcs.n	80072b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800729a:	4b22      	ldr	r3, [pc, #136]	@ (8007324 <HAL_RCC_ClockConfig+0x1b8>)
 800729c:	683a      	ldr	r2, [r7, #0]
 800729e:	b2d2      	uxtb	r2, r2
 80072a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072a2:	4b20      	ldr	r3, [pc, #128]	@ (8007324 <HAL_RCC_ClockConfig+0x1b8>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f003 0307 	and.w	r3, r3, #7
 80072aa:	683a      	ldr	r2, [r7, #0]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d001      	beq.n	80072b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	e032      	b.n	800731a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 0304 	and.w	r3, r3, #4
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d008      	beq.n	80072d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80072c0:	4b19      	ldr	r3, [pc, #100]	@ (8007328 <HAL_RCC_ClockConfig+0x1bc>)
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	4916      	ldr	r1, [pc, #88]	@ (8007328 <HAL_RCC_ClockConfig+0x1bc>)
 80072ce:	4313      	orrs	r3, r2
 80072d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 0308 	and.w	r3, r3, #8
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d009      	beq.n	80072f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80072de:	4b12      	ldr	r3, [pc, #72]	@ (8007328 <HAL_RCC_ClockConfig+0x1bc>)
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	00db      	lsls	r3, r3, #3
 80072ec:	490e      	ldr	r1, [pc, #56]	@ (8007328 <HAL_RCC_ClockConfig+0x1bc>)
 80072ee:	4313      	orrs	r3, r2
 80072f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80072f2:	f000 f821 	bl	8007338 <HAL_RCC_GetSysClockFreq>
 80072f6:	4602      	mov	r2, r0
 80072f8:	4b0b      	ldr	r3, [pc, #44]	@ (8007328 <HAL_RCC_ClockConfig+0x1bc>)
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	091b      	lsrs	r3, r3, #4
 80072fe:	f003 030f 	and.w	r3, r3, #15
 8007302:	490a      	ldr	r1, [pc, #40]	@ (800732c <HAL_RCC_ClockConfig+0x1c0>)
 8007304:	5ccb      	ldrb	r3, [r1, r3]
 8007306:	fa22 f303 	lsr.w	r3, r2, r3
 800730a:	4a09      	ldr	r2, [pc, #36]	@ (8007330 <HAL_RCC_ClockConfig+0x1c4>)
 800730c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800730e:	4b09      	ldr	r3, [pc, #36]	@ (8007334 <HAL_RCC_ClockConfig+0x1c8>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4618      	mov	r0, r3
 8007314:	f7fd fdb4 	bl	8004e80 <HAL_InitTick>

  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	40023c00 	.word	0x40023c00
 8007328:	40023800 	.word	0x40023800
 800732c:	0800a0ac 	.word	0x0800a0ac
 8007330:	20000014 	.word	0x20000014
 8007334:	20000018 	.word	0x20000018

08007338 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800733c:	b094      	sub	sp, #80	@ 0x50
 800733e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007340:	2300      	movs	r3, #0
 8007342:	647b      	str	r3, [r7, #68]	@ 0x44
 8007344:	2300      	movs	r3, #0
 8007346:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007348:	2300      	movs	r3, #0
 800734a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800734c:	2300      	movs	r3, #0
 800734e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007350:	4b79      	ldr	r3, [pc, #484]	@ (8007538 <HAL_RCC_GetSysClockFreq+0x200>)
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	f003 030c 	and.w	r3, r3, #12
 8007358:	2b08      	cmp	r3, #8
 800735a:	d00d      	beq.n	8007378 <HAL_RCC_GetSysClockFreq+0x40>
 800735c:	2b08      	cmp	r3, #8
 800735e:	f200 80e1 	bhi.w	8007524 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007362:	2b00      	cmp	r3, #0
 8007364:	d002      	beq.n	800736c <HAL_RCC_GetSysClockFreq+0x34>
 8007366:	2b04      	cmp	r3, #4
 8007368:	d003      	beq.n	8007372 <HAL_RCC_GetSysClockFreq+0x3a>
 800736a:	e0db      	b.n	8007524 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800736c:	4b73      	ldr	r3, [pc, #460]	@ (800753c <HAL_RCC_GetSysClockFreq+0x204>)
 800736e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8007370:	e0db      	b.n	800752a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007372:	4b73      	ldr	r3, [pc, #460]	@ (8007540 <HAL_RCC_GetSysClockFreq+0x208>)
 8007374:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007376:	e0d8      	b.n	800752a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007378:	4b6f      	ldr	r3, [pc, #444]	@ (8007538 <HAL_RCC_GetSysClockFreq+0x200>)
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007380:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007382:	4b6d      	ldr	r3, [pc, #436]	@ (8007538 <HAL_RCC_GetSysClockFreq+0x200>)
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800738a:	2b00      	cmp	r3, #0
 800738c:	d063      	beq.n	8007456 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800738e:	4b6a      	ldr	r3, [pc, #424]	@ (8007538 <HAL_RCC_GetSysClockFreq+0x200>)
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	099b      	lsrs	r3, r3, #6
 8007394:	2200      	movs	r2, #0
 8007396:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007398:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800739a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800739c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80073a2:	2300      	movs	r3, #0
 80073a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80073a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80073aa:	4622      	mov	r2, r4
 80073ac:	462b      	mov	r3, r5
 80073ae:	f04f 0000 	mov.w	r0, #0
 80073b2:	f04f 0100 	mov.w	r1, #0
 80073b6:	0159      	lsls	r1, r3, #5
 80073b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80073bc:	0150      	lsls	r0, r2, #5
 80073be:	4602      	mov	r2, r0
 80073c0:	460b      	mov	r3, r1
 80073c2:	4621      	mov	r1, r4
 80073c4:	1a51      	subs	r1, r2, r1
 80073c6:	6139      	str	r1, [r7, #16]
 80073c8:	4629      	mov	r1, r5
 80073ca:	eb63 0301 	sbc.w	r3, r3, r1
 80073ce:	617b      	str	r3, [r7, #20]
 80073d0:	f04f 0200 	mov.w	r2, #0
 80073d4:	f04f 0300 	mov.w	r3, #0
 80073d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80073dc:	4659      	mov	r1, fp
 80073de:	018b      	lsls	r3, r1, #6
 80073e0:	4651      	mov	r1, sl
 80073e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80073e6:	4651      	mov	r1, sl
 80073e8:	018a      	lsls	r2, r1, #6
 80073ea:	4651      	mov	r1, sl
 80073ec:	ebb2 0801 	subs.w	r8, r2, r1
 80073f0:	4659      	mov	r1, fp
 80073f2:	eb63 0901 	sbc.w	r9, r3, r1
 80073f6:	f04f 0200 	mov.w	r2, #0
 80073fa:	f04f 0300 	mov.w	r3, #0
 80073fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007402:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007406:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800740a:	4690      	mov	r8, r2
 800740c:	4699      	mov	r9, r3
 800740e:	4623      	mov	r3, r4
 8007410:	eb18 0303 	adds.w	r3, r8, r3
 8007414:	60bb      	str	r3, [r7, #8]
 8007416:	462b      	mov	r3, r5
 8007418:	eb49 0303 	adc.w	r3, r9, r3
 800741c:	60fb      	str	r3, [r7, #12]
 800741e:	f04f 0200 	mov.w	r2, #0
 8007422:	f04f 0300 	mov.w	r3, #0
 8007426:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800742a:	4629      	mov	r1, r5
 800742c:	024b      	lsls	r3, r1, #9
 800742e:	4621      	mov	r1, r4
 8007430:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007434:	4621      	mov	r1, r4
 8007436:	024a      	lsls	r2, r1, #9
 8007438:	4610      	mov	r0, r2
 800743a:	4619      	mov	r1, r3
 800743c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800743e:	2200      	movs	r2, #0
 8007440:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007442:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007444:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007448:	f7f9 fae4 	bl	8000a14 <__aeabi_uldivmod>
 800744c:	4602      	mov	r2, r0
 800744e:	460b      	mov	r3, r1
 8007450:	4613      	mov	r3, r2
 8007452:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007454:	e058      	b.n	8007508 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007456:	4b38      	ldr	r3, [pc, #224]	@ (8007538 <HAL_RCC_GetSysClockFreq+0x200>)
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	099b      	lsrs	r3, r3, #6
 800745c:	2200      	movs	r2, #0
 800745e:	4618      	mov	r0, r3
 8007460:	4611      	mov	r1, r2
 8007462:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007466:	623b      	str	r3, [r7, #32]
 8007468:	2300      	movs	r3, #0
 800746a:	627b      	str	r3, [r7, #36]	@ 0x24
 800746c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007470:	4642      	mov	r2, r8
 8007472:	464b      	mov	r3, r9
 8007474:	f04f 0000 	mov.w	r0, #0
 8007478:	f04f 0100 	mov.w	r1, #0
 800747c:	0159      	lsls	r1, r3, #5
 800747e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007482:	0150      	lsls	r0, r2, #5
 8007484:	4602      	mov	r2, r0
 8007486:	460b      	mov	r3, r1
 8007488:	4641      	mov	r1, r8
 800748a:	ebb2 0a01 	subs.w	sl, r2, r1
 800748e:	4649      	mov	r1, r9
 8007490:	eb63 0b01 	sbc.w	fp, r3, r1
 8007494:	f04f 0200 	mov.w	r2, #0
 8007498:	f04f 0300 	mov.w	r3, #0
 800749c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80074a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80074a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80074a8:	ebb2 040a 	subs.w	r4, r2, sl
 80074ac:	eb63 050b 	sbc.w	r5, r3, fp
 80074b0:	f04f 0200 	mov.w	r2, #0
 80074b4:	f04f 0300 	mov.w	r3, #0
 80074b8:	00eb      	lsls	r3, r5, #3
 80074ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80074be:	00e2      	lsls	r2, r4, #3
 80074c0:	4614      	mov	r4, r2
 80074c2:	461d      	mov	r5, r3
 80074c4:	4643      	mov	r3, r8
 80074c6:	18e3      	adds	r3, r4, r3
 80074c8:	603b      	str	r3, [r7, #0]
 80074ca:	464b      	mov	r3, r9
 80074cc:	eb45 0303 	adc.w	r3, r5, r3
 80074d0:	607b      	str	r3, [r7, #4]
 80074d2:	f04f 0200 	mov.w	r2, #0
 80074d6:	f04f 0300 	mov.w	r3, #0
 80074da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80074de:	4629      	mov	r1, r5
 80074e0:	028b      	lsls	r3, r1, #10
 80074e2:	4621      	mov	r1, r4
 80074e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80074e8:	4621      	mov	r1, r4
 80074ea:	028a      	lsls	r2, r1, #10
 80074ec:	4610      	mov	r0, r2
 80074ee:	4619      	mov	r1, r3
 80074f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074f2:	2200      	movs	r2, #0
 80074f4:	61bb      	str	r3, [r7, #24]
 80074f6:	61fa      	str	r2, [r7, #28]
 80074f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074fc:	f7f9 fa8a 	bl	8000a14 <__aeabi_uldivmod>
 8007500:	4602      	mov	r2, r0
 8007502:	460b      	mov	r3, r1
 8007504:	4613      	mov	r3, r2
 8007506:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007508:	4b0b      	ldr	r3, [pc, #44]	@ (8007538 <HAL_RCC_GetSysClockFreq+0x200>)
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	0c1b      	lsrs	r3, r3, #16
 800750e:	f003 0303 	and.w	r3, r3, #3
 8007512:	3301      	adds	r3, #1
 8007514:	005b      	lsls	r3, r3, #1
 8007516:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8007518:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800751a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800751c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007520:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007522:	e002      	b.n	800752a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007524:	4b05      	ldr	r3, [pc, #20]	@ (800753c <HAL_RCC_GetSysClockFreq+0x204>)
 8007526:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007528:	bf00      	nop
    }
  }
  return sysclockfreq;
 800752a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800752c:	4618      	mov	r0, r3
 800752e:	3750      	adds	r7, #80	@ 0x50
 8007530:	46bd      	mov	sp, r7
 8007532:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007536:	bf00      	nop
 8007538:	40023800 	.word	0x40023800
 800753c:	00f42400 	.word	0x00f42400
 8007540:	007a1200 	.word	0x007a1200

08007544 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007544:	b480      	push	{r7}
 8007546:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007548:	4b03      	ldr	r3, [pc, #12]	@ (8007558 <HAL_RCC_GetHCLKFreq+0x14>)
 800754a:	681b      	ldr	r3, [r3, #0]
}
 800754c:	4618      	mov	r0, r3
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
 8007556:	bf00      	nop
 8007558:	20000014 	.word	0x20000014

0800755c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007560:	f7ff fff0 	bl	8007544 <HAL_RCC_GetHCLKFreq>
 8007564:	4602      	mov	r2, r0
 8007566:	4b05      	ldr	r3, [pc, #20]	@ (800757c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	0a9b      	lsrs	r3, r3, #10
 800756c:	f003 0307 	and.w	r3, r3, #7
 8007570:	4903      	ldr	r1, [pc, #12]	@ (8007580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007572:	5ccb      	ldrb	r3, [r1, r3]
 8007574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007578:	4618      	mov	r0, r3
 800757a:	bd80      	pop	{r7, pc}
 800757c:	40023800 	.word	0x40023800
 8007580:	0800a0bc 	.word	0x0800a0bc

08007584 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007588:	f7ff ffdc 	bl	8007544 <HAL_RCC_GetHCLKFreq>
 800758c:	4602      	mov	r2, r0
 800758e:	4b05      	ldr	r3, [pc, #20]	@ (80075a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	0b5b      	lsrs	r3, r3, #13
 8007594:	f003 0307 	and.w	r3, r3, #7
 8007598:	4903      	ldr	r1, [pc, #12]	@ (80075a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800759a:	5ccb      	ldrb	r3, [r1, r3]
 800759c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	40023800 	.word	0x40023800
 80075a8:	0800a0bc 	.word	0x0800a0bc

080075ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d101      	bne.n	80075be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	e041      	b.n	8007642 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d106      	bne.n	80075d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f7fd f9a0 	bl	8004918 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2202      	movs	r2, #2
 80075dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	3304      	adds	r3, #4
 80075e8:	4619      	mov	r1, r3
 80075ea:	4610      	mov	r0, r2
 80075ec:	f000 fbe6 	bl	8007dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3708      	adds	r7, #8
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b082      	sub	sp, #8
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d101      	bne.n	800765c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	e041      	b.n	80076e0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007662:	b2db      	uxtb	r3, r3
 8007664:	2b00      	cmp	r3, #0
 8007666:	d106      	bne.n	8007676 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 f839 	bl	80076e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2202      	movs	r2, #2
 800767a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	3304      	adds	r3, #4
 8007686:	4619      	mov	r1, r3
 8007688:	4610      	mov	r0, r2
 800768a:	f000 fb97 	bl	8007dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2201      	movs	r2, #1
 8007692:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2201      	movs	r2, #1
 800769a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2201      	movs	r2, #1
 80076a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2201      	movs	r2, #1
 80076aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2201      	movs	r2, #1
 80076b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2201      	movs	r2, #1
 80076ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2201      	movs	r2, #1
 80076c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2201      	movs	r2, #1
 80076ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2201      	movs	r2, #1
 80076d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2201      	movs	r2, #1
 80076da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3708      	adds	r7, #8
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b086      	sub	sp, #24
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d101      	bne.n	8007710 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	e097      	b.n	8007840 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007716:	b2db      	uxtb	r3, r3
 8007718:	2b00      	cmp	r3, #0
 800771a:	d106      	bne.n	800772a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f7fd f94b 	bl	80049c0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2202      	movs	r2, #2
 800772e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	6812      	ldr	r2, [r2, #0]
 800773c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007740:	f023 0307 	bic.w	r3, r3, #7
 8007744:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	3304      	adds	r3, #4
 800774e:	4619      	mov	r1, r3
 8007750:	4610      	mov	r0, r2
 8007752:	f000 fb33 	bl	8007dbc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	699b      	ldr	r3, [r3, #24]
 8007764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	6a1b      	ldr	r3, [r3, #32]
 800776c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	697a      	ldr	r2, [r7, #20]
 8007774:	4313      	orrs	r3, r2
 8007776:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800777e:	f023 0303 	bic.w	r3, r3, #3
 8007782:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	689a      	ldr	r2, [r3, #8]
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	699b      	ldr	r3, [r3, #24]
 800778c:	021b      	lsls	r3, r3, #8
 800778e:	4313      	orrs	r3, r2
 8007790:	693a      	ldr	r2, [r7, #16]
 8007792:	4313      	orrs	r3, r2
 8007794:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800779c:	f023 030c 	bic.w	r3, r3, #12
 80077a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80077a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80077ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	68da      	ldr	r2, [r3, #12]
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	69db      	ldr	r3, [r3, #28]
 80077b6:	021b      	lsls	r3, r3, #8
 80077b8:	4313      	orrs	r3, r2
 80077ba:	693a      	ldr	r2, [r7, #16]
 80077bc:	4313      	orrs	r3, r2
 80077be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	011a      	lsls	r2, r3, #4
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	6a1b      	ldr	r3, [r3, #32]
 80077ca:	031b      	lsls	r3, r3, #12
 80077cc:	4313      	orrs	r3, r2
 80077ce:	693a      	ldr	r2, [r7, #16]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80077da:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80077e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	685a      	ldr	r2, [r3, #4]
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	695b      	ldr	r3, [r3, #20]
 80077ec:	011b      	lsls	r3, r3, #4
 80077ee:	4313      	orrs	r3, r2
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	4313      	orrs	r3, r2
 80077f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	693a      	ldr	r2, [r7, #16]
 8007804:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2201      	movs	r2, #1
 8007812:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2201      	movs	r2, #1
 8007822:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2201      	movs	r2, #1
 800782a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2201      	movs	r2, #1
 8007832:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2201      	movs	r2, #1
 800783a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3718      	adds	r7, #24
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	f003 0302 	and.w	r3, r3, #2
 800785a:	2b02      	cmp	r3, #2
 800785c:	d122      	bne.n	80078a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	f003 0302 	and.w	r3, r3, #2
 8007868:	2b02      	cmp	r3, #2
 800786a:	d11b      	bne.n	80078a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f06f 0202 	mvn.w	r2, #2
 8007874:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2201      	movs	r2, #1
 800787a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	699b      	ldr	r3, [r3, #24]
 8007882:	f003 0303 	and.w	r3, r3, #3
 8007886:	2b00      	cmp	r3, #0
 8007888:	d003      	beq.n	8007892 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f7f9 ffe8 	bl	8001860 <HAL_TIM_IC_CaptureCallback>
 8007890:	e005      	b.n	800789e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 fa73 	bl	8007d7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fa7a 	bl	8007d92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	f003 0304 	and.w	r3, r3, #4
 80078ae:	2b04      	cmp	r3, #4
 80078b0:	d122      	bne.n	80078f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	f003 0304 	and.w	r3, r3, #4
 80078bc:	2b04      	cmp	r3, #4
 80078be:	d11b      	bne.n	80078f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f06f 0204 	mvn.w	r2, #4
 80078c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2202      	movs	r2, #2
 80078ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	699b      	ldr	r3, [r3, #24]
 80078d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d003      	beq.n	80078e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f7f9 ffbe 	bl	8001860 <HAL_TIM_IC_CaptureCallback>
 80078e4:	e005      	b.n	80078f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 fa49 	bl	8007d7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 fa50 	bl	8007d92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	f003 0308 	and.w	r3, r3, #8
 8007902:	2b08      	cmp	r3, #8
 8007904:	d122      	bne.n	800794c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	f003 0308 	and.w	r3, r3, #8
 8007910:	2b08      	cmp	r3, #8
 8007912:	d11b      	bne.n	800794c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f06f 0208 	mvn.w	r2, #8
 800791c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2204      	movs	r2, #4
 8007922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	69db      	ldr	r3, [r3, #28]
 800792a:	f003 0303 	and.w	r3, r3, #3
 800792e:	2b00      	cmp	r3, #0
 8007930:	d003      	beq.n	800793a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f7f9 ff94 	bl	8001860 <HAL_TIM_IC_CaptureCallback>
 8007938:	e005      	b.n	8007946 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 fa1f 	bl	8007d7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 fa26 	bl	8007d92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	f003 0310 	and.w	r3, r3, #16
 8007956:	2b10      	cmp	r3, #16
 8007958:	d122      	bne.n	80079a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	f003 0310 	and.w	r3, r3, #16
 8007964:	2b10      	cmp	r3, #16
 8007966:	d11b      	bne.n	80079a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f06f 0210 	mvn.w	r2, #16
 8007970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2208      	movs	r2, #8
 8007976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	69db      	ldr	r3, [r3, #28]
 800797e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007982:	2b00      	cmp	r3, #0
 8007984:	d003      	beq.n	800798e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f7f9 ff6a 	bl	8001860 <HAL_TIM_IC_CaptureCallback>
 800798c:	e005      	b.n	800799a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 f9f5 	bl	8007d7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 f9fc 	bl	8007d92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	f003 0301 	and.w	r3, r3, #1
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d10e      	bne.n	80079cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	f003 0301 	and.w	r3, r3, #1
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d107      	bne.n	80079cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f06f 0201 	mvn.w	r2, #1
 80079c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 f9cf 	bl	8007d6a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079d6:	2b80      	cmp	r3, #128	@ 0x80
 80079d8:	d10e      	bne.n	80079f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079e4:	2b80      	cmp	r3, #128	@ 0x80
 80079e6:	d107      	bne.n	80079f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80079f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 fda4 	bl	8008540 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a02:	2b40      	cmp	r3, #64	@ 0x40
 8007a04:	d10e      	bne.n	8007a24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a10:	2b40      	cmp	r3, #64	@ 0x40
 8007a12:	d107      	bne.n	8007a24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 f9c1 	bl	8007da6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	f003 0320 	and.w	r3, r3, #32
 8007a2e:	2b20      	cmp	r3, #32
 8007a30:	d10e      	bne.n	8007a50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	f003 0320 	and.w	r3, r3, #32
 8007a3c:	2b20      	cmp	r3, #32
 8007a3e:	d107      	bne.n	8007a50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f06f 0220 	mvn.w	r2, #32
 8007a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 fd6e 	bl	800852c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a50:	bf00      	nop
 8007a52:	3708      	adds	r7, #8
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b086      	sub	sp, #24
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a64:	2300      	movs	r3, #0
 8007a66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d101      	bne.n	8007a76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007a72:	2302      	movs	r3, #2
 8007a74:	e0ae      	b.n	8007bd4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2b0c      	cmp	r3, #12
 8007a82:	f200 809f 	bhi.w	8007bc4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007a86:	a201      	add	r2, pc, #4	@ (adr r2, 8007a8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8c:	08007ac1 	.word	0x08007ac1
 8007a90:	08007bc5 	.word	0x08007bc5
 8007a94:	08007bc5 	.word	0x08007bc5
 8007a98:	08007bc5 	.word	0x08007bc5
 8007a9c:	08007b01 	.word	0x08007b01
 8007aa0:	08007bc5 	.word	0x08007bc5
 8007aa4:	08007bc5 	.word	0x08007bc5
 8007aa8:	08007bc5 	.word	0x08007bc5
 8007aac:	08007b43 	.word	0x08007b43
 8007ab0:	08007bc5 	.word	0x08007bc5
 8007ab4:	08007bc5 	.word	0x08007bc5
 8007ab8:	08007bc5 	.word	0x08007bc5
 8007abc:	08007b83 	.word	0x08007b83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	68b9      	ldr	r1, [r7, #8]
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f000 fa18 	bl	8007efc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	699a      	ldr	r2, [r3, #24]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f042 0208 	orr.w	r2, r2, #8
 8007ada:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	699a      	ldr	r2, [r3, #24]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f022 0204 	bic.w	r2, r2, #4
 8007aea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	6999      	ldr	r1, [r3, #24]
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	691a      	ldr	r2, [r3, #16]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	430a      	orrs	r2, r1
 8007afc:	619a      	str	r2, [r3, #24]
      break;
 8007afe:	e064      	b.n	8007bca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	68b9      	ldr	r1, [r7, #8]
 8007b06:	4618      	mov	r0, r3
 8007b08:	f000 fa68 	bl	8007fdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	699a      	ldr	r2, [r3, #24]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	699a      	ldr	r2, [r3, #24]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	6999      	ldr	r1, [r3, #24]
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	021a      	lsls	r2, r3, #8
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	430a      	orrs	r2, r1
 8007b3e:	619a      	str	r2, [r3, #24]
      break;
 8007b40:	e043      	b.n	8007bca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	68b9      	ldr	r1, [r7, #8]
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f000 fabd 	bl	80080c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	69da      	ldr	r2, [r3, #28]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f042 0208 	orr.w	r2, r2, #8
 8007b5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	69da      	ldr	r2, [r3, #28]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f022 0204 	bic.w	r2, r2, #4
 8007b6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	69d9      	ldr	r1, [r3, #28]
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	691a      	ldr	r2, [r3, #16]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	430a      	orrs	r2, r1
 8007b7e:	61da      	str	r2, [r3, #28]
      break;
 8007b80:	e023      	b.n	8007bca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68b9      	ldr	r1, [r7, #8]
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f000 fb11 	bl	80081b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	69da      	ldr	r2, [r3, #28]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	69da      	ldr	r2, [r3, #28]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007bac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	69d9      	ldr	r1, [r3, #28]
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	691b      	ldr	r3, [r3, #16]
 8007bb8:	021a      	lsls	r2, r3, #8
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	430a      	orrs	r2, r1
 8007bc0:	61da      	str	r2, [r3, #28]
      break;
 8007bc2:	e002      	b.n	8007bca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	75fb      	strb	r3, [r7, #23]
      break;
 8007bc8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3718      	adds	r7, #24
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007be6:	2300      	movs	r3, #0
 8007be8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d101      	bne.n	8007bf8 <HAL_TIM_ConfigClockSource+0x1c>
 8007bf4:	2302      	movs	r3, #2
 8007bf6:	e0b4      	b.n	8007d62 <HAL_TIM_ConfigClockSource+0x186>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2202      	movs	r2, #2
 8007c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007c16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007c1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	68ba      	ldr	r2, [r7, #8]
 8007c26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c30:	d03e      	beq.n	8007cb0 <HAL_TIM_ConfigClockSource+0xd4>
 8007c32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c36:	f200 8087 	bhi.w	8007d48 <HAL_TIM_ConfigClockSource+0x16c>
 8007c3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c3e:	f000 8086 	beq.w	8007d4e <HAL_TIM_ConfigClockSource+0x172>
 8007c42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c46:	d87f      	bhi.n	8007d48 <HAL_TIM_ConfigClockSource+0x16c>
 8007c48:	2b70      	cmp	r3, #112	@ 0x70
 8007c4a:	d01a      	beq.n	8007c82 <HAL_TIM_ConfigClockSource+0xa6>
 8007c4c:	2b70      	cmp	r3, #112	@ 0x70
 8007c4e:	d87b      	bhi.n	8007d48 <HAL_TIM_ConfigClockSource+0x16c>
 8007c50:	2b60      	cmp	r3, #96	@ 0x60
 8007c52:	d050      	beq.n	8007cf6 <HAL_TIM_ConfigClockSource+0x11a>
 8007c54:	2b60      	cmp	r3, #96	@ 0x60
 8007c56:	d877      	bhi.n	8007d48 <HAL_TIM_ConfigClockSource+0x16c>
 8007c58:	2b50      	cmp	r3, #80	@ 0x50
 8007c5a:	d03c      	beq.n	8007cd6 <HAL_TIM_ConfigClockSource+0xfa>
 8007c5c:	2b50      	cmp	r3, #80	@ 0x50
 8007c5e:	d873      	bhi.n	8007d48 <HAL_TIM_ConfigClockSource+0x16c>
 8007c60:	2b40      	cmp	r3, #64	@ 0x40
 8007c62:	d058      	beq.n	8007d16 <HAL_TIM_ConfigClockSource+0x13a>
 8007c64:	2b40      	cmp	r3, #64	@ 0x40
 8007c66:	d86f      	bhi.n	8007d48 <HAL_TIM_ConfigClockSource+0x16c>
 8007c68:	2b30      	cmp	r3, #48	@ 0x30
 8007c6a:	d064      	beq.n	8007d36 <HAL_TIM_ConfigClockSource+0x15a>
 8007c6c:	2b30      	cmp	r3, #48	@ 0x30
 8007c6e:	d86b      	bhi.n	8007d48 <HAL_TIM_ConfigClockSource+0x16c>
 8007c70:	2b20      	cmp	r3, #32
 8007c72:	d060      	beq.n	8007d36 <HAL_TIM_ConfigClockSource+0x15a>
 8007c74:	2b20      	cmp	r3, #32
 8007c76:	d867      	bhi.n	8007d48 <HAL_TIM_ConfigClockSource+0x16c>
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d05c      	beq.n	8007d36 <HAL_TIM_ConfigClockSource+0x15a>
 8007c7c:	2b10      	cmp	r3, #16
 8007c7e:	d05a      	beq.n	8007d36 <HAL_TIM_ConfigClockSource+0x15a>
 8007c80:	e062      	b.n	8007d48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6818      	ldr	r0, [r3, #0]
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	6899      	ldr	r1, [r3, #8]
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	685a      	ldr	r2, [r3, #4]
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	f000 fb5d 	bl	8008350 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007ca4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68ba      	ldr	r2, [r7, #8]
 8007cac:	609a      	str	r2, [r3, #8]
      break;
 8007cae:	e04f      	b.n	8007d50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6818      	ldr	r0, [r3, #0]
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	6899      	ldr	r1, [r3, #8]
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	685a      	ldr	r2, [r3, #4]
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	f000 fb46 	bl	8008350 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	689a      	ldr	r2, [r3, #8]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007cd2:	609a      	str	r2, [r3, #8]
      break;
 8007cd4:	e03c      	b.n	8007d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6818      	ldr	r0, [r3, #0]
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	6859      	ldr	r1, [r3, #4]
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	f000 faba 	bl	800825c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2150      	movs	r1, #80	@ 0x50
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f000 fb13 	bl	800831a <TIM_ITRx_SetConfig>
      break;
 8007cf4:	e02c      	b.n	8007d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6818      	ldr	r0, [r3, #0]
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	6859      	ldr	r1, [r3, #4]
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	461a      	mov	r2, r3
 8007d04:	f000 fad9 	bl	80082ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2160      	movs	r1, #96	@ 0x60
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f000 fb03 	bl	800831a <TIM_ITRx_SetConfig>
      break;
 8007d14:	e01c      	b.n	8007d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6818      	ldr	r0, [r3, #0]
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	6859      	ldr	r1, [r3, #4]
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	461a      	mov	r2, r3
 8007d24:	f000 fa9a 	bl	800825c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2140      	movs	r1, #64	@ 0x40
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f000 faf3 	bl	800831a <TIM_ITRx_SetConfig>
      break;
 8007d34:	e00c      	b.n	8007d50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4619      	mov	r1, r3
 8007d40:	4610      	mov	r0, r2
 8007d42:	f000 faea 	bl	800831a <TIM_ITRx_SetConfig>
      break;
 8007d46:	e003      	b.n	8007d50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8007d4c:	e000      	b.n	8007d50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007d4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d6a:	b480      	push	{r7}
 8007d6c:	b083      	sub	sp, #12
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007d72:	bf00      	nop
 8007d74:	370c      	adds	r7, #12
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr

08007d7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d7e:	b480      	push	{r7}
 8007d80:	b083      	sub	sp, #12
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d86:	bf00      	nop
 8007d88:	370c      	adds	r7, #12
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr

08007d92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d92:	b480      	push	{r7}
 8007d94:	b083      	sub	sp, #12
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d9a:	bf00      	nop
 8007d9c:	370c      	adds	r7, #12
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr

08007da6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007da6:	b480      	push	{r7}
 8007da8:	b083      	sub	sp, #12
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007dae:	bf00      	nop
 8007db0:	370c      	adds	r7, #12
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr
	...

08007dbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	4a40      	ldr	r2, [pc, #256]	@ (8007ed0 <TIM_Base_SetConfig+0x114>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d013      	beq.n	8007dfc <TIM_Base_SetConfig+0x40>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dda:	d00f      	beq.n	8007dfc <TIM_Base_SetConfig+0x40>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	4a3d      	ldr	r2, [pc, #244]	@ (8007ed4 <TIM_Base_SetConfig+0x118>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d00b      	beq.n	8007dfc <TIM_Base_SetConfig+0x40>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	4a3c      	ldr	r2, [pc, #240]	@ (8007ed8 <TIM_Base_SetConfig+0x11c>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d007      	beq.n	8007dfc <TIM_Base_SetConfig+0x40>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	4a3b      	ldr	r2, [pc, #236]	@ (8007edc <TIM_Base_SetConfig+0x120>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d003      	beq.n	8007dfc <TIM_Base_SetConfig+0x40>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4a3a      	ldr	r2, [pc, #232]	@ (8007ee0 <TIM_Base_SetConfig+0x124>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d108      	bne.n	8007e0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a2f      	ldr	r2, [pc, #188]	@ (8007ed0 <TIM_Base_SetConfig+0x114>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d02b      	beq.n	8007e6e <TIM_Base_SetConfig+0xb2>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e1c:	d027      	beq.n	8007e6e <TIM_Base_SetConfig+0xb2>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4a2c      	ldr	r2, [pc, #176]	@ (8007ed4 <TIM_Base_SetConfig+0x118>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d023      	beq.n	8007e6e <TIM_Base_SetConfig+0xb2>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a2b      	ldr	r2, [pc, #172]	@ (8007ed8 <TIM_Base_SetConfig+0x11c>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d01f      	beq.n	8007e6e <TIM_Base_SetConfig+0xb2>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a2a      	ldr	r2, [pc, #168]	@ (8007edc <TIM_Base_SetConfig+0x120>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d01b      	beq.n	8007e6e <TIM_Base_SetConfig+0xb2>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a29      	ldr	r2, [pc, #164]	@ (8007ee0 <TIM_Base_SetConfig+0x124>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d017      	beq.n	8007e6e <TIM_Base_SetConfig+0xb2>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a28      	ldr	r2, [pc, #160]	@ (8007ee4 <TIM_Base_SetConfig+0x128>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d013      	beq.n	8007e6e <TIM_Base_SetConfig+0xb2>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a27      	ldr	r2, [pc, #156]	@ (8007ee8 <TIM_Base_SetConfig+0x12c>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d00f      	beq.n	8007e6e <TIM_Base_SetConfig+0xb2>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4a26      	ldr	r2, [pc, #152]	@ (8007eec <TIM_Base_SetConfig+0x130>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d00b      	beq.n	8007e6e <TIM_Base_SetConfig+0xb2>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a25      	ldr	r2, [pc, #148]	@ (8007ef0 <TIM_Base_SetConfig+0x134>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d007      	beq.n	8007e6e <TIM_Base_SetConfig+0xb2>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a24      	ldr	r2, [pc, #144]	@ (8007ef4 <TIM_Base_SetConfig+0x138>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d003      	beq.n	8007e6e <TIM_Base_SetConfig+0xb2>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4a23      	ldr	r2, [pc, #140]	@ (8007ef8 <TIM_Base_SetConfig+0x13c>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d108      	bne.n	8007e80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	695b      	ldr	r3, [r3, #20]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	68fa      	ldr	r2, [r7, #12]
 8007e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	689a      	ldr	r2, [r3, #8]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8007ed0 <TIM_Base_SetConfig+0x114>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d003      	beq.n	8007eb4 <TIM_Base_SetConfig+0xf8>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	4a0c      	ldr	r2, [pc, #48]	@ (8007ee0 <TIM_Base_SetConfig+0x124>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d103      	bne.n	8007ebc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	691a      	ldr	r2, [r3, #16]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	615a      	str	r2, [r3, #20]
}
 8007ec2:	bf00      	nop
 8007ec4:	3714      	adds	r7, #20
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	40010000 	.word	0x40010000
 8007ed4:	40000400 	.word	0x40000400
 8007ed8:	40000800 	.word	0x40000800
 8007edc:	40000c00 	.word	0x40000c00
 8007ee0:	40010400 	.word	0x40010400
 8007ee4:	40014000 	.word	0x40014000
 8007ee8:	40014400 	.word	0x40014400
 8007eec:	40014800 	.word	0x40014800
 8007ef0:	40001800 	.word	0x40001800
 8007ef4:	40001c00 	.word	0x40001c00
 8007ef8:	40002000 	.word	0x40002000

08007efc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b087      	sub	sp, #28
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a1b      	ldr	r3, [r3, #32]
 8007f0a:	f023 0201 	bic.w	r2, r3, #1
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a1b      	ldr	r3, [r3, #32]
 8007f16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	699b      	ldr	r3, [r3, #24]
 8007f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f023 0303 	bic.w	r3, r3, #3
 8007f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	f023 0302 	bic.w	r3, r3, #2
 8007f44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	697a      	ldr	r2, [r7, #20]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	4a20      	ldr	r2, [pc, #128]	@ (8007fd4 <TIM_OC1_SetConfig+0xd8>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d003      	beq.n	8007f60 <TIM_OC1_SetConfig+0x64>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	4a1f      	ldr	r2, [pc, #124]	@ (8007fd8 <TIM_OC1_SetConfig+0xdc>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d10c      	bne.n	8007f7a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	f023 0308 	bic.w	r3, r3, #8
 8007f66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	697a      	ldr	r2, [r7, #20]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	f023 0304 	bic.w	r3, r3, #4
 8007f78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4a15      	ldr	r2, [pc, #84]	@ (8007fd4 <TIM_OC1_SetConfig+0xd8>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d003      	beq.n	8007f8a <TIM_OC1_SetConfig+0x8e>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a14      	ldr	r2, [pc, #80]	@ (8007fd8 <TIM_OC1_SetConfig+0xdc>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d111      	bne.n	8007fae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007f98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	695b      	ldr	r3, [r3, #20]
 8007f9e:	693a      	ldr	r2, [r7, #16]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	699b      	ldr	r3, [r3, #24]
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	693a      	ldr	r2, [r7, #16]
 8007fb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	68fa      	ldr	r2, [r7, #12]
 8007fb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	685a      	ldr	r2, [r3, #4]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	697a      	ldr	r2, [r7, #20]
 8007fc6:	621a      	str	r2, [r3, #32]
}
 8007fc8:	bf00      	nop
 8007fca:	371c      	adds	r7, #28
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr
 8007fd4:	40010000 	.word	0x40010000
 8007fd8:	40010400 	.word	0x40010400

08007fdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b087      	sub	sp, #28
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a1b      	ldr	r3, [r3, #32]
 8007fea:	f023 0210 	bic.w	r2, r3, #16
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a1b      	ldr	r3, [r3, #32]
 8007ff6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	699b      	ldr	r3, [r3, #24]
 8008002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800800a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008012:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	021b      	lsls	r3, r3, #8
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	4313      	orrs	r3, r2
 800801e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	f023 0320 	bic.w	r3, r3, #32
 8008026:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	011b      	lsls	r3, r3, #4
 800802e:	697a      	ldr	r2, [r7, #20]
 8008030:	4313      	orrs	r3, r2
 8008032:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a22      	ldr	r2, [pc, #136]	@ (80080c0 <TIM_OC2_SetConfig+0xe4>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d003      	beq.n	8008044 <TIM_OC2_SetConfig+0x68>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a21      	ldr	r2, [pc, #132]	@ (80080c4 <TIM_OC2_SetConfig+0xe8>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d10d      	bne.n	8008060 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800804a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	011b      	lsls	r3, r3, #4
 8008052:	697a      	ldr	r2, [r7, #20]
 8008054:	4313      	orrs	r3, r2
 8008056:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800805e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a17      	ldr	r2, [pc, #92]	@ (80080c0 <TIM_OC2_SetConfig+0xe4>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d003      	beq.n	8008070 <TIM_OC2_SetConfig+0x94>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4a16      	ldr	r2, [pc, #88]	@ (80080c4 <TIM_OC2_SetConfig+0xe8>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d113      	bne.n	8008098 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008076:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800807e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	695b      	ldr	r3, [r3, #20]
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	693a      	ldr	r2, [r7, #16]
 8008088:	4313      	orrs	r3, r2
 800808a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	699b      	ldr	r3, [r3, #24]
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	693a      	ldr	r2, [r7, #16]
 8008094:	4313      	orrs	r3, r2
 8008096:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	693a      	ldr	r2, [r7, #16]
 800809c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	68fa      	ldr	r2, [r7, #12]
 80080a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	685a      	ldr	r2, [r3, #4]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	697a      	ldr	r2, [r7, #20]
 80080b0:	621a      	str	r2, [r3, #32]
}
 80080b2:	bf00      	nop
 80080b4:	371c      	adds	r7, #28
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	40010000 	.word	0x40010000
 80080c4:	40010400 	.word	0x40010400

080080c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b087      	sub	sp, #28
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a1b      	ldr	r3, [r3, #32]
 80080d6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a1b      	ldr	r3, [r3, #32]
 80080e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	69db      	ldr	r3, [r3, #28]
 80080ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f023 0303 	bic.w	r3, r3, #3
 80080fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	4313      	orrs	r3, r2
 8008108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008110:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	021b      	lsls	r3, r3, #8
 8008118:	697a      	ldr	r2, [r7, #20]
 800811a:	4313      	orrs	r3, r2
 800811c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4a21      	ldr	r2, [pc, #132]	@ (80081a8 <TIM_OC3_SetConfig+0xe0>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d003      	beq.n	800812e <TIM_OC3_SetConfig+0x66>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a20      	ldr	r2, [pc, #128]	@ (80081ac <TIM_OC3_SetConfig+0xe4>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d10d      	bne.n	800814a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008134:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	021b      	lsls	r3, r3, #8
 800813c:	697a      	ldr	r2, [r7, #20]
 800813e:	4313      	orrs	r3, r2
 8008140:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008148:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4a16      	ldr	r2, [pc, #88]	@ (80081a8 <TIM_OC3_SetConfig+0xe0>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d003      	beq.n	800815a <TIM_OC3_SetConfig+0x92>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4a15      	ldr	r2, [pc, #84]	@ (80081ac <TIM_OC3_SetConfig+0xe4>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d113      	bne.n	8008182 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008160:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008168:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	695b      	ldr	r3, [r3, #20]
 800816e:	011b      	lsls	r3, r3, #4
 8008170:	693a      	ldr	r2, [r7, #16]
 8008172:	4313      	orrs	r3, r2
 8008174:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	699b      	ldr	r3, [r3, #24]
 800817a:	011b      	lsls	r3, r3, #4
 800817c:	693a      	ldr	r2, [r7, #16]
 800817e:	4313      	orrs	r3, r2
 8008180:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	693a      	ldr	r2, [r7, #16]
 8008186:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	68fa      	ldr	r2, [r7, #12]
 800818c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	685a      	ldr	r2, [r3, #4]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	697a      	ldr	r2, [r7, #20]
 800819a:	621a      	str	r2, [r3, #32]
}
 800819c:	bf00      	nop
 800819e:	371c      	adds	r7, #28
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr
 80081a8:	40010000 	.word	0x40010000
 80081ac:	40010400 	.word	0x40010400

080081b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b087      	sub	sp, #28
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6a1b      	ldr	r3, [r3, #32]
 80081be:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6a1b      	ldr	r3, [r3, #32]
 80081ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	69db      	ldr	r3, [r3, #28]
 80081d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	021b      	lsls	r3, r3, #8
 80081ee:	68fa      	ldr	r2, [r7, #12]
 80081f0:	4313      	orrs	r3, r2
 80081f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80081fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	031b      	lsls	r3, r3, #12
 8008202:	693a      	ldr	r2, [r7, #16]
 8008204:	4313      	orrs	r3, r2
 8008206:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a12      	ldr	r2, [pc, #72]	@ (8008254 <TIM_OC4_SetConfig+0xa4>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d003      	beq.n	8008218 <TIM_OC4_SetConfig+0x68>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4a11      	ldr	r2, [pc, #68]	@ (8008258 <TIM_OC4_SetConfig+0xa8>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d109      	bne.n	800822c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800821e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	695b      	ldr	r3, [r3, #20]
 8008224:	019b      	lsls	r3, r3, #6
 8008226:	697a      	ldr	r2, [r7, #20]
 8008228:	4313      	orrs	r3, r2
 800822a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	697a      	ldr	r2, [r7, #20]
 8008230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	685a      	ldr	r2, [r3, #4]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	693a      	ldr	r2, [r7, #16]
 8008244:	621a      	str	r2, [r3, #32]
}
 8008246:	bf00      	nop
 8008248:	371c      	adds	r7, #28
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	40010000 	.word	0x40010000
 8008258:	40010400 	.word	0x40010400

0800825c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800825c:	b480      	push	{r7}
 800825e:	b087      	sub	sp, #28
 8008260:	af00      	add	r7, sp, #0
 8008262:	60f8      	str	r0, [r7, #12]
 8008264:	60b9      	str	r1, [r7, #8]
 8008266:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	6a1b      	ldr	r3, [r3, #32]
 800826c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	6a1b      	ldr	r3, [r3, #32]
 8008272:	f023 0201 	bic.w	r2, r3, #1
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	699b      	ldr	r3, [r3, #24]
 800827e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008286:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	011b      	lsls	r3, r3, #4
 800828c:	693a      	ldr	r2, [r7, #16]
 800828e:	4313      	orrs	r3, r2
 8008290:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	f023 030a 	bic.w	r3, r3, #10
 8008298:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800829a:	697a      	ldr	r2, [r7, #20]
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	4313      	orrs	r3, r2
 80082a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	693a      	ldr	r2, [r7, #16]
 80082a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	697a      	ldr	r2, [r7, #20]
 80082ac:	621a      	str	r2, [r3, #32]
}
 80082ae:	bf00      	nop
 80082b0:	371c      	adds	r7, #28
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr

080082ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082ba:	b480      	push	{r7}
 80082bc:	b087      	sub	sp, #28
 80082be:	af00      	add	r7, sp, #0
 80082c0:	60f8      	str	r0, [r7, #12]
 80082c2:	60b9      	str	r1, [r7, #8]
 80082c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	6a1b      	ldr	r3, [r3, #32]
 80082ca:	f023 0210 	bic.w	r2, r3, #16
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	699b      	ldr	r3, [r3, #24]
 80082d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6a1b      	ldr	r3, [r3, #32]
 80082dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80082e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	031b      	lsls	r3, r3, #12
 80082ea:	697a      	ldr	r2, [r7, #20]
 80082ec:	4313      	orrs	r3, r2
 80082ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80082f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	011b      	lsls	r3, r3, #4
 80082fc:	693a      	ldr	r2, [r7, #16]
 80082fe:	4313      	orrs	r3, r2
 8008300:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	697a      	ldr	r2, [r7, #20]
 8008306:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	693a      	ldr	r2, [r7, #16]
 800830c:	621a      	str	r2, [r3, #32]
}
 800830e:	bf00      	nop
 8008310:	371c      	adds	r7, #28
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr

0800831a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800831a:	b480      	push	{r7}
 800831c:	b085      	sub	sp, #20
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
 8008322:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008330:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008332:	683a      	ldr	r2, [r7, #0]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	4313      	orrs	r3, r2
 8008338:	f043 0307 	orr.w	r3, r3, #7
 800833c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	68fa      	ldr	r2, [r7, #12]
 8008342:	609a      	str	r2, [r3, #8]
}
 8008344:	bf00      	nop
 8008346:	3714      	adds	r7, #20
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008350:	b480      	push	{r7}
 8008352:	b087      	sub	sp, #28
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	607a      	str	r2, [r7, #4]
 800835c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800836a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	021a      	lsls	r2, r3, #8
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	431a      	orrs	r2, r3
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	4313      	orrs	r3, r2
 8008378:	697a      	ldr	r2, [r7, #20]
 800837a:	4313      	orrs	r3, r2
 800837c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	697a      	ldr	r2, [r7, #20]
 8008382:	609a      	str	r2, [r3, #8]
}
 8008384:	bf00      	nop
 8008386:	371c      	adds	r7, #28
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008390:	b480      	push	{r7}
 8008392:	b085      	sub	sp, #20
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d101      	bne.n	80083a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80083a4:	2302      	movs	r3, #2
 80083a6:	e05a      	b.n	800845e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2202      	movs	r2, #2
 80083b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a21      	ldr	r2, [pc, #132]	@ (800846c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d022      	beq.n	8008432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083f4:	d01d      	beq.n	8008432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a1d      	ldr	r2, [pc, #116]	@ (8008470 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d018      	beq.n	8008432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a1b      	ldr	r2, [pc, #108]	@ (8008474 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d013      	beq.n	8008432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a1a      	ldr	r2, [pc, #104]	@ (8008478 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d00e      	beq.n	8008432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a18      	ldr	r2, [pc, #96]	@ (800847c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d009      	beq.n	8008432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a17      	ldr	r2, [pc, #92]	@ (8008480 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d004      	beq.n	8008432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a15      	ldr	r2, [pc, #84]	@ (8008484 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d10c      	bne.n	800844c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008438:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	68ba      	ldr	r2, [r7, #8]
 8008440:	4313      	orrs	r3, r2
 8008442:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	68ba      	ldr	r2, [r7, #8]
 800844a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800845c:	2300      	movs	r3, #0
}
 800845e:	4618      	mov	r0, r3
 8008460:	3714      	adds	r7, #20
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop
 800846c:	40010000 	.word	0x40010000
 8008470:	40000400 	.word	0x40000400
 8008474:	40000800 	.word	0x40000800
 8008478:	40000c00 	.word	0x40000c00
 800847c:	40010400 	.word	0x40010400
 8008480:	40014000 	.word	0x40014000
 8008484:	40001800 	.word	0x40001800

08008488 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008488:	b480      	push	{r7}
 800848a:	b085      	sub	sp, #20
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008492:	2300      	movs	r3, #0
 8008494:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800849c:	2b01      	cmp	r3, #1
 800849e:	d101      	bne.n	80084a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80084a0:	2302      	movs	r3, #2
 80084a2:	e03d      	b.n	8008520 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2201      	movs	r2, #1
 80084a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	68db      	ldr	r3, [r3, #12]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	4313      	orrs	r3, r2
 80084c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	4313      	orrs	r3, r2
 80084d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	695b      	ldr	r3, [r3, #20]
 80084fc:	4313      	orrs	r3, r2
 80084fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	69db      	ldr	r3, [r3, #28]
 800850a:	4313      	orrs	r3, r2
 800850c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	68fa      	ldr	r2, [r7, #12]
 8008514:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800851e:	2300      	movs	r3, #0
}
 8008520:	4618      	mov	r0, r3
 8008522:	3714      	adds	r7, #20
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008534:	bf00      	nop
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008540:	b480      	push	{r7}
 8008542:	b083      	sub	sp, #12
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008548:	bf00      	nop
 800854a:	370c      	adds	r7, #12
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d101      	bne.n	8008566 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008562:	2301      	movs	r3, #1
 8008564:	e03f      	b.n	80085e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800856c:	b2db      	uxtb	r3, r3
 800856e:	2b00      	cmp	r3, #0
 8008570:	d106      	bne.n	8008580 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f7fc faa8 	bl	8004ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2224      	movs	r2, #36	@ 0x24
 8008584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	68da      	ldr	r2, [r3, #12]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008596:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 ff43 	bl	8009424 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	691a      	ldr	r2, [r3, #16]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80085ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	695a      	ldr	r2, [r3, #20]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80085bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	68da      	ldr	r2, [r3, #12]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80085cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2200      	movs	r2, #0
 80085d2:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2220      	movs	r2, #32
 80085d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2220      	movs	r2, #32
 80085e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3708      	adds	r7, #8
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
	...

080085f0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b08c      	sub	sp, #48	@ 0x30
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	4613      	mov	r3, r2
 80085fc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008604:	b2db      	uxtb	r3, r3
 8008606:	2b20      	cmp	r3, #32
 8008608:	d165      	bne.n	80086d6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d002      	beq.n	8008616 <HAL_UART_Transmit_DMA+0x26>
 8008610:	88fb      	ldrh	r3, [r7, #6]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d101      	bne.n	800861a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008616:	2301      	movs	r3, #1
 8008618:	e05e      	b.n	80086d8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008620:	2b01      	cmp	r3, #1
 8008622:	d101      	bne.n	8008628 <HAL_UART_Transmit_DMA+0x38>
 8008624:	2302      	movs	r3, #2
 8008626:	e057      	b.n	80086d8 <HAL_UART_Transmit_DMA+0xe8>
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2201      	movs	r2, #1
 800862c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 8008630:	68ba      	ldr	r2, [r7, #8]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	88fa      	ldrh	r2, [r7, #6]
 800863a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	88fa      	ldrh	r2, [r7, #6]
 8008640:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2200      	movs	r2, #0
 8008646:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2221      	movs	r2, #33	@ 0x21
 800864c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008654:	4a22      	ldr	r2, [pc, #136]	@ (80086e0 <HAL_UART_Transmit_DMA+0xf0>)
 8008656:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800865c:	4a21      	ldr	r2, [pc, #132]	@ (80086e4 <HAL_UART_Transmit_DMA+0xf4>)
 800865e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008664:	4a20      	ldr	r2, [pc, #128]	@ (80086e8 <HAL_UART_Transmit_DMA+0xf8>)
 8008666:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800866c:	2200      	movs	r2, #0
 800866e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008670:	f107 0308 	add.w	r3, r7, #8
 8008674:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800867a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800867c:	6819      	ldr	r1, [r3, #0]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	3304      	adds	r3, #4
 8008684:	461a      	mov	r2, r3
 8008686:	88fb      	ldrh	r3, [r7, #6]
 8008688:	f7fc fe2e 	bl	80052e8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008694:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2200      	movs	r2, #0
 800869a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	3314      	adds	r3, #20
 80086a4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a6:	69bb      	ldr	r3, [r7, #24]
 80086a8:	e853 3f00 	ldrex	r3, [r3]
 80086ac:	617b      	str	r3, [r7, #20]
   return(result);
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	3314      	adds	r3, #20
 80086bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80086be:	627a      	str	r2, [r7, #36]	@ 0x24
 80086c0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c2:	6a39      	ldr	r1, [r7, #32]
 80086c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086c6:	e841 2300 	strex	r3, r2, [r1]
 80086ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d1e5      	bne.n	800869e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80086d2:	2300      	movs	r3, #0
 80086d4:	e000      	b.n	80086d8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80086d6:	2302      	movs	r3, #2
  }
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3730      	adds	r7, #48	@ 0x30
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}
 80086e0:	08008cbd 	.word	0x08008cbd
 80086e4:	08008d57 	.word	0x08008d57
 80086e8:	08008ecf 	.word	0x08008ecf

080086ec <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	4613      	mov	r3, r2
 80086f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008700:	b2db      	uxtb	r3, r3
 8008702:	2b20      	cmp	r3, #32
 8008704:	d11d      	bne.n	8008742 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d002      	beq.n	8008712 <HAL_UART_Receive_DMA+0x26>
 800870c:	88fb      	ldrh	r3, [r7, #6]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d101      	bne.n	8008716 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	e016      	b.n	8008744 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800871c:	2b01      	cmp	r3, #1
 800871e:	d101      	bne.n	8008724 <HAL_UART_Receive_DMA+0x38>
 8008720:	2302      	movs	r3, #2
 8008722:	e00f      	b.n	8008744 <HAL_UART_Receive_DMA+0x58>
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2200      	movs	r2, #0
 8008730:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008732:	88fb      	ldrh	r3, [r7, #6]
 8008734:	461a      	mov	r2, r3
 8008736:	68b9      	ldr	r1, [r7, #8]
 8008738:	68f8      	ldr	r0, [r7, #12]
 800873a:	f000 fc13 	bl	8008f64 <UART_Start_Receive_DMA>
 800873e:	4603      	mov	r3, r0
 8008740:	e000      	b.n	8008744 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008742:	2302      	movs	r3, #2
  }
}
 8008744:	4618      	mov	r0, r3
 8008746:	3710      	adds	r7, #16
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b0ba      	sub	sp, #232	@ 0xe8
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	695b      	ldr	r3, [r3, #20]
 800876e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008772:	2300      	movs	r3, #0
 8008774:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008778:	2300      	movs	r3, #0
 800877a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800877e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008782:	f003 030f 	and.w	r3, r3, #15
 8008786:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800878a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800878e:	2b00      	cmp	r3, #0
 8008790:	d10f      	bne.n	80087b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008796:	f003 0320 	and.w	r3, r3, #32
 800879a:	2b00      	cmp	r3, #0
 800879c:	d009      	beq.n	80087b2 <HAL_UART_IRQHandler+0x66>
 800879e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087a2:	f003 0320 	and.w	r3, r3, #32
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d003      	beq.n	80087b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 fd7f 	bl	80092ae <UART_Receive_IT>
      return;
 80087b0:	e256      	b.n	8008c60 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80087b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	f000 80de 	beq.w	8008978 <HAL_UART_IRQHandler+0x22c>
 80087bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087c0:	f003 0301 	and.w	r3, r3, #1
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d106      	bne.n	80087d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80087c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087cc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	f000 80d1 	beq.w	8008978 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80087d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087da:	f003 0301 	and.w	r3, r3, #1
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d00b      	beq.n	80087fa <HAL_UART_IRQHandler+0xae>
 80087e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d005      	beq.n	80087fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087f2:	f043 0201 	orr.w	r2, r3, #1
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80087fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087fe:	f003 0304 	and.w	r3, r3, #4
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00b      	beq.n	800881e <HAL_UART_IRQHandler+0xd2>
 8008806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800880a:	f003 0301 	and.w	r3, r3, #1
 800880e:	2b00      	cmp	r3, #0
 8008810:	d005      	beq.n	800881e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008816:	f043 0202 	orr.w	r2, r3, #2
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800881e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008822:	f003 0302 	and.w	r3, r3, #2
 8008826:	2b00      	cmp	r3, #0
 8008828:	d00b      	beq.n	8008842 <HAL_UART_IRQHandler+0xf6>
 800882a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800882e:	f003 0301 	and.w	r3, r3, #1
 8008832:	2b00      	cmp	r3, #0
 8008834:	d005      	beq.n	8008842 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800883a:	f043 0204 	orr.w	r2, r3, #4
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008846:	f003 0308 	and.w	r3, r3, #8
 800884a:	2b00      	cmp	r3, #0
 800884c:	d011      	beq.n	8008872 <HAL_UART_IRQHandler+0x126>
 800884e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008852:	f003 0320 	and.w	r3, r3, #32
 8008856:	2b00      	cmp	r3, #0
 8008858:	d105      	bne.n	8008866 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800885a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800885e:	f003 0301 	and.w	r3, r3, #1
 8008862:	2b00      	cmp	r3, #0
 8008864:	d005      	beq.n	8008872 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800886a:	f043 0208 	orr.w	r2, r3, #8
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008876:	2b00      	cmp	r3, #0
 8008878:	f000 81ed 	beq.w	8008c56 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800887c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008880:	f003 0320 	and.w	r3, r3, #32
 8008884:	2b00      	cmp	r3, #0
 8008886:	d008      	beq.n	800889a <HAL_UART_IRQHandler+0x14e>
 8008888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800888c:	f003 0320 	and.w	r3, r3, #32
 8008890:	2b00      	cmp	r3, #0
 8008892:	d002      	beq.n	800889a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 fd0a 	bl	80092ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	695b      	ldr	r3, [r3, #20]
 80088a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088a4:	2b40      	cmp	r3, #64	@ 0x40
 80088a6:	bf0c      	ite	eq
 80088a8:	2301      	moveq	r3, #1
 80088aa:	2300      	movne	r3, #0
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088b6:	f003 0308 	and.w	r3, r3, #8
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d103      	bne.n	80088c6 <HAL_UART_IRQHandler+0x17a>
 80088be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d04f      	beq.n	8008966 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fc12 	bl	80090f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	695b      	ldr	r3, [r3, #20]
 80088d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088d6:	2b40      	cmp	r3, #64	@ 0x40
 80088d8:	d141      	bne.n	800895e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	3314      	adds	r3, #20
 80088e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80088e8:	e853 3f00 	ldrex	r3, [r3]
 80088ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80088f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80088f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	3314      	adds	r3, #20
 8008902:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008906:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800890a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800890e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008912:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008916:	e841 2300 	strex	r3, r2, [r1]
 800891a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800891e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d1d9      	bne.n	80088da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800892a:	2b00      	cmp	r3, #0
 800892c:	d013      	beq.n	8008956 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008932:	4a7d      	ldr	r2, [pc, #500]	@ (8008b28 <HAL_UART_IRQHandler+0x3dc>)
 8008934:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800893a:	4618      	mov	r0, r3
 800893c:	f7fc fd9c 	bl	8005478 <HAL_DMA_Abort_IT>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d016      	beq.n	8008974 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800894a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008950:	4610      	mov	r0, r2
 8008952:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008954:	e00e      	b.n	8008974 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f99a 	bl	8008c90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800895c:	e00a      	b.n	8008974 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f996 	bl	8008c90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008964:	e006      	b.n	8008974 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 f992 	bl	8008c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8008972:	e170      	b.n	8008c56 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008974:	bf00      	nop
    return;
 8008976:	e16e      	b.n	8008c56 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800897c:	2b01      	cmp	r3, #1
 800897e:	f040 814a 	bne.w	8008c16 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008986:	f003 0310 	and.w	r3, r3, #16
 800898a:	2b00      	cmp	r3, #0
 800898c:	f000 8143 	beq.w	8008c16 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008994:	f003 0310 	and.w	r3, r3, #16
 8008998:	2b00      	cmp	r3, #0
 800899a:	f000 813c 	beq.w	8008c16 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800899e:	2300      	movs	r3, #0
 80089a0:	60bb      	str	r3, [r7, #8]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	60bb      	str	r3, [r7, #8]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	60bb      	str	r3, [r7, #8]
 80089b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	695b      	ldr	r3, [r3, #20]
 80089ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089be:	2b40      	cmp	r3, #64	@ 0x40
 80089c0:	f040 80b4 	bne.w	8008b2c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80089d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f000 8140 	beq.w	8008c5a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80089de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80089e2:	429a      	cmp	r2, r3
 80089e4:	f080 8139 	bcs.w	8008c5a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80089ee:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089f4:	69db      	ldr	r3, [r3, #28]
 80089f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089fa:	f000 8088 	beq.w	8008b0e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	330c      	adds	r3, #12
 8008a04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008a0c:	e853 3f00 	ldrex	r3, [r3]
 8008a10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008a14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008a18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	330c      	adds	r3, #12
 8008a26:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008a2a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008a2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a32:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008a36:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008a3a:	e841 2300 	strex	r3, r2, [r1]
 8008a3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008a42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d1d9      	bne.n	80089fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	3314      	adds	r3, #20
 8008a50:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a54:	e853 3f00 	ldrex	r3, [r3]
 8008a58:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008a5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008a5c:	f023 0301 	bic.w	r3, r3, #1
 8008a60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	3314      	adds	r3, #20
 8008a6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008a6e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008a72:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a74:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008a76:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008a7a:	e841 2300 	strex	r3, r2, [r1]
 8008a7e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008a80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d1e1      	bne.n	8008a4a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	3314      	adds	r3, #20
 8008a8c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008a90:	e853 3f00 	ldrex	r3, [r3]
 8008a94:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008a96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008a98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	3314      	adds	r3, #20
 8008aa6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008aaa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008aac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008ab0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008ab2:	e841 2300 	strex	r3, r2, [r1]
 8008ab6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008ab8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d1e3      	bne.n	8008a86 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2220      	movs	r2, #32
 8008ac2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	330c      	adds	r3, #12
 8008ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ad6:	e853 3f00 	ldrex	r3, [r3]
 8008ada:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008adc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ade:	f023 0310 	bic.w	r3, r3, #16
 8008ae2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	330c      	adds	r3, #12
 8008aec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008af0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008af2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008af6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008af8:	e841 2300 	strex	r3, r2, [r1]
 8008afc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008afe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d1e3      	bne.n	8008acc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f7fc fc45 	bl	8005398 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	1ad3      	subs	r3, r2, r3
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 f8c0 	bl	8008ca4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b24:	e099      	b.n	8008c5a <HAL_UART_IRQHandler+0x50e>
 8008b26:	bf00      	nop
 8008b28:	080091b7 	.word	0x080091b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	1ad3      	subs	r3, r2, r3
 8008b38:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	f000 808b 	beq.w	8008c5e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008b48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	f000 8086 	beq.w	8008c5e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	330c      	adds	r3, #12
 8008b58:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b5c:	e853 3f00 	ldrex	r3, [r3]
 8008b60:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	330c      	adds	r3, #12
 8008b72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008b76:	647a      	str	r2, [r7, #68]	@ 0x44
 8008b78:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b7e:	e841 2300 	strex	r3, r2, [r1]
 8008b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d1e3      	bne.n	8008b52 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	3314      	adds	r3, #20
 8008b90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b94:	e853 3f00 	ldrex	r3, [r3]
 8008b98:	623b      	str	r3, [r7, #32]
   return(result);
 8008b9a:	6a3b      	ldr	r3, [r7, #32]
 8008b9c:	f023 0301 	bic.w	r3, r3, #1
 8008ba0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	3314      	adds	r3, #20
 8008baa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008bae:	633a      	str	r2, [r7, #48]	@ 0x30
 8008bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008bb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bb6:	e841 2300 	strex	r3, r2, [r1]
 8008bba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d1e3      	bne.n	8008b8a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2220      	movs	r2, #32
 8008bc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	330c      	adds	r3, #12
 8008bd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	e853 3f00 	ldrex	r3, [r3]
 8008bde:	60fb      	str	r3, [r7, #12]
   return(result);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f023 0310 	bic.w	r3, r3, #16
 8008be6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	330c      	adds	r3, #12
 8008bf0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008bf4:	61fa      	str	r2, [r7, #28]
 8008bf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf8:	69b9      	ldr	r1, [r7, #24]
 8008bfa:	69fa      	ldr	r2, [r7, #28]
 8008bfc:	e841 2300 	strex	r3, r2, [r1]
 8008c00:	617b      	str	r3, [r7, #20]
   return(result);
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d1e3      	bne.n	8008bd0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008c08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 f848 	bl	8008ca4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008c14:	e023      	b.n	8008c5e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d009      	beq.n	8008c36 <HAL_UART_IRQHandler+0x4ea>
 8008c22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d003      	beq.n	8008c36 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 fad5 	bl	80091de <UART_Transmit_IT>
    return;
 8008c34:	e014      	b.n	8008c60 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00e      	beq.n	8008c60 <HAL_UART_IRQHandler+0x514>
 8008c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d008      	beq.n	8008c60 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 fb15 	bl	800927e <UART_EndTransmit_IT>
    return;
 8008c54:	e004      	b.n	8008c60 <HAL_UART_IRQHandler+0x514>
    return;
 8008c56:	bf00      	nop
 8008c58:	e002      	b.n	8008c60 <HAL_UART_IRQHandler+0x514>
      return;
 8008c5a:	bf00      	nop
 8008c5c:	e000      	b.n	8008c60 <HAL_UART_IRQHandler+0x514>
      return;
 8008c5e:	bf00      	nop
  }
}
 8008c60:	37e8      	adds	r7, #232	@ 0xe8
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop

08008c68 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008c70:	bf00      	nop
 8008c72:	370c      	adds	r7, #12
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008c84:	bf00      	nop
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008c98:	bf00      	nop
 8008c9a:	370c      	adds	r7, #12
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	460b      	mov	r3, r1
 8008cae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008cb0:	bf00      	nop
 8008cb2:	370c      	adds	r7, #12
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr

08008cbc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b090      	sub	sp, #64	@ 0x40
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d137      	bne.n	8008d48 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008cd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cda:	2200      	movs	r2, #0
 8008cdc:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008cde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	3314      	adds	r3, #20
 8008ce4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce8:	e853 3f00 	ldrex	r3, [r3]
 8008cec:	623b      	str	r3, [r7, #32]
   return(result);
 8008cee:	6a3b      	ldr	r3, [r7, #32]
 8008cf0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008cf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	3314      	adds	r3, #20
 8008cfc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008cfe:	633a      	str	r2, [r7, #48]	@ 0x30
 8008d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d06:	e841 2300 	strex	r3, r2, [r1]
 8008d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d1e5      	bne.n	8008cde <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	330c      	adds	r3, #12
 8008d18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	e853 3f00 	ldrex	r3, [r3]
 8008d20:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d28:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	330c      	adds	r3, #12
 8008d30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008d32:	61fa      	str	r2, [r7, #28]
 8008d34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d36:	69b9      	ldr	r1, [r7, #24]
 8008d38:	69fa      	ldr	r2, [r7, #28]
 8008d3a:	e841 2300 	strex	r3, r2, [r1]
 8008d3e:	617b      	str	r3, [r7, #20]
   return(result);
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d1e5      	bne.n	8008d12 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d46:	e002      	b.n	8008d4e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008d48:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008d4a:	f7f8 f93f 	bl	8000fcc <HAL_UART_TxCpltCallback>
}
 8008d4e:	bf00      	nop
 8008d50:	3740      	adds	r7, #64	@ 0x40
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b084      	sub	sp, #16
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d62:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008d64:	68f8      	ldr	r0, [r7, #12]
 8008d66:	f7ff ff7f 	bl	8008c68 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d6a:	bf00      	nop
 8008d6c:	3710      	adds	r7, #16
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}

08008d72 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008d72:	b580      	push	{r7, lr}
 8008d74:	b09c      	sub	sp, #112	@ 0x70
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d172      	bne.n	8008e74 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008d8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d90:	2200      	movs	r2, #0
 8008d92:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	330c      	adds	r3, #12
 8008d9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d9e:	e853 3f00 	ldrex	r3, [r3]
 8008da2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008da4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008da6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008daa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008dac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	330c      	adds	r3, #12
 8008db2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008db4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008db6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008dba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008dbc:	e841 2300 	strex	r3, r2, [r1]
 8008dc0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008dc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d1e5      	bne.n	8008d94 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	3314      	adds	r3, #20
 8008dce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd2:	e853 3f00 	ldrex	r3, [r3]
 8008dd6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008dd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dda:	f023 0301 	bic.w	r3, r3, #1
 8008dde:	667b      	str	r3, [r7, #100]	@ 0x64
 8008de0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	3314      	adds	r3, #20
 8008de6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008de8:	647a      	str	r2, [r7, #68]	@ 0x44
 8008dea:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008dee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008df0:	e841 2300 	strex	r3, r2, [r1]
 8008df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008df6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d1e5      	bne.n	8008dc8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008dfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	3314      	adds	r3, #20
 8008e02:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e06:	e853 3f00 	ldrex	r3, [r3]
 8008e0a:	623b      	str	r3, [r7, #32]
   return(result);
 8008e0c:	6a3b      	ldr	r3, [r7, #32]
 8008e0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e12:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	3314      	adds	r3, #20
 8008e1a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008e1c:	633a      	str	r2, [r7, #48]	@ 0x30
 8008e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e24:	e841 2300 	strex	r3, r2, [r1]
 8008e28:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d1e5      	bne.n	8008dfc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008e30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e32:	2220      	movs	r2, #32
 8008e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	d119      	bne.n	8008e74 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	330c      	adds	r3, #12
 8008e46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	e853 3f00 	ldrex	r3, [r3]
 8008e4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f023 0310 	bic.w	r3, r3, #16
 8008e56:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008e58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	330c      	adds	r3, #12
 8008e5e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008e60:	61fa      	str	r2, [r7, #28]
 8008e62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e64:	69b9      	ldr	r1, [r7, #24]
 8008e66:	69fa      	ldr	r2, [r7, #28]
 8008e68:	e841 2300 	strex	r3, r2, [r1]
 8008e6c:	617b      	str	r3, [r7, #20]
   return(result);
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d1e5      	bne.n	8008e40 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d106      	bne.n	8008e8a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e7e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008e80:	4619      	mov	r1, r3
 8008e82:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008e84:	f7ff ff0e 	bl	8008ca4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008e88:	e002      	b.n	8008e90 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008e8a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008e8c:	f7f8 f8ba 	bl	8001004 <HAL_UART_RxCpltCallback>
}
 8008e90:	bf00      	nop
 8008e92:	3770      	adds	r7, #112	@ 0x70
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ea4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d108      	bne.n	8008ec0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008eb2:	085b      	lsrs	r3, r3, #1
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	68f8      	ldr	r0, [r7, #12]
 8008eba:	f7ff fef3 	bl	8008ca4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008ebe:	e002      	b.n	8008ec6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f7ff fedb 	bl	8008c7c <HAL_UART_RxHalfCpltCallback>
}
 8008ec6:	bf00      	nop
 8008ec8:	3710      	adds	r7, #16
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ece:	b580      	push	{r7, lr}
 8008ed0:	b084      	sub	sp, #16
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ede:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	695b      	ldr	r3, [r3, #20]
 8008ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008eea:	2b80      	cmp	r3, #128	@ 0x80
 8008eec:	bf0c      	ite	eq
 8008eee:	2301      	moveq	r3, #1
 8008ef0:	2300      	movne	r3, #0
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	2b21      	cmp	r3, #33	@ 0x21
 8008f00:	d108      	bne.n	8008f14 <UART_DMAError+0x46>
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d005      	beq.n	8008f14 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8008f0e:	68b8      	ldr	r0, [r7, #8]
 8008f10:	f000 f8c6 	bl	80090a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	695b      	ldr	r3, [r3, #20]
 8008f1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f1e:	2b40      	cmp	r3, #64	@ 0x40
 8008f20:	bf0c      	ite	eq
 8008f22:	2301      	moveq	r3, #1
 8008f24:	2300      	movne	r3, #0
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	2b22      	cmp	r3, #34	@ 0x22
 8008f34:	d108      	bne.n	8008f48 <UART_DMAError+0x7a>
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d005      	beq.n	8008f48 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8008f42:	68b8      	ldr	r0, [r7, #8]
 8008f44:	f000 f8d4 	bl	80090f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f4c:	f043 0210 	orr.w	r2, r3, #16
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f54:	68b8      	ldr	r0, [r7, #8]
 8008f56:	f7ff fe9b 	bl	8008c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f5a:	bf00      	nop
 8008f5c:	3710      	adds	r7, #16
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
	...

08008f64 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b098      	sub	sp, #96	@ 0x60
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	60b9      	str	r1, [r7, #8]
 8008f6e:	4613      	mov	r3, r2
 8008f70:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008f72:	68ba      	ldr	r2, [r7, #8]
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	88fa      	ldrh	r2, [r7, #6]
 8008f7c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2200      	movs	r2, #0
 8008f82:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2222      	movs	r2, #34	@ 0x22
 8008f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f90:	4a40      	ldr	r2, [pc, #256]	@ (8009094 <UART_Start_Receive_DMA+0x130>)
 8008f92:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f98:	4a3f      	ldr	r2, [pc, #252]	@ (8009098 <UART_Start_Receive_DMA+0x134>)
 8008f9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fa0:	4a3e      	ldr	r2, [pc, #248]	@ (800909c <UART_Start_Receive_DMA+0x138>)
 8008fa2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fa8:	2200      	movs	r2, #0
 8008faa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008fac:	f107 0308 	add.w	r3, r7, #8
 8008fb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	3304      	adds	r3, #4
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	88fb      	ldrh	r3, [r7, #6]
 8008fc4:	f7fc f990 	bl	80052e8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008fc8:	2300      	movs	r3, #0
 8008fca:	613b      	str	r3, [r7, #16]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	613b      	str	r3, [r7, #16]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	613b      	str	r3, [r7, #16]
 8008fdc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	691b      	ldr	r3, [r3, #16]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d019      	beq.n	8009022 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	330c      	adds	r3, #12
 8008ff4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ff8:	e853 3f00 	ldrex	r3, [r3]
 8008ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ffe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009000:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009004:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	330c      	adds	r3, #12
 800900c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800900e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009010:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009012:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009014:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009016:	e841 2300 	strex	r3, r2, [r1]
 800901a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800901c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800901e:	2b00      	cmp	r3, #0
 8009020:	d1e5      	bne.n	8008fee <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	3314      	adds	r3, #20
 8009028:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800902c:	e853 3f00 	ldrex	r3, [r3]
 8009030:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009034:	f043 0301 	orr.w	r3, r3, #1
 8009038:	657b      	str	r3, [r7, #84]	@ 0x54
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	3314      	adds	r3, #20
 8009040:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009042:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009044:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009046:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009048:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800904a:	e841 2300 	strex	r3, r2, [r1]
 800904e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009052:	2b00      	cmp	r3, #0
 8009054:	d1e5      	bne.n	8009022 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	3314      	adds	r3, #20
 800905c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800905e:	69bb      	ldr	r3, [r7, #24]
 8009060:	e853 3f00 	ldrex	r3, [r3]
 8009064:	617b      	str	r3, [r7, #20]
   return(result);
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800906c:	653b      	str	r3, [r7, #80]	@ 0x50
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	3314      	adds	r3, #20
 8009074:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009076:	627a      	str	r2, [r7, #36]	@ 0x24
 8009078:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800907a:	6a39      	ldr	r1, [r7, #32]
 800907c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800907e:	e841 2300 	strex	r3, r2, [r1]
 8009082:	61fb      	str	r3, [r7, #28]
   return(result);
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d1e5      	bne.n	8009056 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800908a:	2300      	movs	r3, #0
}
 800908c:	4618      	mov	r0, r3
 800908e:	3760      	adds	r7, #96	@ 0x60
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}
 8009094:	08008d73 	.word	0x08008d73
 8009098:	08008e99 	.word	0x08008e99
 800909c:	08008ecf 	.word	0x08008ecf

080090a0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b089      	sub	sp, #36	@ 0x24
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	330c      	adds	r3, #12
 80090ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	e853 3f00 	ldrex	r3, [r3]
 80090b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80090be:	61fb      	str	r3, [r7, #28]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	330c      	adds	r3, #12
 80090c6:	69fa      	ldr	r2, [r7, #28]
 80090c8:	61ba      	str	r2, [r7, #24]
 80090ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090cc:	6979      	ldr	r1, [r7, #20]
 80090ce:	69ba      	ldr	r2, [r7, #24]
 80090d0:	e841 2300 	strex	r3, r2, [r1]
 80090d4:	613b      	str	r3, [r7, #16]
   return(result);
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d1e5      	bne.n	80090a8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2220      	movs	r2, #32
 80090e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 80090e4:	bf00      	nop
 80090e6:	3724      	adds	r7, #36	@ 0x24
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b095      	sub	sp, #84	@ 0x54
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	330c      	adds	r3, #12
 80090fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009102:	e853 3f00 	ldrex	r3, [r3]
 8009106:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800910a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800910e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	330c      	adds	r3, #12
 8009116:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009118:	643a      	str	r2, [r7, #64]	@ 0x40
 800911a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800911e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009120:	e841 2300 	strex	r3, r2, [r1]
 8009124:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009128:	2b00      	cmp	r3, #0
 800912a:	d1e5      	bne.n	80090f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	3314      	adds	r3, #20
 8009132:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009134:	6a3b      	ldr	r3, [r7, #32]
 8009136:	e853 3f00 	ldrex	r3, [r3]
 800913a:	61fb      	str	r3, [r7, #28]
   return(result);
 800913c:	69fb      	ldr	r3, [r7, #28]
 800913e:	f023 0301 	bic.w	r3, r3, #1
 8009142:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	3314      	adds	r3, #20
 800914a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800914c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800914e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009150:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009152:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009154:	e841 2300 	strex	r3, r2, [r1]
 8009158:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800915a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800915c:	2b00      	cmp	r3, #0
 800915e:	d1e5      	bne.n	800912c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009164:	2b01      	cmp	r3, #1
 8009166:	d119      	bne.n	800919c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	330c      	adds	r3, #12
 800916e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	e853 3f00 	ldrex	r3, [r3]
 8009176:	60bb      	str	r3, [r7, #8]
   return(result);
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	f023 0310 	bic.w	r3, r3, #16
 800917e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	330c      	adds	r3, #12
 8009186:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009188:	61ba      	str	r2, [r7, #24]
 800918a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918c:	6979      	ldr	r1, [r7, #20]
 800918e:	69ba      	ldr	r2, [r7, #24]
 8009190:	e841 2300 	strex	r3, r2, [r1]
 8009194:	613b      	str	r3, [r7, #16]
   return(result);
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d1e5      	bne.n	8009168 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2220      	movs	r2, #32
 80091a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80091aa:	bf00      	nop
 80091ac:	3754      	adds	r7, #84	@ 0x54
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr

080091b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b084      	sub	sp, #16
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2200      	movs	r2, #0
 80091c8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2200      	movs	r2, #0
 80091ce:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80091d0:	68f8      	ldr	r0, [r7, #12]
 80091d2:	f7ff fd5d 	bl	8008c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091d6:	bf00      	nop
 80091d8:	3710      	adds	r7, #16
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}

080091de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80091de:	b480      	push	{r7}
 80091e0:	b085      	sub	sp, #20
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	2b21      	cmp	r3, #33	@ 0x21
 80091f0:	d13e      	bne.n	8009270 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091fa:	d114      	bne.n	8009226 <UART_Transmit_IT+0x48>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	691b      	ldr	r3, [r3, #16]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d110      	bne.n	8009226 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6a1b      	ldr	r3, [r3, #32]
 8009208:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	881b      	ldrh	r3, [r3, #0]
 800920e:	461a      	mov	r2, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009218:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6a1b      	ldr	r3, [r3, #32]
 800921e:	1c9a      	adds	r2, r3, #2
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	621a      	str	r2, [r3, #32]
 8009224:	e008      	b.n	8009238 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6a1b      	ldr	r3, [r3, #32]
 800922a:	1c59      	adds	r1, r3, #1
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	6211      	str	r1, [r2, #32]
 8009230:	781a      	ldrb	r2, [r3, #0]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800923c:	b29b      	uxth	r3, r3
 800923e:	3b01      	subs	r3, #1
 8009240:	b29b      	uxth	r3, r3
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	4619      	mov	r1, r3
 8009246:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009248:	2b00      	cmp	r3, #0
 800924a:	d10f      	bne.n	800926c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	68da      	ldr	r2, [r3, #12]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800925a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	68da      	ldr	r2, [r3, #12]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800926a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800926c:	2300      	movs	r3, #0
 800926e:	e000      	b.n	8009272 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009270:	2302      	movs	r3, #2
  }
}
 8009272:	4618      	mov	r0, r3
 8009274:	3714      	adds	r7, #20
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr

0800927e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b082      	sub	sp, #8
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	68da      	ldr	r2, [r3, #12]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009294:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2220      	movs	r2, #32
 800929a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f7f7 fe94 	bl	8000fcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80092a4:	2300      	movs	r3, #0
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3708      	adds	r7, #8
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}

080092ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80092ae:	b580      	push	{r7, lr}
 80092b0:	b08c      	sub	sp, #48	@ 0x30
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	2b22      	cmp	r3, #34	@ 0x22
 80092c0:	f040 80ab 	bne.w	800941a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092cc:	d117      	bne.n	80092fe <UART_Receive_IT+0x50>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	691b      	ldr	r3, [r3, #16]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d113      	bne.n	80092fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80092d6:	2300      	movs	r3, #0
 80092d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092de:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092ec:	b29a      	uxth	r2, r3
 80092ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092f6:	1c9a      	adds	r2, r3, #2
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80092fc:	e026      	b.n	800934c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009302:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009304:	2300      	movs	r3, #0
 8009306:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009310:	d007      	beq.n	8009322 <UART_Receive_IT+0x74>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d10a      	bne.n	8009330 <UART_Receive_IT+0x82>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	691b      	ldr	r3, [r3, #16]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d106      	bne.n	8009330 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	b2da      	uxtb	r2, r3
 800932a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800932c:	701a      	strb	r2, [r3, #0]
 800932e:	e008      	b.n	8009342 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	685b      	ldr	r3, [r3, #4]
 8009336:	b2db      	uxtb	r3, r3
 8009338:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800933c:	b2da      	uxtb	r2, r3
 800933e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009340:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009346:	1c5a      	adds	r2, r3, #1
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009350:	b29b      	uxth	r3, r3
 8009352:	3b01      	subs	r3, #1
 8009354:	b29b      	uxth	r3, r3
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	4619      	mov	r1, r3
 800935a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800935c:	2b00      	cmp	r3, #0
 800935e:	d15a      	bne.n	8009416 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	68da      	ldr	r2, [r3, #12]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f022 0220 	bic.w	r2, r2, #32
 800936e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	68da      	ldr	r2, [r3, #12]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800937e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	695a      	ldr	r2, [r3, #20]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f022 0201 	bic.w	r2, r2, #1
 800938e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2220      	movs	r2, #32
 8009394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800939c:	2b01      	cmp	r3, #1
 800939e:	d135      	bne.n	800940c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	330c      	adds	r3, #12
 80093ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	e853 3f00 	ldrex	r3, [r3]
 80093b4:	613b      	str	r3, [r7, #16]
   return(result);
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	f023 0310 	bic.w	r3, r3, #16
 80093bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	330c      	adds	r3, #12
 80093c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093c6:	623a      	str	r2, [r7, #32]
 80093c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ca:	69f9      	ldr	r1, [r7, #28]
 80093cc:	6a3a      	ldr	r2, [r7, #32]
 80093ce:	e841 2300 	strex	r3, r2, [r1]
 80093d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d1e5      	bne.n	80093a6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f003 0310 	and.w	r3, r3, #16
 80093e4:	2b10      	cmp	r3, #16
 80093e6:	d10a      	bne.n	80093fe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80093e8:	2300      	movs	r3, #0
 80093ea:	60fb      	str	r3, [r7, #12]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	60fb      	str	r3, [r7, #12]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	60fb      	str	r3, [r7, #12]
 80093fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009402:	4619      	mov	r1, r3
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f7ff fc4d 	bl	8008ca4 <HAL_UARTEx_RxEventCallback>
 800940a:	e002      	b.n	8009412 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f7f7 fdf9 	bl	8001004 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009412:	2300      	movs	r3, #0
 8009414:	e002      	b.n	800941c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009416:	2300      	movs	r3, #0
 8009418:	e000      	b.n	800941c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800941a:	2302      	movs	r3, #2
  }
}
 800941c:	4618      	mov	r0, r3
 800941e:	3730      	adds	r7, #48	@ 0x30
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009428:	b0c0      	sub	sp, #256	@ 0x100
 800942a:	af00      	add	r7, sp, #0
 800942c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	691b      	ldr	r3, [r3, #16]
 8009438:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800943c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009440:	68d9      	ldr	r1, [r3, #12]
 8009442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	ea40 0301 	orr.w	r3, r0, r1
 800944c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800944e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009452:	689a      	ldr	r2, [r3, #8]
 8009454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009458:	691b      	ldr	r3, [r3, #16]
 800945a:	431a      	orrs	r2, r3
 800945c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009460:	695b      	ldr	r3, [r3, #20]
 8009462:	431a      	orrs	r2, r3
 8009464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009468:	69db      	ldr	r3, [r3, #28]
 800946a:	4313      	orrs	r3, r2
 800946c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800947c:	f021 010c 	bic.w	r1, r1, #12
 8009480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800948a:	430b      	orrs	r3, r1
 800948c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800948e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	695b      	ldr	r3, [r3, #20]
 8009496:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800949a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800949e:	6999      	ldr	r1, [r3, #24]
 80094a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	ea40 0301 	orr.w	r3, r0, r1
 80094aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80094ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	4b8f      	ldr	r3, [pc, #572]	@ (80096f0 <UART_SetConfig+0x2cc>)
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d005      	beq.n	80094c4 <UART_SetConfig+0xa0>
 80094b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	4b8d      	ldr	r3, [pc, #564]	@ (80096f4 <UART_SetConfig+0x2d0>)
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d104      	bne.n	80094ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80094c4:	f7fe f85e 	bl	8007584 <HAL_RCC_GetPCLK2Freq>
 80094c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80094cc:	e003      	b.n	80094d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80094ce:	f7fe f845 	bl	800755c <HAL_RCC_GetPCLK1Freq>
 80094d2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094da:	69db      	ldr	r3, [r3, #28]
 80094dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80094e0:	f040 810c 	bne.w	80096fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80094e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80094e8:	2200      	movs	r2, #0
 80094ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80094ee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80094f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80094f6:	4622      	mov	r2, r4
 80094f8:	462b      	mov	r3, r5
 80094fa:	1891      	adds	r1, r2, r2
 80094fc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80094fe:	415b      	adcs	r3, r3
 8009500:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009502:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009506:	4621      	mov	r1, r4
 8009508:	eb12 0801 	adds.w	r8, r2, r1
 800950c:	4629      	mov	r1, r5
 800950e:	eb43 0901 	adc.w	r9, r3, r1
 8009512:	f04f 0200 	mov.w	r2, #0
 8009516:	f04f 0300 	mov.w	r3, #0
 800951a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800951e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009522:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009526:	4690      	mov	r8, r2
 8009528:	4699      	mov	r9, r3
 800952a:	4623      	mov	r3, r4
 800952c:	eb18 0303 	adds.w	r3, r8, r3
 8009530:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009534:	462b      	mov	r3, r5
 8009536:	eb49 0303 	adc.w	r3, r9, r3
 800953a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800953e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	2200      	movs	r2, #0
 8009546:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800954a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800954e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009552:	460b      	mov	r3, r1
 8009554:	18db      	adds	r3, r3, r3
 8009556:	653b      	str	r3, [r7, #80]	@ 0x50
 8009558:	4613      	mov	r3, r2
 800955a:	eb42 0303 	adc.w	r3, r2, r3
 800955e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009560:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009564:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009568:	f7f7 fa54 	bl	8000a14 <__aeabi_uldivmod>
 800956c:	4602      	mov	r2, r0
 800956e:	460b      	mov	r3, r1
 8009570:	4b61      	ldr	r3, [pc, #388]	@ (80096f8 <UART_SetConfig+0x2d4>)
 8009572:	fba3 2302 	umull	r2, r3, r3, r2
 8009576:	095b      	lsrs	r3, r3, #5
 8009578:	011c      	lsls	r4, r3, #4
 800957a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800957e:	2200      	movs	r2, #0
 8009580:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009584:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009588:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800958c:	4642      	mov	r2, r8
 800958e:	464b      	mov	r3, r9
 8009590:	1891      	adds	r1, r2, r2
 8009592:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009594:	415b      	adcs	r3, r3
 8009596:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009598:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800959c:	4641      	mov	r1, r8
 800959e:	eb12 0a01 	adds.w	sl, r2, r1
 80095a2:	4649      	mov	r1, r9
 80095a4:	eb43 0b01 	adc.w	fp, r3, r1
 80095a8:	f04f 0200 	mov.w	r2, #0
 80095ac:	f04f 0300 	mov.w	r3, #0
 80095b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80095b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80095b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80095bc:	4692      	mov	sl, r2
 80095be:	469b      	mov	fp, r3
 80095c0:	4643      	mov	r3, r8
 80095c2:	eb1a 0303 	adds.w	r3, sl, r3
 80095c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80095ca:	464b      	mov	r3, r9
 80095cc:	eb4b 0303 	adc.w	r3, fp, r3
 80095d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80095d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80095e0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80095e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80095e8:	460b      	mov	r3, r1
 80095ea:	18db      	adds	r3, r3, r3
 80095ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80095ee:	4613      	mov	r3, r2
 80095f0:	eb42 0303 	adc.w	r3, r2, r3
 80095f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80095f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80095fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80095fe:	f7f7 fa09 	bl	8000a14 <__aeabi_uldivmod>
 8009602:	4602      	mov	r2, r0
 8009604:	460b      	mov	r3, r1
 8009606:	4611      	mov	r1, r2
 8009608:	4b3b      	ldr	r3, [pc, #236]	@ (80096f8 <UART_SetConfig+0x2d4>)
 800960a:	fba3 2301 	umull	r2, r3, r3, r1
 800960e:	095b      	lsrs	r3, r3, #5
 8009610:	2264      	movs	r2, #100	@ 0x64
 8009612:	fb02 f303 	mul.w	r3, r2, r3
 8009616:	1acb      	subs	r3, r1, r3
 8009618:	00db      	lsls	r3, r3, #3
 800961a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800961e:	4b36      	ldr	r3, [pc, #216]	@ (80096f8 <UART_SetConfig+0x2d4>)
 8009620:	fba3 2302 	umull	r2, r3, r3, r2
 8009624:	095b      	lsrs	r3, r3, #5
 8009626:	005b      	lsls	r3, r3, #1
 8009628:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800962c:	441c      	add	r4, r3
 800962e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009632:	2200      	movs	r2, #0
 8009634:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009638:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800963c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009640:	4642      	mov	r2, r8
 8009642:	464b      	mov	r3, r9
 8009644:	1891      	adds	r1, r2, r2
 8009646:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009648:	415b      	adcs	r3, r3
 800964a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800964c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009650:	4641      	mov	r1, r8
 8009652:	1851      	adds	r1, r2, r1
 8009654:	6339      	str	r1, [r7, #48]	@ 0x30
 8009656:	4649      	mov	r1, r9
 8009658:	414b      	adcs	r3, r1
 800965a:	637b      	str	r3, [r7, #52]	@ 0x34
 800965c:	f04f 0200 	mov.w	r2, #0
 8009660:	f04f 0300 	mov.w	r3, #0
 8009664:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009668:	4659      	mov	r1, fp
 800966a:	00cb      	lsls	r3, r1, #3
 800966c:	4651      	mov	r1, sl
 800966e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009672:	4651      	mov	r1, sl
 8009674:	00ca      	lsls	r2, r1, #3
 8009676:	4610      	mov	r0, r2
 8009678:	4619      	mov	r1, r3
 800967a:	4603      	mov	r3, r0
 800967c:	4642      	mov	r2, r8
 800967e:	189b      	adds	r3, r3, r2
 8009680:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009684:	464b      	mov	r3, r9
 8009686:	460a      	mov	r2, r1
 8009688:	eb42 0303 	adc.w	r3, r2, r3
 800968c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	2200      	movs	r2, #0
 8009698:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800969c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80096a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80096a4:	460b      	mov	r3, r1
 80096a6:	18db      	adds	r3, r3, r3
 80096a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80096aa:	4613      	mov	r3, r2
 80096ac:	eb42 0303 	adc.w	r3, r2, r3
 80096b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80096b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80096b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80096ba:	f7f7 f9ab 	bl	8000a14 <__aeabi_uldivmod>
 80096be:	4602      	mov	r2, r0
 80096c0:	460b      	mov	r3, r1
 80096c2:	4b0d      	ldr	r3, [pc, #52]	@ (80096f8 <UART_SetConfig+0x2d4>)
 80096c4:	fba3 1302 	umull	r1, r3, r3, r2
 80096c8:	095b      	lsrs	r3, r3, #5
 80096ca:	2164      	movs	r1, #100	@ 0x64
 80096cc:	fb01 f303 	mul.w	r3, r1, r3
 80096d0:	1ad3      	subs	r3, r2, r3
 80096d2:	00db      	lsls	r3, r3, #3
 80096d4:	3332      	adds	r3, #50	@ 0x32
 80096d6:	4a08      	ldr	r2, [pc, #32]	@ (80096f8 <UART_SetConfig+0x2d4>)
 80096d8:	fba2 2303 	umull	r2, r3, r2, r3
 80096dc:	095b      	lsrs	r3, r3, #5
 80096de:	f003 0207 	and.w	r2, r3, #7
 80096e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4422      	add	r2, r4
 80096ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80096ec:	e106      	b.n	80098fc <UART_SetConfig+0x4d8>
 80096ee:	bf00      	nop
 80096f0:	40011000 	.word	0x40011000
 80096f4:	40011400 	.word	0x40011400
 80096f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80096fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009700:	2200      	movs	r2, #0
 8009702:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009706:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800970a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800970e:	4642      	mov	r2, r8
 8009710:	464b      	mov	r3, r9
 8009712:	1891      	adds	r1, r2, r2
 8009714:	6239      	str	r1, [r7, #32]
 8009716:	415b      	adcs	r3, r3
 8009718:	627b      	str	r3, [r7, #36]	@ 0x24
 800971a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800971e:	4641      	mov	r1, r8
 8009720:	1854      	adds	r4, r2, r1
 8009722:	4649      	mov	r1, r9
 8009724:	eb43 0501 	adc.w	r5, r3, r1
 8009728:	f04f 0200 	mov.w	r2, #0
 800972c:	f04f 0300 	mov.w	r3, #0
 8009730:	00eb      	lsls	r3, r5, #3
 8009732:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009736:	00e2      	lsls	r2, r4, #3
 8009738:	4614      	mov	r4, r2
 800973a:	461d      	mov	r5, r3
 800973c:	4643      	mov	r3, r8
 800973e:	18e3      	adds	r3, r4, r3
 8009740:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009744:	464b      	mov	r3, r9
 8009746:	eb45 0303 	adc.w	r3, r5, r3
 800974a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800974e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800975a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800975e:	f04f 0200 	mov.w	r2, #0
 8009762:	f04f 0300 	mov.w	r3, #0
 8009766:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800976a:	4629      	mov	r1, r5
 800976c:	008b      	lsls	r3, r1, #2
 800976e:	4621      	mov	r1, r4
 8009770:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009774:	4621      	mov	r1, r4
 8009776:	008a      	lsls	r2, r1, #2
 8009778:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800977c:	f7f7 f94a 	bl	8000a14 <__aeabi_uldivmod>
 8009780:	4602      	mov	r2, r0
 8009782:	460b      	mov	r3, r1
 8009784:	4b60      	ldr	r3, [pc, #384]	@ (8009908 <UART_SetConfig+0x4e4>)
 8009786:	fba3 2302 	umull	r2, r3, r3, r2
 800978a:	095b      	lsrs	r3, r3, #5
 800978c:	011c      	lsls	r4, r3, #4
 800978e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009792:	2200      	movs	r2, #0
 8009794:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009798:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800979c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80097a0:	4642      	mov	r2, r8
 80097a2:	464b      	mov	r3, r9
 80097a4:	1891      	adds	r1, r2, r2
 80097a6:	61b9      	str	r1, [r7, #24]
 80097a8:	415b      	adcs	r3, r3
 80097aa:	61fb      	str	r3, [r7, #28]
 80097ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80097b0:	4641      	mov	r1, r8
 80097b2:	1851      	adds	r1, r2, r1
 80097b4:	6139      	str	r1, [r7, #16]
 80097b6:	4649      	mov	r1, r9
 80097b8:	414b      	adcs	r3, r1
 80097ba:	617b      	str	r3, [r7, #20]
 80097bc:	f04f 0200 	mov.w	r2, #0
 80097c0:	f04f 0300 	mov.w	r3, #0
 80097c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80097c8:	4659      	mov	r1, fp
 80097ca:	00cb      	lsls	r3, r1, #3
 80097cc:	4651      	mov	r1, sl
 80097ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80097d2:	4651      	mov	r1, sl
 80097d4:	00ca      	lsls	r2, r1, #3
 80097d6:	4610      	mov	r0, r2
 80097d8:	4619      	mov	r1, r3
 80097da:	4603      	mov	r3, r0
 80097dc:	4642      	mov	r2, r8
 80097de:	189b      	adds	r3, r3, r2
 80097e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80097e4:	464b      	mov	r3, r9
 80097e6:	460a      	mov	r2, r1
 80097e8:	eb42 0303 	adc.w	r3, r2, r3
 80097ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80097f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80097fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80097fc:	f04f 0200 	mov.w	r2, #0
 8009800:	f04f 0300 	mov.w	r3, #0
 8009804:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009808:	4649      	mov	r1, r9
 800980a:	008b      	lsls	r3, r1, #2
 800980c:	4641      	mov	r1, r8
 800980e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009812:	4641      	mov	r1, r8
 8009814:	008a      	lsls	r2, r1, #2
 8009816:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800981a:	f7f7 f8fb 	bl	8000a14 <__aeabi_uldivmod>
 800981e:	4602      	mov	r2, r0
 8009820:	460b      	mov	r3, r1
 8009822:	4611      	mov	r1, r2
 8009824:	4b38      	ldr	r3, [pc, #224]	@ (8009908 <UART_SetConfig+0x4e4>)
 8009826:	fba3 2301 	umull	r2, r3, r3, r1
 800982a:	095b      	lsrs	r3, r3, #5
 800982c:	2264      	movs	r2, #100	@ 0x64
 800982e:	fb02 f303 	mul.w	r3, r2, r3
 8009832:	1acb      	subs	r3, r1, r3
 8009834:	011b      	lsls	r3, r3, #4
 8009836:	3332      	adds	r3, #50	@ 0x32
 8009838:	4a33      	ldr	r2, [pc, #204]	@ (8009908 <UART_SetConfig+0x4e4>)
 800983a:	fba2 2303 	umull	r2, r3, r2, r3
 800983e:	095b      	lsrs	r3, r3, #5
 8009840:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009844:	441c      	add	r4, r3
 8009846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800984a:	2200      	movs	r2, #0
 800984c:	673b      	str	r3, [r7, #112]	@ 0x70
 800984e:	677a      	str	r2, [r7, #116]	@ 0x74
 8009850:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009854:	4642      	mov	r2, r8
 8009856:	464b      	mov	r3, r9
 8009858:	1891      	adds	r1, r2, r2
 800985a:	60b9      	str	r1, [r7, #8]
 800985c:	415b      	adcs	r3, r3
 800985e:	60fb      	str	r3, [r7, #12]
 8009860:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009864:	4641      	mov	r1, r8
 8009866:	1851      	adds	r1, r2, r1
 8009868:	6039      	str	r1, [r7, #0]
 800986a:	4649      	mov	r1, r9
 800986c:	414b      	adcs	r3, r1
 800986e:	607b      	str	r3, [r7, #4]
 8009870:	f04f 0200 	mov.w	r2, #0
 8009874:	f04f 0300 	mov.w	r3, #0
 8009878:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800987c:	4659      	mov	r1, fp
 800987e:	00cb      	lsls	r3, r1, #3
 8009880:	4651      	mov	r1, sl
 8009882:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009886:	4651      	mov	r1, sl
 8009888:	00ca      	lsls	r2, r1, #3
 800988a:	4610      	mov	r0, r2
 800988c:	4619      	mov	r1, r3
 800988e:	4603      	mov	r3, r0
 8009890:	4642      	mov	r2, r8
 8009892:	189b      	adds	r3, r3, r2
 8009894:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009896:	464b      	mov	r3, r9
 8009898:	460a      	mov	r2, r1
 800989a:	eb42 0303 	adc.w	r3, r2, r3
 800989e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80098a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	2200      	movs	r2, #0
 80098a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80098aa:	667a      	str	r2, [r7, #100]	@ 0x64
 80098ac:	f04f 0200 	mov.w	r2, #0
 80098b0:	f04f 0300 	mov.w	r3, #0
 80098b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80098b8:	4649      	mov	r1, r9
 80098ba:	008b      	lsls	r3, r1, #2
 80098bc:	4641      	mov	r1, r8
 80098be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80098c2:	4641      	mov	r1, r8
 80098c4:	008a      	lsls	r2, r1, #2
 80098c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80098ca:	f7f7 f8a3 	bl	8000a14 <__aeabi_uldivmod>
 80098ce:	4602      	mov	r2, r0
 80098d0:	460b      	mov	r3, r1
 80098d2:	4b0d      	ldr	r3, [pc, #52]	@ (8009908 <UART_SetConfig+0x4e4>)
 80098d4:	fba3 1302 	umull	r1, r3, r3, r2
 80098d8:	095b      	lsrs	r3, r3, #5
 80098da:	2164      	movs	r1, #100	@ 0x64
 80098dc:	fb01 f303 	mul.w	r3, r1, r3
 80098e0:	1ad3      	subs	r3, r2, r3
 80098e2:	011b      	lsls	r3, r3, #4
 80098e4:	3332      	adds	r3, #50	@ 0x32
 80098e6:	4a08      	ldr	r2, [pc, #32]	@ (8009908 <UART_SetConfig+0x4e4>)
 80098e8:	fba2 2303 	umull	r2, r3, r2, r3
 80098ec:	095b      	lsrs	r3, r3, #5
 80098ee:	f003 020f 	and.w	r2, r3, #15
 80098f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4422      	add	r2, r4
 80098fa:	609a      	str	r2, [r3, #8]
}
 80098fc:	bf00      	nop
 80098fe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009902:	46bd      	mov	sp, r7
 8009904:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009908:	51eb851f 	.word	0x51eb851f

0800990c <malloc>:
 800990c:	4b02      	ldr	r3, [pc, #8]	@ (8009918 <malloc+0xc>)
 800990e:	4601      	mov	r1, r0
 8009910:	6818      	ldr	r0, [r3, #0]
 8009912:	f000 b825 	b.w	8009960 <_malloc_r>
 8009916:	bf00      	nop
 8009918:	20000020 	.word	0x20000020

0800991c <sbrk_aligned>:
 800991c:	b570      	push	{r4, r5, r6, lr}
 800991e:	4e0f      	ldr	r6, [pc, #60]	@ (800995c <sbrk_aligned+0x40>)
 8009920:	460c      	mov	r4, r1
 8009922:	6831      	ldr	r1, [r6, #0]
 8009924:	4605      	mov	r5, r0
 8009926:	b911      	cbnz	r1, 800992e <sbrk_aligned+0x12>
 8009928:	f000 f8e4 	bl	8009af4 <_sbrk_r>
 800992c:	6030      	str	r0, [r6, #0]
 800992e:	4621      	mov	r1, r4
 8009930:	4628      	mov	r0, r5
 8009932:	f000 f8df 	bl	8009af4 <_sbrk_r>
 8009936:	1c43      	adds	r3, r0, #1
 8009938:	d103      	bne.n	8009942 <sbrk_aligned+0x26>
 800993a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800993e:	4620      	mov	r0, r4
 8009940:	bd70      	pop	{r4, r5, r6, pc}
 8009942:	1cc4      	adds	r4, r0, #3
 8009944:	f024 0403 	bic.w	r4, r4, #3
 8009948:	42a0      	cmp	r0, r4
 800994a:	d0f8      	beq.n	800993e <sbrk_aligned+0x22>
 800994c:	1a21      	subs	r1, r4, r0
 800994e:	4628      	mov	r0, r5
 8009950:	f000 f8d0 	bl	8009af4 <_sbrk_r>
 8009954:	3001      	adds	r0, #1
 8009956:	d1f2      	bne.n	800993e <sbrk_aligned+0x22>
 8009958:	e7ef      	b.n	800993a <sbrk_aligned+0x1e>
 800995a:	bf00      	nop
 800995c:	20000d9c 	.word	0x20000d9c

08009960 <_malloc_r>:
 8009960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009964:	1ccd      	adds	r5, r1, #3
 8009966:	f025 0503 	bic.w	r5, r5, #3
 800996a:	3508      	adds	r5, #8
 800996c:	2d0c      	cmp	r5, #12
 800996e:	bf38      	it	cc
 8009970:	250c      	movcc	r5, #12
 8009972:	2d00      	cmp	r5, #0
 8009974:	4606      	mov	r6, r0
 8009976:	db01      	blt.n	800997c <_malloc_r+0x1c>
 8009978:	42a9      	cmp	r1, r5
 800997a:	d904      	bls.n	8009986 <_malloc_r+0x26>
 800997c:	230c      	movs	r3, #12
 800997e:	6033      	str	r3, [r6, #0]
 8009980:	2000      	movs	r0, #0
 8009982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009986:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009a5c <_malloc_r+0xfc>
 800998a:	f000 f869 	bl	8009a60 <__malloc_lock>
 800998e:	f8d8 3000 	ldr.w	r3, [r8]
 8009992:	461c      	mov	r4, r3
 8009994:	bb44      	cbnz	r4, 80099e8 <_malloc_r+0x88>
 8009996:	4629      	mov	r1, r5
 8009998:	4630      	mov	r0, r6
 800999a:	f7ff ffbf 	bl	800991c <sbrk_aligned>
 800999e:	1c43      	adds	r3, r0, #1
 80099a0:	4604      	mov	r4, r0
 80099a2:	d158      	bne.n	8009a56 <_malloc_r+0xf6>
 80099a4:	f8d8 4000 	ldr.w	r4, [r8]
 80099a8:	4627      	mov	r7, r4
 80099aa:	2f00      	cmp	r7, #0
 80099ac:	d143      	bne.n	8009a36 <_malloc_r+0xd6>
 80099ae:	2c00      	cmp	r4, #0
 80099b0:	d04b      	beq.n	8009a4a <_malloc_r+0xea>
 80099b2:	6823      	ldr	r3, [r4, #0]
 80099b4:	4639      	mov	r1, r7
 80099b6:	4630      	mov	r0, r6
 80099b8:	eb04 0903 	add.w	r9, r4, r3
 80099bc:	f000 f89a 	bl	8009af4 <_sbrk_r>
 80099c0:	4581      	cmp	r9, r0
 80099c2:	d142      	bne.n	8009a4a <_malloc_r+0xea>
 80099c4:	6821      	ldr	r1, [r4, #0]
 80099c6:	1a6d      	subs	r5, r5, r1
 80099c8:	4629      	mov	r1, r5
 80099ca:	4630      	mov	r0, r6
 80099cc:	f7ff ffa6 	bl	800991c <sbrk_aligned>
 80099d0:	3001      	adds	r0, #1
 80099d2:	d03a      	beq.n	8009a4a <_malloc_r+0xea>
 80099d4:	6823      	ldr	r3, [r4, #0]
 80099d6:	442b      	add	r3, r5
 80099d8:	6023      	str	r3, [r4, #0]
 80099da:	f8d8 3000 	ldr.w	r3, [r8]
 80099de:	685a      	ldr	r2, [r3, #4]
 80099e0:	bb62      	cbnz	r2, 8009a3c <_malloc_r+0xdc>
 80099e2:	f8c8 7000 	str.w	r7, [r8]
 80099e6:	e00f      	b.n	8009a08 <_malloc_r+0xa8>
 80099e8:	6822      	ldr	r2, [r4, #0]
 80099ea:	1b52      	subs	r2, r2, r5
 80099ec:	d420      	bmi.n	8009a30 <_malloc_r+0xd0>
 80099ee:	2a0b      	cmp	r2, #11
 80099f0:	d917      	bls.n	8009a22 <_malloc_r+0xc2>
 80099f2:	1961      	adds	r1, r4, r5
 80099f4:	42a3      	cmp	r3, r4
 80099f6:	6025      	str	r5, [r4, #0]
 80099f8:	bf18      	it	ne
 80099fa:	6059      	strne	r1, [r3, #4]
 80099fc:	6863      	ldr	r3, [r4, #4]
 80099fe:	bf08      	it	eq
 8009a00:	f8c8 1000 	streq.w	r1, [r8]
 8009a04:	5162      	str	r2, [r4, r5]
 8009a06:	604b      	str	r3, [r1, #4]
 8009a08:	4630      	mov	r0, r6
 8009a0a:	f000 f82f 	bl	8009a6c <__malloc_unlock>
 8009a0e:	f104 000b 	add.w	r0, r4, #11
 8009a12:	1d23      	adds	r3, r4, #4
 8009a14:	f020 0007 	bic.w	r0, r0, #7
 8009a18:	1ac2      	subs	r2, r0, r3
 8009a1a:	bf1c      	itt	ne
 8009a1c:	1a1b      	subne	r3, r3, r0
 8009a1e:	50a3      	strne	r3, [r4, r2]
 8009a20:	e7af      	b.n	8009982 <_malloc_r+0x22>
 8009a22:	6862      	ldr	r2, [r4, #4]
 8009a24:	42a3      	cmp	r3, r4
 8009a26:	bf0c      	ite	eq
 8009a28:	f8c8 2000 	streq.w	r2, [r8]
 8009a2c:	605a      	strne	r2, [r3, #4]
 8009a2e:	e7eb      	b.n	8009a08 <_malloc_r+0xa8>
 8009a30:	4623      	mov	r3, r4
 8009a32:	6864      	ldr	r4, [r4, #4]
 8009a34:	e7ae      	b.n	8009994 <_malloc_r+0x34>
 8009a36:	463c      	mov	r4, r7
 8009a38:	687f      	ldr	r7, [r7, #4]
 8009a3a:	e7b6      	b.n	80099aa <_malloc_r+0x4a>
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	42a3      	cmp	r3, r4
 8009a42:	d1fb      	bne.n	8009a3c <_malloc_r+0xdc>
 8009a44:	2300      	movs	r3, #0
 8009a46:	6053      	str	r3, [r2, #4]
 8009a48:	e7de      	b.n	8009a08 <_malloc_r+0xa8>
 8009a4a:	230c      	movs	r3, #12
 8009a4c:	6033      	str	r3, [r6, #0]
 8009a4e:	4630      	mov	r0, r6
 8009a50:	f000 f80c 	bl	8009a6c <__malloc_unlock>
 8009a54:	e794      	b.n	8009980 <_malloc_r+0x20>
 8009a56:	6005      	str	r5, [r0, #0]
 8009a58:	e7d6      	b.n	8009a08 <_malloc_r+0xa8>
 8009a5a:	bf00      	nop
 8009a5c:	20000da0 	.word	0x20000da0

08009a60 <__malloc_lock>:
 8009a60:	4801      	ldr	r0, [pc, #4]	@ (8009a68 <__malloc_lock+0x8>)
 8009a62:	f000 b881 	b.w	8009b68 <__retarget_lock_acquire_recursive>
 8009a66:	bf00      	nop
 8009a68:	20000ee0 	.word	0x20000ee0

08009a6c <__malloc_unlock>:
 8009a6c:	4801      	ldr	r0, [pc, #4]	@ (8009a74 <__malloc_unlock+0x8>)
 8009a6e:	f000 b87c 	b.w	8009b6a <__retarget_lock_release_recursive>
 8009a72:	bf00      	nop
 8009a74:	20000ee0 	.word	0x20000ee0

08009a78 <realloc>:
 8009a78:	4b02      	ldr	r3, [pc, #8]	@ (8009a84 <realloc+0xc>)
 8009a7a:	460a      	mov	r2, r1
 8009a7c:	4601      	mov	r1, r0
 8009a7e:	6818      	ldr	r0, [r3, #0]
 8009a80:	f000 b802 	b.w	8009a88 <_realloc_r>
 8009a84:	20000020 	.word	0x20000020

08009a88 <_realloc_r>:
 8009a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a8c:	4680      	mov	r8, r0
 8009a8e:	4615      	mov	r5, r2
 8009a90:	460c      	mov	r4, r1
 8009a92:	b921      	cbnz	r1, 8009a9e <_realloc_r+0x16>
 8009a94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a98:	4611      	mov	r1, r2
 8009a9a:	f7ff bf61 	b.w	8009960 <_malloc_r>
 8009a9e:	b92a      	cbnz	r2, 8009aac <_realloc_r+0x24>
 8009aa0:	f000 f872 	bl	8009b88 <_free_r>
 8009aa4:	2400      	movs	r4, #0
 8009aa6:	4620      	mov	r0, r4
 8009aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009aac:	f000 f8b6 	bl	8009c1c <_malloc_usable_size_r>
 8009ab0:	4285      	cmp	r5, r0
 8009ab2:	4606      	mov	r6, r0
 8009ab4:	d802      	bhi.n	8009abc <_realloc_r+0x34>
 8009ab6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009aba:	d8f4      	bhi.n	8009aa6 <_realloc_r+0x1e>
 8009abc:	4629      	mov	r1, r5
 8009abe:	4640      	mov	r0, r8
 8009ac0:	f7ff ff4e 	bl	8009960 <_malloc_r>
 8009ac4:	4607      	mov	r7, r0
 8009ac6:	2800      	cmp	r0, #0
 8009ac8:	d0ec      	beq.n	8009aa4 <_realloc_r+0x1c>
 8009aca:	42b5      	cmp	r5, r6
 8009acc:	462a      	mov	r2, r5
 8009ace:	4621      	mov	r1, r4
 8009ad0:	bf28      	it	cs
 8009ad2:	4632      	movcs	r2, r6
 8009ad4:	f000 f84a 	bl	8009b6c <memcpy>
 8009ad8:	4621      	mov	r1, r4
 8009ada:	4640      	mov	r0, r8
 8009adc:	f000 f854 	bl	8009b88 <_free_r>
 8009ae0:	463c      	mov	r4, r7
 8009ae2:	e7e0      	b.n	8009aa6 <_realloc_r+0x1e>

08009ae4 <memset>:
 8009ae4:	4402      	add	r2, r0
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d100      	bne.n	8009aee <memset+0xa>
 8009aec:	4770      	bx	lr
 8009aee:	f803 1b01 	strb.w	r1, [r3], #1
 8009af2:	e7f9      	b.n	8009ae8 <memset+0x4>

08009af4 <_sbrk_r>:
 8009af4:	b538      	push	{r3, r4, r5, lr}
 8009af6:	4d06      	ldr	r5, [pc, #24]	@ (8009b10 <_sbrk_r+0x1c>)
 8009af8:	2300      	movs	r3, #0
 8009afa:	4604      	mov	r4, r0
 8009afc:	4608      	mov	r0, r1
 8009afe:	602b      	str	r3, [r5, #0]
 8009b00:	f7fb f8fe 	bl	8004d00 <_sbrk>
 8009b04:	1c43      	adds	r3, r0, #1
 8009b06:	d102      	bne.n	8009b0e <_sbrk_r+0x1a>
 8009b08:	682b      	ldr	r3, [r5, #0]
 8009b0a:	b103      	cbz	r3, 8009b0e <_sbrk_r+0x1a>
 8009b0c:	6023      	str	r3, [r4, #0]
 8009b0e:	bd38      	pop	{r3, r4, r5, pc}
 8009b10:	20000edc 	.word	0x20000edc

08009b14 <__errno>:
 8009b14:	4b01      	ldr	r3, [pc, #4]	@ (8009b1c <__errno+0x8>)
 8009b16:	6818      	ldr	r0, [r3, #0]
 8009b18:	4770      	bx	lr
 8009b1a:	bf00      	nop
 8009b1c:	20000020 	.word	0x20000020

08009b20 <__libc_init_array>:
 8009b20:	b570      	push	{r4, r5, r6, lr}
 8009b22:	4d0d      	ldr	r5, [pc, #52]	@ (8009b58 <__libc_init_array+0x38>)
 8009b24:	4c0d      	ldr	r4, [pc, #52]	@ (8009b5c <__libc_init_array+0x3c>)
 8009b26:	1b64      	subs	r4, r4, r5
 8009b28:	10a4      	asrs	r4, r4, #2
 8009b2a:	2600      	movs	r6, #0
 8009b2c:	42a6      	cmp	r6, r4
 8009b2e:	d109      	bne.n	8009b44 <__libc_init_array+0x24>
 8009b30:	4d0b      	ldr	r5, [pc, #44]	@ (8009b60 <__libc_init_array+0x40>)
 8009b32:	4c0c      	ldr	r4, [pc, #48]	@ (8009b64 <__libc_init_array+0x44>)
 8009b34:	f000 f87a 	bl	8009c2c <_init>
 8009b38:	1b64      	subs	r4, r4, r5
 8009b3a:	10a4      	asrs	r4, r4, #2
 8009b3c:	2600      	movs	r6, #0
 8009b3e:	42a6      	cmp	r6, r4
 8009b40:	d105      	bne.n	8009b4e <__libc_init_array+0x2e>
 8009b42:	bd70      	pop	{r4, r5, r6, pc}
 8009b44:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b48:	4798      	blx	r3
 8009b4a:	3601      	adds	r6, #1
 8009b4c:	e7ee      	b.n	8009b2c <__libc_init_array+0xc>
 8009b4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b52:	4798      	blx	r3
 8009b54:	3601      	adds	r6, #1
 8009b56:	e7f2      	b.n	8009b3e <__libc_init_array+0x1e>
 8009b58:	0800a0d4 	.word	0x0800a0d4
 8009b5c:	0800a0d4 	.word	0x0800a0d4
 8009b60:	0800a0d4 	.word	0x0800a0d4
 8009b64:	0800a0e0 	.word	0x0800a0e0

08009b68 <__retarget_lock_acquire_recursive>:
 8009b68:	4770      	bx	lr

08009b6a <__retarget_lock_release_recursive>:
 8009b6a:	4770      	bx	lr

08009b6c <memcpy>:
 8009b6c:	440a      	add	r2, r1
 8009b6e:	4291      	cmp	r1, r2
 8009b70:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009b74:	d100      	bne.n	8009b78 <memcpy+0xc>
 8009b76:	4770      	bx	lr
 8009b78:	b510      	push	{r4, lr}
 8009b7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b82:	4291      	cmp	r1, r2
 8009b84:	d1f9      	bne.n	8009b7a <memcpy+0xe>
 8009b86:	bd10      	pop	{r4, pc}

08009b88 <_free_r>:
 8009b88:	b538      	push	{r3, r4, r5, lr}
 8009b8a:	4605      	mov	r5, r0
 8009b8c:	2900      	cmp	r1, #0
 8009b8e:	d041      	beq.n	8009c14 <_free_r+0x8c>
 8009b90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b94:	1f0c      	subs	r4, r1, #4
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	bfb8      	it	lt
 8009b9a:	18e4      	addlt	r4, r4, r3
 8009b9c:	f7ff ff60 	bl	8009a60 <__malloc_lock>
 8009ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8009c18 <_free_r+0x90>)
 8009ba2:	6813      	ldr	r3, [r2, #0]
 8009ba4:	b933      	cbnz	r3, 8009bb4 <_free_r+0x2c>
 8009ba6:	6063      	str	r3, [r4, #4]
 8009ba8:	6014      	str	r4, [r2, #0]
 8009baa:	4628      	mov	r0, r5
 8009bac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bb0:	f7ff bf5c 	b.w	8009a6c <__malloc_unlock>
 8009bb4:	42a3      	cmp	r3, r4
 8009bb6:	d908      	bls.n	8009bca <_free_r+0x42>
 8009bb8:	6820      	ldr	r0, [r4, #0]
 8009bba:	1821      	adds	r1, r4, r0
 8009bbc:	428b      	cmp	r3, r1
 8009bbe:	bf01      	itttt	eq
 8009bc0:	6819      	ldreq	r1, [r3, #0]
 8009bc2:	685b      	ldreq	r3, [r3, #4]
 8009bc4:	1809      	addeq	r1, r1, r0
 8009bc6:	6021      	streq	r1, [r4, #0]
 8009bc8:	e7ed      	b.n	8009ba6 <_free_r+0x1e>
 8009bca:	461a      	mov	r2, r3
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	b10b      	cbz	r3, 8009bd4 <_free_r+0x4c>
 8009bd0:	42a3      	cmp	r3, r4
 8009bd2:	d9fa      	bls.n	8009bca <_free_r+0x42>
 8009bd4:	6811      	ldr	r1, [r2, #0]
 8009bd6:	1850      	adds	r0, r2, r1
 8009bd8:	42a0      	cmp	r0, r4
 8009bda:	d10b      	bne.n	8009bf4 <_free_r+0x6c>
 8009bdc:	6820      	ldr	r0, [r4, #0]
 8009bde:	4401      	add	r1, r0
 8009be0:	1850      	adds	r0, r2, r1
 8009be2:	4283      	cmp	r3, r0
 8009be4:	6011      	str	r1, [r2, #0]
 8009be6:	d1e0      	bne.n	8009baa <_free_r+0x22>
 8009be8:	6818      	ldr	r0, [r3, #0]
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	6053      	str	r3, [r2, #4]
 8009bee:	4408      	add	r0, r1
 8009bf0:	6010      	str	r0, [r2, #0]
 8009bf2:	e7da      	b.n	8009baa <_free_r+0x22>
 8009bf4:	d902      	bls.n	8009bfc <_free_r+0x74>
 8009bf6:	230c      	movs	r3, #12
 8009bf8:	602b      	str	r3, [r5, #0]
 8009bfa:	e7d6      	b.n	8009baa <_free_r+0x22>
 8009bfc:	6820      	ldr	r0, [r4, #0]
 8009bfe:	1821      	adds	r1, r4, r0
 8009c00:	428b      	cmp	r3, r1
 8009c02:	bf04      	itt	eq
 8009c04:	6819      	ldreq	r1, [r3, #0]
 8009c06:	685b      	ldreq	r3, [r3, #4]
 8009c08:	6063      	str	r3, [r4, #4]
 8009c0a:	bf04      	itt	eq
 8009c0c:	1809      	addeq	r1, r1, r0
 8009c0e:	6021      	streq	r1, [r4, #0]
 8009c10:	6054      	str	r4, [r2, #4]
 8009c12:	e7ca      	b.n	8009baa <_free_r+0x22>
 8009c14:	bd38      	pop	{r3, r4, r5, pc}
 8009c16:	bf00      	nop
 8009c18:	20000da0 	.word	0x20000da0

08009c1c <_malloc_usable_size_r>:
 8009c1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c20:	1f18      	subs	r0, r3, #4
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	bfbc      	itt	lt
 8009c26:	580b      	ldrlt	r3, [r1, r0]
 8009c28:	18c0      	addlt	r0, r0, r3
 8009c2a:	4770      	bx	lr

08009c2c <_init>:
 8009c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c2e:	bf00      	nop
 8009c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c32:	bc08      	pop	{r3}
 8009c34:	469e      	mov	lr, r3
 8009c36:	4770      	bx	lr

08009c38 <_fini>:
 8009c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c3a:	bf00      	nop
 8009c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c3e:	bc08      	pop	{r3}
 8009c40:	469e      	mov	lr, r3
 8009c42:	4770      	bx	lr
